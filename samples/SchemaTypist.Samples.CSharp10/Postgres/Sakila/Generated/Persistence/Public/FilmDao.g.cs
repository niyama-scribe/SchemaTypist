//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypistSamples.Postgres.Sakila.Generated.Domain.Public;

namespace SchemaTypistSamples.Postgres.Sakila.Generated.Persistence.Public
{
	public static partial class FilmDao
	{
		static partial class Constants
		{
			public const string Description = "description";
			public const string FilmId = "film_id";
			public const string Fulltext = "fulltext";
			public const string LanguageId = "language_id";
			public const string LastUpdate = "last_update";
			public const string Length = "length";
			public const string OriginalLanguageId = "original_language_id";
			public const string Rating = "rating";
			public const string ReleaseYear = "release_year";
			public const string RentalDuration = "rental_duration";
			public const string RentalRate = "rental_rate";
			public const string ReplacementCost = "replacement_cost";
			public const string SpecialFeature = "special_features";
			public const string Title = "title";
		}

		public static TableDefinition Table => new TableDefinition();

		public partial class TableDefinition : TabularDefinition
		{
			public TableDefinition() : base("public.film")
			{
				Description = new ColumnDefinition(Constants.Description, this);
				FilmId = new ColumnDefinition(Constants.FilmId, this);
				Fulltext = new ColumnDefinition(Constants.Fulltext, this);
				LanguageId = new ColumnDefinition(Constants.LanguageId, this);
				LastUpdate = new ColumnDefinition(Constants.LastUpdate, this);
				Length = new ColumnDefinition(Constants.Length, this);
				OriginalLanguageId = new ColumnDefinition(Constants.OriginalLanguageId, this);
				Rating = new ColumnDefinition(Constants.Rating, this);
				ReleaseYear = new ColumnDefinition(Constants.ReleaseYear, this);
				RentalDuration = new ColumnDefinition(Constants.RentalDuration, this);
				RentalRate = new ColumnDefinition(Constants.RentalRate, this);
				ReplacementCost = new ColumnDefinition(Constants.ReplacementCost, this);
				SpecialFeature = new ColumnDefinition(Constants.SpecialFeature, this);
				Title = new ColumnDefinition(Constants.Title, this);
			}

			public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

			public ColumnDefinition Description { get; private set; }
			public ColumnDefinition FilmId { get; private set; }
			public ColumnDefinition Fulltext { get; private set; }
			public ColumnDefinition LanguageId { get; private set; }
			public ColumnDefinition LastUpdate { get; private set; }
			public ColumnDefinition Length { get; private set; }
			public ColumnDefinition OriginalLanguageId { get; private set; }
			public ColumnDefinition Rating { get; private set; }
			public ColumnDefinition ReleaseYear { get; private set; }
			public ColumnDefinition RentalDuration { get; private set; }
			public ColumnDefinition RentalRate { get; private set; }
			public ColumnDefinition ReplacementCost { get; private set; }
			public ColumnDefinition SpecialFeature { get; private set; }
			public ColumnDefinition Title { get; private set; }

		}
	
		public static partial class QueryResults
		{
			private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
			{
				{Constants.Description, nameof(Film.Description) },
				{Constants.FilmId, nameof(Film.FilmId) },
				{Constants.Fulltext, nameof(Film.Fulltext) },
				{Constants.LanguageId, nameof(Film.LanguageId) },
				{Constants.LastUpdate, nameof(Film.LastUpdate) },
				{Constants.Length, nameof(Film.Length) },
				{Constants.OriginalLanguageId, nameof(Film.OriginalLanguageId) },
				{Constants.Rating, nameof(Film.Rating) },
				{Constants.ReleaseYear, nameof(Film.ReleaseYear) },
				{Constants.RentalDuration, nameof(Film.RentalDuration) },
				{Constants.RentalRate, nameof(Film.RentalRate) },
				{Constants.ReplacementCost, nameof(Film.ReplacementCost) },
				{Constants.SpecialFeature, nameof(Film.SpecialFeature) },
				{Constants.Title, nameof(Film.Title) },
			};

			static Func<Type, string, PropertyInfo> GetMapperFunc()
			{
				var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
				{
					if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
					return t.GetProperty(columnName);
				}
				);
				return mapper;
			}

			public static CustomPropertyTypeMap GetTypeMap()
			{
				var typeMap = new CustomPropertyTypeMap(typeof(Film), GetMapperFunc());
				CustomizeTypeMap(typeMap);
				return typeMap;
			}

			static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
		}
	}
}