//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Samples.CSharp10.Postgres.Sakila.Generated.Domain.Public;

namespace SchemaTypist.Samples.CSharp10.Postgres.Sakila.Generated.Persistence.Public
{
	public static partial class StaffDao
	{
		static partial class Constants
		{
			public const string Active = "active";
			public const string AddressId = "address_id";
			public const string Email = "email";
			public const string FirstName = "first_name";
			public const string LastName = "last_name";
			public const string LastUpdate = "last_update";
			public const string Password = "password";
			public const string Picture = "picture";
			public const string StaffId = "staff_id";
			public const string StoreId = "store_id";
			public const string Username = "username";
		}

		public static TableDefinition Table => new TableDefinition();

		public partial class TableDefinition : TabularDefinition
		{
			public TableDefinition() : base("public.staff")
			{
				Active = new ColumnDefinition(Constants.Active, this);
				AddressId = new ColumnDefinition(Constants.AddressId, this);
				Email = new ColumnDefinition(Constants.Email, this);
				FirstName = new ColumnDefinition(Constants.FirstName, this);
				LastName = new ColumnDefinition(Constants.LastName, this);
				LastUpdate = new ColumnDefinition(Constants.LastUpdate, this);
				Password = new ColumnDefinition(Constants.Password, this);
				Picture = new ColumnDefinition(Constants.Picture, this);
				StaffId = new ColumnDefinition(Constants.StaffId, this);
				StoreId = new ColumnDefinition(Constants.StoreId, this);
				Username = new ColumnDefinition(Constants.Username, this);
			}

			public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

			public ColumnDefinition Active { get; private set; }
			public ColumnDefinition AddressId { get; private set; }
			public ColumnDefinition Email { get; private set; }
			public ColumnDefinition FirstName { get; private set; }
			public ColumnDefinition LastName { get; private set; }
			public ColumnDefinition LastUpdate { get; private set; }
			public ColumnDefinition Password { get; private set; }
			public ColumnDefinition Picture { get; private set; }
			public ColumnDefinition StaffId { get; private set; }
			public ColumnDefinition StoreId { get; private set; }
			public ColumnDefinition Username { get; private set; }

		}
	
		public static partial class QueryResults
		{
			private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
			{
				{Constants.Active, nameof(Staff.Active) },
				{Constants.AddressId, nameof(Staff.AddressId) },
				{Constants.Email, nameof(Staff.Email) },
				{Constants.FirstName, nameof(Staff.FirstName) },
				{Constants.LastName, nameof(Staff.LastName) },
				{Constants.LastUpdate, nameof(Staff.LastUpdate) },
				{Constants.Password, nameof(Staff.Password) },
				{Constants.Picture, nameof(Staff.Picture) },
				{Constants.StaffId, nameof(Staff.StaffId) },
				{Constants.StoreId, nameof(Staff.StoreId) },
				{Constants.Username, nameof(Staff.Username) },
			};

			static Func<Type, string, PropertyInfo> GetMapperFunc()
			{
				var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
				{
					if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
					return t.GetProperty(columnName);
				}
				);
				return mapper;
			}

			public static CustomPropertyTypeMap GetTypeMap()
			{
				var typeMap = new CustomPropertyTypeMap(typeof(Staff), GetMapperFunc());
				CustomizeTypeMap(typeMap);
				return typeMap;
			}

			static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
		}
	}
}