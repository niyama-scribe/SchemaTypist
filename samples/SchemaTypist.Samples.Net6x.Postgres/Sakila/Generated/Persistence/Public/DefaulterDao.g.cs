//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Samples.Net6x.Postgres.Sakila.Generated.Domain.Public;

namespace SchemaTypist.Samples.Net6x.Postgres.Sakila.Generated.Persistence.Public
{
	public static partial class DefaulterDao
	{
		static partial class Constants
		{
			public const string BlankableCol = "blankable_col";
			public const string DatetimeCol = "datetime_col";
			public const string DecimalCol = "decimal_col";
			public const string IntCol = "int_col";
			public const string NonNullableCol = "non_nullable_col";
			public const string NullableCol = "nullable_col";
			public const string StringCol = "string_col";
		}

		public static TableDefinition Table => new TableDefinition();

		public partial class TableDefinition : TabularDefinition
		{
			private readonly IDictionary<string, ColumnDefinition> _columns = new Dictionary<string, ColumnDefinition>();
                
			public TableDefinition() : base("public.defaulter")
			{
				_columns.Add(Constants.BlankableCol, new ColumnDefinition(Constants.BlankableCol, this));
				_columns.Add(Constants.DatetimeCol, new ColumnDefinition(Constants.DatetimeCol, this));
				_columns.Add(Constants.DecimalCol, new ColumnDefinition(Constants.DecimalCol, this));
				_columns.Add(Constants.IntCol, new ColumnDefinition(Constants.IntCol, this));
				_columns.Add(Constants.NonNullableCol, new ColumnDefinition(Constants.NonNullableCol, this));
				_columns.Add(Constants.NullableCol, new ColumnDefinition(Constants.NullableCol, this));
				_columns.Add(Constants.StringCol, new ColumnDefinition(Constants.StringCol, this));
			}

			public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

			public ColumnDefinition BlankableCol => _columns[Constants.BlankableCol];
			public ColumnDefinition DatetimeCol => _columns[Constants.DatetimeCol];
			public ColumnDefinition DecimalCol => _columns[Constants.DecimalCol];
			public ColumnDefinition IntCol => _columns[Constants.IntCol];
			public ColumnDefinition NonNullableCol => _columns[Constants.NonNullableCol];
			public ColumnDefinition NullableCol => _columns[Constants.NullableCol];
			public ColumnDefinition StringCol => _columns[Constants.StringCol];

			public IEnumerable<ColumnDefinition> Star => _columns.Values;
		}
	
		public static partial class QueryResults
		{
			private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
			{
				{Constants.BlankableCol, nameof(Defaulter.BlankableCol) },
				{Constants.DatetimeCol, nameof(Defaulter.DatetimeCol) },
				{Constants.DecimalCol, nameof(Defaulter.DecimalCol) },
				{Constants.IntCol, nameof(Defaulter.IntCol) },
				{Constants.NonNullableCol, nameof(Defaulter.NonNullableCol) },
				{Constants.NullableCol, nameof(Defaulter.NullableCol) },
				{Constants.StringCol, nameof(Defaulter.StringCol) },
			};

			static Func<Type, string, PropertyInfo> GetMapperFunc()
			{
				var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
				{
					if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
					return t.GetProperty(columnName);
				}
				);
				return mapper;
			}

			public static CustomPropertyTypeMap GetTypeMap()
			{
				var typeMap = new CustomPropertyTypeMap(typeof(Defaulter), GetMapperFunc());
				CustomizeTypeMap(typeMap);
				return typeMap;
			}

			static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
		}
	}
}