//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SchemaTypist.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Samples.NetStandard20.MsSql.StackOverflow.Generated.Domain.Dbo;

namespace SchemaTypist.Samples.NetStandard20.MsSql.StackOverflow.Generated.Persistence.Dbo
{
	public static partial class UserDao
	{
		static partial class Constants
		{
			public const string AboutMe = "AboutMe";
			public const string AccountId = "AccountId";
			public const string Age = "Age";
			public const string CreationDate = "CreationDate";
			public const string DisplayName = "DisplayName";
			public const string DownVote = "DownVotes";
			public const string EmailHash = "EmailHash";
			public const string Id = "Id";
			public const string LastAccessDate = "LastAccessDate";
			public const string Location = "Location";
			public const string Reputation = "Reputation";
			public const string UpVote = "UpVotes";
			public const string View = "Views";
			public const string WebsiteUrl = "WebsiteUrl";
		}

		public static TableDefinition Table => new TableDefinition();

		public partial class TableDefinition : TabularDefinition
		{
			private readonly IDictionary<string, ColumnDefinition> _columns = new Dictionary<string, ColumnDefinition>();
                
			public TableDefinition() : base("StackOverflow.dbo.Users")
			{
				_columns.Add(Constants.AboutMe, new ColumnDefinition(Constants.AboutMe, this));
				_columns.Add(Constants.AccountId, new ColumnDefinition(Constants.AccountId, this));
				_columns.Add(Constants.Age, new ColumnDefinition(Constants.Age, this));
				_columns.Add(Constants.CreationDate, new ColumnDefinition(Constants.CreationDate, this));
				_columns.Add(Constants.DisplayName, new ColumnDefinition(Constants.DisplayName, this));
				_columns.Add(Constants.DownVote, new ColumnDefinition(Constants.DownVote, this));
				_columns.Add(Constants.EmailHash, new ColumnDefinition(Constants.EmailHash, this));
				_columns.Add(Constants.Id, new ColumnDefinition(Constants.Id, this));
				_columns.Add(Constants.LastAccessDate, new ColumnDefinition(Constants.LastAccessDate, this));
				_columns.Add(Constants.Location, new ColumnDefinition(Constants.Location, this));
				_columns.Add(Constants.Reputation, new ColumnDefinition(Constants.Reputation, this));
				_columns.Add(Constants.UpVote, new ColumnDefinition(Constants.UpVote, this));
				_columns.Add(Constants.View, new ColumnDefinition(Constants.View, this));
				_columns.Add(Constants.WebsiteUrl, new ColumnDefinition(Constants.WebsiteUrl, this));
			}

			public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

			public ColumnDefinition AboutMe => _columns[Constants.AboutMe];
			public ColumnDefinition AccountId => _columns[Constants.AccountId];
			public ColumnDefinition Age => _columns[Constants.Age];
			public ColumnDefinition CreationDate => _columns[Constants.CreationDate];
			public ColumnDefinition DisplayName => _columns[Constants.DisplayName];
			public ColumnDefinition DownVote => _columns[Constants.DownVote];
			public ColumnDefinition EmailHash => _columns[Constants.EmailHash];
			public ColumnDefinition Id => _columns[Constants.Id];
			public ColumnDefinition LastAccessDate => _columns[Constants.LastAccessDate];
			public ColumnDefinition Location => _columns[Constants.Location];
			public ColumnDefinition Reputation => _columns[Constants.Reputation];
			public ColumnDefinition UpVote => _columns[Constants.UpVote];
			public ColumnDefinition View => _columns[Constants.View];
			public ColumnDefinition WebsiteUrl => _columns[Constants.WebsiteUrl];

			public IEnumerable<ColumnDefinition> Star => _columns.Values;
		}
	
		public static partial class QueryResults
		{
			private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
			{
				{Constants.AboutMe, nameof(User.AboutMe) },
				{Constants.AccountId, nameof(User.AccountId) },
				{Constants.Age, nameof(User.Age) },
				{Constants.CreationDate, nameof(User.CreationDate) },
				{Constants.DisplayName, nameof(User.DisplayName) },
				{Constants.DownVote, nameof(User.DownVote) },
				{Constants.EmailHash, nameof(User.EmailHash) },
				{Constants.Id, nameof(User.Id) },
				{Constants.LastAccessDate, nameof(User.LastAccessDate) },
				{Constants.Location, nameof(User.Location) },
				{Constants.Reputation, nameof(User.Reputation) },
				{Constants.UpVote, nameof(User.UpVote) },
				{Constants.View, nameof(User.View) },
				{Constants.WebsiteUrl, nameof(User.WebsiteUrl) },
			};

			static Func<Type, string, PropertyInfo> GetMapperFunc()
			{
				var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
				{
					if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
					return t.GetProperty(columnName);
				}
				);
				return mapper;
			}

			public static CustomPropertyTypeMap GetTypeMap()
			{
				var typeMap = new CustomPropertyTypeMap(typeof(User), GetMapperFunc());
				CustomizeTypeMap(typeMap);
				return typeMap;
			}

			static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
		}
	}
}