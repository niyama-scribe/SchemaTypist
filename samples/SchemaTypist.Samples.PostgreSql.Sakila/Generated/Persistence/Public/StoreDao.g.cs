//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain.Public;

namespace SchemaTypist.Generated.Persistence.Public
{
	public static partial class StoreDao
	{
		static partial class Constants
		{
			public const string AddressId = "address_id";
			public const string LastUpdate = "last_update";
			public const string ManagerStaffId = "manager_staff_id";
			public const string StoreId = "store_id";
		}

		public static TableDefinition Table => new TableDefinition();

		public partial class TableDefinition : TabularDefinition
		{
			public TableDefinition() : base("public.store")
			{
				AddressId = new ColumnDefinition(Constants.AddressId, this);
				LastUpdate = new ColumnDefinition(Constants.LastUpdate, this);
				ManagerStaffId = new ColumnDefinition(Constants.ManagerStaffId, this);
				StoreId = new ColumnDefinition(Constants.StoreId, this);
			}

			public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

			public ColumnDefinition AddressId { get; private set; }
			public ColumnDefinition LastUpdate { get; private set; }
			public ColumnDefinition ManagerStaffId { get; private set; }
			public ColumnDefinition StoreId { get; private set; }

		}
	
		public static partial class QueryResults
		{
			private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
			{
				{Constants.AddressId, nameof(Store.AddressId) },
				{Constants.LastUpdate, nameof(Store.LastUpdate) },
				{Constants.ManagerStaffId, nameof(Store.ManagerStaffId) },
				{Constants.StoreId, nameof(Store.StoreId) },
			};

			static Func<Type, string, PropertyInfo> GetMapperFunc()
			{
				var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
				{
					if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
					return t.GetProperty(columnName);
				}
				);
				return mapper;
			}

			public static CustomPropertyTypeMap GetTypeMap()
			{
				var typeMap = new CustomPropertyTypeMap(typeof(Store), GetMapperFunc());
				CustomizeTypeMap(typeMap);
				return typeMap;
			}

			static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
		}
	}
}