//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgStatProgressClusterMapper
		{
			static partial class Constants
			{
				public const string ClusterIndexRelid = "cluster_index_relid";
				public const string Command = "command";
				public const string Datid = "datid";
				public const string Datname = "datname";
				public const string HeapBlksScanned = "heap_blks_scanned";
				public const string HeapBlksTotal = "heap_blks_total";
				public const string HeapTuplesScanned = "heap_tuples_scanned";
				public const string HeapTuplesWritten = "heap_tuples_written";
				public const string IndexRebuildCount = "index_rebuild_count";
				public const string Phase = "phase";
				public const string Pid = "pid";
				public const string Relid = "relid";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_stat_progress_cluster")
				{
					ClusterIndexRelid = new ColumnDefinition(Constants.ClusterIndexRelid, this);
					Command = new ColumnDefinition(Constants.Command, this);
					Datid = new ColumnDefinition(Constants.Datid, this);
					Datname = new ColumnDefinition(Constants.Datname, this);
					HeapBlksScanned = new ColumnDefinition(Constants.HeapBlksScanned, this);
					HeapBlksTotal = new ColumnDefinition(Constants.HeapBlksTotal, this);
					HeapTuplesScanned = new ColumnDefinition(Constants.HeapTuplesScanned, this);
					HeapTuplesWritten = new ColumnDefinition(Constants.HeapTuplesWritten, this);
					IndexRebuildCount = new ColumnDefinition(Constants.IndexRebuildCount, this);
					Phase = new ColumnDefinition(Constants.Phase, this);
					Pid = new ColumnDefinition(Constants.Pid, this);
					Relid = new ColumnDefinition(Constants.Relid, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition ClusterIndexRelid { get; private set; }
				public ColumnDefinition Command { get; private set; }
				public ColumnDefinition Datid { get; private set; }
				public ColumnDefinition Datname { get; private set; }
				public ColumnDefinition HeapBlksScanned { get; private set; }
				public ColumnDefinition HeapBlksTotal { get; private set; }
				public ColumnDefinition HeapTuplesScanned { get; private set; }
				public ColumnDefinition HeapTuplesWritten { get; private set; }
				public ColumnDefinition IndexRebuildCount { get; private set; }
				public ColumnDefinition Phase { get; private set; }
				public ColumnDefinition Pid { get; private set; }
				public ColumnDefinition Relid { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.ClusterIndexRelid, nameof(PgStatProgressCluster.ClusterIndexRelid) },
					{Constants.Command, nameof(PgStatProgressCluster.Command) },
					{Constants.Datid, nameof(PgStatProgressCluster.Datid) },
					{Constants.Datname, nameof(PgStatProgressCluster.Datname) },
					{Constants.HeapBlksScanned, nameof(PgStatProgressCluster.HeapBlksScanned) },
					{Constants.HeapBlksTotal, nameof(PgStatProgressCluster.HeapBlksTotal) },
					{Constants.HeapTuplesScanned, nameof(PgStatProgressCluster.HeapTuplesScanned) },
					{Constants.HeapTuplesWritten, nameof(PgStatProgressCluster.HeapTuplesWritten) },
					{Constants.IndexRebuildCount, nameof(PgStatProgressCluster.IndexRebuildCount) },
					{Constants.Phase, nameof(PgStatProgressCluster.Phase) },
					{Constants.Pid, nameof(PgStatProgressCluster.Pid) },
					{Constants.Relid, nameof(PgStatProgressCluster.Relid) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgStatProgressCluster), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}