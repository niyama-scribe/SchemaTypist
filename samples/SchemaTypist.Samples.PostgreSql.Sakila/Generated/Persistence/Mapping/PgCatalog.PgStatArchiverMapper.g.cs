//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgStatArchiverMapper
		{
			static partial class Constants
			{
				public const string ArchivedCount = "archived_count";
				public const string FailedCount = "failed_count";
				public const string LastArchivedTime = "last_archived_time";
				public const string LastArchivedWal = "last_archived_wal";
				public const string LastFailedTime = "last_failed_time";
				public const string LastFailedWal = "last_failed_wal";
				public const string StatsReset = "stats_reset";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_stat_archiver")
				{
					ArchivedCount = new ColumnDefinition(Constants.ArchivedCount, this);
					FailedCount = new ColumnDefinition(Constants.FailedCount, this);
					LastArchivedTime = new ColumnDefinition(Constants.LastArchivedTime, this);
					LastArchivedWal = new ColumnDefinition(Constants.LastArchivedWal, this);
					LastFailedTime = new ColumnDefinition(Constants.LastFailedTime, this);
					LastFailedWal = new ColumnDefinition(Constants.LastFailedWal, this);
					StatsReset = new ColumnDefinition(Constants.StatsReset, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition ArchivedCount { get; private set; }
				public ColumnDefinition FailedCount { get; private set; }
				public ColumnDefinition LastArchivedTime { get; private set; }
				public ColumnDefinition LastArchivedWal { get; private set; }
				public ColumnDefinition LastFailedTime { get; private set; }
				public ColumnDefinition LastFailedWal { get; private set; }
				public ColumnDefinition StatsReset { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.ArchivedCount, nameof(PgStatArchiver.ArchivedCount) },
					{Constants.FailedCount, nameof(PgStatArchiver.FailedCount) },
					{Constants.LastArchivedTime, nameof(PgStatArchiver.LastArchivedTime) },
					{Constants.LastArchivedWal, nameof(PgStatArchiver.LastArchivedWal) },
					{Constants.LastFailedTime, nameof(PgStatArchiver.LastFailedTime) },
					{Constants.LastFailedWal, nameof(PgStatArchiver.LastFailedWal) },
					{Constants.StatsReset, nameof(PgStatArchiver.StatsReset) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgStatArchiver), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}