//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgExtensionMapper
		{
			static partial class Constants
			{
				public const string Extcondition = "extcondition";
				public const string Extconfig = "extconfig";
				public const string Extname = "extname";
				public const string Extnamespace = "extnamespace";
				public const string Extowner = "extowner";
				public const string Extrelocatable = "extrelocatable";
				public const string Extversion = "extversion";
				public const string Oid = "oid";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_extension")
				{
					Extcondition = new ColumnDefinition(Constants.Extcondition, this);
					Extconfig = new ColumnDefinition(Constants.Extconfig, this);
					Extname = new ColumnDefinition(Constants.Extname, this);
					Extnamespace = new ColumnDefinition(Constants.Extnamespace, this);
					Extowner = new ColumnDefinition(Constants.Extowner, this);
					Extrelocatable = new ColumnDefinition(Constants.Extrelocatable, this);
					Extversion = new ColumnDefinition(Constants.Extversion, this);
					Oid = new ColumnDefinition(Constants.Oid, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Extcondition { get; private set; }
				public ColumnDefinition Extconfig { get; private set; }
				public ColumnDefinition Extname { get; private set; }
				public ColumnDefinition Extnamespace { get; private set; }
				public ColumnDefinition Extowner { get; private set; }
				public ColumnDefinition Extrelocatable { get; private set; }
				public ColumnDefinition Extversion { get; private set; }
				public ColumnDefinition Oid { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Extcondition, nameof(PgExtension.Extcondition) },
					{Constants.Extconfig, nameof(PgExtension.Extconfig) },
					{Constants.Extname, nameof(PgExtension.Extname) },
					{Constants.Extnamespace, nameof(PgExtension.Extnamespace) },
					{Constants.Extowner, nameof(PgExtension.Extowner) },
					{Constants.Extrelocatable, nameof(PgExtension.Extrelocatable) },
					{Constants.Extversion, nameof(PgExtension.Extversion) },
					{Constants.Oid, nameof(PgExtension.Oid) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgExtension), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}