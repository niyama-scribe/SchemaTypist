//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgTsConfigMapMapper
		{
			static partial class Constants
			{
				public const string Mapcfg = "mapcfg";
				public const string Mapdict = "mapdict";
				public const string Mapseqno = "mapseqno";
				public const string Maptokentype = "maptokentype";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_ts_config_map")
				{
					Mapcfg = new ColumnDefinition(Constants.Mapcfg, this);
					Mapdict = new ColumnDefinition(Constants.Mapdict, this);
					Mapseqno = new ColumnDefinition(Constants.Mapseqno, this);
					Maptokentype = new ColumnDefinition(Constants.Maptokentype, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Mapcfg { get; private set; }
				public ColumnDefinition Mapdict { get; private set; }
				public ColumnDefinition Mapseqno { get; private set; }
				public ColumnDefinition Maptokentype { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Mapcfg, nameof(PgTsConfigMap.Mapcfg) },
					{Constants.Mapdict, nameof(PgTsConfigMap.Mapdict) },
					{Constants.Mapseqno, nameof(PgTsConfigMap.Mapseqno) },
					{Constants.Maptokentype, nameof(PgTsConfigMap.Maptokentype) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgTsConfigMap), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}