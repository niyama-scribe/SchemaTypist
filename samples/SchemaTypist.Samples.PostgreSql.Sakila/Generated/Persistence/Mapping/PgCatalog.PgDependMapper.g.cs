//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgDependMapper
		{
			static partial class Constants
			{
				public const string Classid = "classid";
				public const string Deptype = "deptype";
				public const string Objid = "objid";
				public const string Objsubid = "objsubid";
				public const string Refclassid = "refclassid";
				public const string Refobjid = "refobjid";
				public const string Refobjsubid = "refobjsubid";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_depend")
				{
					Classid = new ColumnDefinition(Constants.Classid, this);
					Deptype = new ColumnDefinition(Constants.Deptype, this);
					Objid = new ColumnDefinition(Constants.Objid, this);
					Objsubid = new ColumnDefinition(Constants.Objsubid, this);
					Refclassid = new ColumnDefinition(Constants.Refclassid, this);
					Refobjid = new ColumnDefinition(Constants.Refobjid, this);
					Refobjsubid = new ColumnDefinition(Constants.Refobjsubid, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Classid { get; private set; }
				public ColumnDefinition Deptype { get; private set; }
				public ColumnDefinition Objid { get; private set; }
				public ColumnDefinition Objsubid { get; private set; }
				public ColumnDefinition Refclassid { get; private set; }
				public ColumnDefinition Refobjid { get; private set; }
				public ColumnDefinition Refobjsubid { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Classid, nameof(PgDepend.Classid) },
					{Constants.Deptype, nameof(PgDepend.Deptype) },
					{Constants.Objid, nameof(PgDepend.Objid) },
					{Constants.Objsubid, nameof(PgDepend.Objsubid) },
					{Constants.Refclassid, nameof(PgDepend.Refclassid) },
					{Constants.Refobjid, nameof(PgDepend.Refobjid) },
					{Constants.Refobjsubid, nameof(PgDepend.Refobjsubid) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgDepend), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}