//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgStatDatabaseMapper
		{
			static partial class Constants
			{
				public const string ActiveTime = "active_time";
				public const string BlkReadTime = "blk_read_time";
				public const string BlkWriteTime = "blk_write_time";
				public const string BlksHit = "blks_hit";
				public const string BlksRead = "blks_read";
				public const string ChecksumFailure = "checksum_failures";
				public const string ChecksumLastFailure = "checksum_last_failure";
				public const string Conflict = "conflicts";
				public const string Datid = "datid";
				public const string Datname = "datname";
				public const string Deadlock = "deadlocks";
				public const string IdleInTransactionTime = "idle_in_transaction_time";
				public const string Numbackend = "numbackends";
				public const string SessionTime = "session_time";
				public const string Session = "sessions";
				public const string SessionsAbandoned = "sessions_abandoned";
				public const string SessionsFatal = "sessions_fatal";
				public const string SessionsKilled = "sessions_killed";
				public const string StatsReset = "stats_reset";
				public const string TempByte = "temp_bytes";
				public const string TempFile = "temp_files";
				public const string TupDeleted = "tup_deleted";
				public const string TupFetched = "tup_fetched";
				public const string TupInserted = "tup_inserted";
				public const string TupReturned = "tup_returned";
				public const string TupUpdated = "tup_updated";
				public const string XactCommit = "xact_commit";
				public const string XactRollback = "xact_rollback";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_stat_database")
				{
					ActiveTime = new ColumnDefinition(Constants.ActiveTime, this);
					BlkReadTime = new ColumnDefinition(Constants.BlkReadTime, this);
					BlkWriteTime = new ColumnDefinition(Constants.BlkWriteTime, this);
					BlksHit = new ColumnDefinition(Constants.BlksHit, this);
					BlksRead = new ColumnDefinition(Constants.BlksRead, this);
					ChecksumFailure = new ColumnDefinition(Constants.ChecksumFailure, this);
					ChecksumLastFailure = new ColumnDefinition(Constants.ChecksumLastFailure, this);
					Conflict = new ColumnDefinition(Constants.Conflict, this);
					Datid = new ColumnDefinition(Constants.Datid, this);
					Datname = new ColumnDefinition(Constants.Datname, this);
					Deadlock = new ColumnDefinition(Constants.Deadlock, this);
					IdleInTransactionTime = new ColumnDefinition(Constants.IdleInTransactionTime, this);
					Numbackend = new ColumnDefinition(Constants.Numbackend, this);
					SessionTime = new ColumnDefinition(Constants.SessionTime, this);
					Session = new ColumnDefinition(Constants.Session, this);
					SessionsAbandoned = new ColumnDefinition(Constants.SessionsAbandoned, this);
					SessionsFatal = new ColumnDefinition(Constants.SessionsFatal, this);
					SessionsKilled = new ColumnDefinition(Constants.SessionsKilled, this);
					StatsReset = new ColumnDefinition(Constants.StatsReset, this);
					TempByte = new ColumnDefinition(Constants.TempByte, this);
					TempFile = new ColumnDefinition(Constants.TempFile, this);
					TupDeleted = new ColumnDefinition(Constants.TupDeleted, this);
					TupFetched = new ColumnDefinition(Constants.TupFetched, this);
					TupInserted = new ColumnDefinition(Constants.TupInserted, this);
					TupReturned = new ColumnDefinition(Constants.TupReturned, this);
					TupUpdated = new ColumnDefinition(Constants.TupUpdated, this);
					XactCommit = new ColumnDefinition(Constants.XactCommit, this);
					XactRollback = new ColumnDefinition(Constants.XactRollback, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition ActiveTime { get; private set; }
				public ColumnDefinition BlkReadTime { get; private set; }
				public ColumnDefinition BlkWriteTime { get; private set; }
				public ColumnDefinition BlksHit { get; private set; }
				public ColumnDefinition BlksRead { get; private set; }
				public ColumnDefinition ChecksumFailure { get; private set; }
				public ColumnDefinition ChecksumLastFailure { get; private set; }
				public ColumnDefinition Conflict { get; private set; }
				public ColumnDefinition Datid { get; private set; }
				public ColumnDefinition Datname { get; private set; }
				public ColumnDefinition Deadlock { get; private set; }
				public ColumnDefinition IdleInTransactionTime { get; private set; }
				public ColumnDefinition Numbackend { get; private set; }
				public ColumnDefinition SessionTime { get; private set; }
				public ColumnDefinition Session { get; private set; }
				public ColumnDefinition SessionsAbandoned { get; private set; }
				public ColumnDefinition SessionsFatal { get; private set; }
				public ColumnDefinition SessionsKilled { get; private set; }
				public ColumnDefinition StatsReset { get; private set; }
				public ColumnDefinition TempByte { get; private set; }
				public ColumnDefinition TempFile { get; private set; }
				public ColumnDefinition TupDeleted { get; private set; }
				public ColumnDefinition TupFetched { get; private set; }
				public ColumnDefinition TupInserted { get; private set; }
				public ColumnDefinition TupReturned { get; private set; }
				public ColumnDefinition TupUpdated { get; private set; }
				public ColumnDefinition XactCommit { get; private set; }
				public ColumnDefinition XactRollback { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.ActiveTime, nameof(PgStatDatabase.ActiveTime) },
					{Constants.BlkReadTime, nameof(PgStatDatabase.BlkReadTime) },
					{Constants.BlkWriteTime, nameof(PgStatDatabase.BlkWriteTime) },
					{Constants.BlksHit, nameof(PgStatDatabase.BlksHit) },
					{Constants.BlksRead, nameof(PgStatDatabase.BlksRead) },
					{Constants.ChecksumFailure, nameof(PgStatDatabase.ChecksumFailure) },
					{Constants.ChecksumLastFailure, nameof(PgStatDatabase.ChecksumLastFailure) },
					{Constants.Conflict, nameof(PgStatDatabase.Conflict) },
					{Constants.Datid, nameof(PgStatDatabase.Datid) },
					{Constants.Datname, nameof(PgStatDatabase.Datname) },
					{Constants.Deadlock, nameof(PgStatDatabase.Deadlock) },
					{Constants.IdleInTransactionTime, nameof(PgStatDatabase.IdleInTransactionTime) },
					{Constants.Numbackend, nameof(PgStatDatabase.Numbackend) },
					{Constants.SessionTime, nameof(PgStatDatabase.SessionTime) },
					{Constants.Session, nameof(PgStatDatabase.Session) },
					{Constants.SessionsAbandoned, nameof(PgStatDatabase.SessionsAbandoned) },
					{Constants.SessionsFatal, nameof(PgStatDatabase.SessionsFatal) },
					{Constants.SessionsKilled, nameof(PgStatDatabase.SessionsKilled) },
					{Constants.StatsReset, nameof(PgStatDatabase.StatsReset) },
					{Constants.TempByte, nameof(PgStatDatabase.TempByte) },
					{Constants.TempFile, nameof(PgStatDatabase.TempFile) },
					{Constants.TupDeleted, nameof(PgStatDatabase.TupDeleted) },
					{Constants.TupFetched, nameof(PgStatDatabase.TupFetched) },
					{Constants.TupInserted, nameof(PgStatDatabase.TupInserted) },
					{Constants.TupReturned, nameof(PgStatDatabase.TupReturned) },
					{Constants.TupUpdated, nameof(PgStatDatabase.TupUpdated) },
					{Constants.XactCommit, nameof(PgStatDatabase.XactCommit) },
					{Constants.XactRollback, nameof(PgStatDatabase.XactRollback) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgStatDatabase), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}