//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgOperatorMapper
		{
			static partial class Constants
			{
				public const string Oid = "oid";
				public const string Oprcanhash = "oprcanhash";
				public const string Oprcanmerge = "oprcanmerge";
				public const string Oprcode = "oprcode";
				public const string Oprcom = "oprcom";
				public const string Oprjoin = "oprjoin";
				public const string Oprkind = "oprkind";
				public const string Oprleft = "oprleft";
				public const string Oprname = "oprname";
				public const string Oprnamespace = "oprnamespace";
				public const string Oprnegate = "oprnegate";
				public const string Oprowner = "oprowner";
				public const string Oprrest = "oprrest";
				public const string Oprresult = "oprresult";
				public const string Oprright = "oprright";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_operator")
				{
					Oid = new ColumnDefinition(Constants.Oid, this);
					Oprcanhash = new ColumnDefinition(Constants.Oprcanhash, this);
					Oprcanmerge = new ColumnDefinition(Constants.Oprcanmerge, this);
					Oprcode = new ColumnDefinition(Constants.Oprcode, this);
					Oprcom = new ColumnDefinition(Constants.Oprcom, this);
					Oprjoin = new ColumnDefinition(Constants.Oprjoin, this);
					Oprkind = new ColumnDefinition(Constants.Oprkind, this);
					Oprleft = new ColumnDefinition(Constants.Oprleft, this);
					Oprname = new ColumnDefinition(Constants.Oprname, this);
					Oprnamespace = new ColumnDefinition(Constants.Oprnamespace, this);
					Oprnegate = new ColumnDefinition(Constants.Oprnegate, this);
					Oprowner = new ColumnDefinition(Constants.Oprowner, this);
					Oprrest = new ColumnDefinition(Constants.Oprrest, this);
					Oprresult = new ColumnDefinition(Constants.Oprresult, this);
					Oprright = new ColumnDefinition(Constants.Oprright, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Oid { get; private set; }
				public ColumnDefinition Oprcanhash { get; private set; }
				public ColumnDefinition Oprcanmerge { get; private set; }
				public ColumnDefinition Oprcode { get; private set; }
				public ColumnDefinition Oprcom { get; private set; }
				public ColumnDefinition Oprjoin { get; private set; }
				public ColumnDefinition Oprkind { get; private set; }
				public ColumnDefinition Oprleft { get; private set; }
				public ColumnDefinition Oprname { get; private set; }
				public ColumnDefinition Oprnamespace { get; private set; }
				public ColumnDefinition Oprnegate { get; private set; }
				public ColumnDefinition Oprowner { get; private set; }
				public ColumnDefinition Oprrest { get; private set; }
				public ColumnDefinition Oprresult { get; private set; }
				public ColumnDefinition Oprright { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Oid, nameof(PgOperator.Oid) },
					{Constants.Oprcanhash, nameof(PgOperator.Oprcanhash) },
					{Constants.Oprcanmerge, nameof(PgOperator.Oprcanmerge) },
					{Constants.Oprcode, nameof(PgOperator.Oprcode) },
					{Constants.Oprcom, nameof(PgOperator.Oprcom) },
					{Constants.Oprjoin, nameof(PgOperator.Oprjoin) },
					{Constants.Oprkind, nameof(PgOperator.Oprkind) },
					{Constants.Oprleft, nameof(PgOperator.Oprleft) },
					{Constants.Oprname, nameof(PgOperator.Oprname) },
					{Constants.Oprnamespace, nameof(PgOperator.Oprnamespace) },
					{Constants.Oprnegate, nameof(PgOperator.Oprnegate) },
					{Constants.Oprowner, nameof(PgOperator.Oprowner) },
					{Constants.Oprrest, nameof(PgOperator.Oprrest) },
					{Constants.Oprresult, nameof(PgOperator.Oprresult) },
					{Constants.Oprright, nameof(PgOperator.Oprright) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgOperator), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}