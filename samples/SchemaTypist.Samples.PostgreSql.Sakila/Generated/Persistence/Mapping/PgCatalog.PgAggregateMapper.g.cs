//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgAggregateMapper
		{
			static partial class Constants
			{
				public const string Aggcombinefn = "aggcombinefn";
				public const string Aggdeserialfn = "aggdeserialfn";
				public const string Aggfinalextra = "aggfinalextra";
				public const string Aggfinalfn = "aggfinalfn";
				public const string Aggfinalmodify = "aggfinalmodify";
				public const string Aggfnoid = "aggfnoid";
				public const string Agginitval = "agginitval";
				public const string Aggkind = "aggkind";
				public const string Aggmfinalextra = "aggmfinalextra";
				public const string Aggmfinalfn = "aggmfinalfn";
				public const string Aggmfinalmodify = "aggmfinalmodify";
				public const string Aggminitval = "aggminitval";
				public const string Aggminvtransfn = "aggminvtransfn";
				public const string Aggmtransfn = "aggmtransfn";
				public const string Aggmtransspace = "aggmtransspace";
				public const string Aggmtranstype = "aggmtranstype";
				public const string Aggnumdirectarg = "aggnumdirectargs";
				public const string Aggserialfn = "aggserialfn";
				public const string Aggsortop = "aggsortop";
				public const string Aggtransfn = "aggtransfn";
				public const string Aggtransspace = "aggtransspace";
				public const string Aggtranstype = "aggtranstype";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_aggregate")
				{
					Aggcombinefn = new ColumnDefinition(Constants.Aggcombinefn, this);
					Aggdeserialfn = new ColumnDefinition(Constants.Aggdeserialfn, this);
					Aggfinalextra = new ColumnDefinition(Constants.Aggfinalextra, this);
					Aggfinalfn = new ColumnDefinition(Constants.Aggfinalfn, this);
					Aggfinalmodify = new ColumnDefinition(Constants.Aggfinalmodify, this);
					Aggfnoid = new ColumnDefinition(Constants.Aggfnoid, this);
					Agginitval = new ColumnDefinition(Constants.Agginitval, this);
					Aggkind = new ColumnDefinition(Constants.Aggkind, this);
					Aggmfinalextra = new ColumnDefinition(Constants.Aggmfinalextra, this);
					Aggmfinalfn = new ColumnDefinition(Constants.Aggmfinalfn, this);
					Aggmfinalmodify = new ColumnDefinition(Constants.Aggmfinalmodify, this);
					Aggminitval = new ColumnDefinition(Constants.Aggminitval, this);
					Aggminvtransfn = new ColumnDefinition(Constants.Aggminvtransfn, this);
					Aggmtransfn = new ColumnDefinition(Constants.Aggmtransfn, this);
					Aggmtransspace = new ColumnDefinition(Constants.Aggmtransspace, this);
					Aggmtranstype = new ColumnDefinition(Constants.Aggmtranstype, this);
					Aggnumdirectarg = new ColumnDefinition(Constants.Aggnumdirectarg, this);
					Aggserialfn = new ColumnDefinition(Constants.Aggserialfn, this);
					Aggsortop = new ColumnDefinition(Constants.Aggsortop, this);
					Aggtransfn = new ColumnDefinition(Constants.Aggtransfn, this);
					Aggtransspace = new ColumnDefinition(Constants.Aggtransspace, this);
					Aggtranstype = new ColumnDefinition(Constants.Aggtranstype, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Aggcombinefn { get; private set; }
				public ColumnDefinition Aggdeserialfn { get; private set; }
				public ColumnDefinition Aggfinalextra { get; private set; }
				public ColumnDefinition Aggfinalfn { get; private set; }
				public ColumnDefinition Aggfinalmodify { get; private set; }
				public ColumnDefinition Aggfnoid { get; private set; }
				public ColumnDefinition Agginitval { get; private set; }
				public ColumnDefinition Aggkind { get; private set; }
				public ColumnDefinition Aggmfinalextra { get; private set; }
				public ColumnDefinition Aggmfinalfn { get; private set; }
				public ColumnDefinition Aggmfinalmodify { get; private set; }
				public ColumnDefinition Aggminitval { get; private set; }
				public ColumnDefinition Aggminvtransfn { get; private set; }
				public ColumnDefinition Aggmtransfn { get; private set; }
				public ColumnDefinition Aggmtransspace { get; private set; }
				public ColumnDefinition Aggmtranstype { get; private set; }
				public ColumnDefinition Aggnumdirectarg { get; private set; }
				public ColumnDefinition Aggserialfn { get; private set; }
				public ColumnDefinition Aggsortop { get; private set; }
				public ColumnDefinition Aggtransfn { get; private set; }
				public ColumnDefinition Aggtransspace { get; private set; }
				public ColumnDefinition Aggtranstype { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Aggcombinefn, nameof(PgAggregate.Aggcombinefn) },
					{Constants.Aggdeserialfn, nameof(PgAggregate.Aggdeserialfn) },
					{Constants.Aggfinalextra, nameof(PgAggregate.Aggfinalextra) },
					{Constants.Aggfinalfn, nameof(PgAggregate.Aggfinalfn) },
					{Constants.Aggfinalmodify, nameof(PgAggregate.Aggfinalmodify) },
					{Constants.Aggfnoid, nameof(PgAggregate.Aggfnoid) },
					{Constants.Agginitval, nameof(PgAggregate.Agginitval) },
					{Constants.Aggkind, nameof(PgAggregate.Aggkind) },
					{Constants.Aggmfinalextra, nameof(PgAggregate.Aggmfinalextra) },
					{Constants.Aggmfinalfn, nameof(PgAggregate.Aggmfinalfn) },
					{Constants.Aggmfinalmodify, nameof(PgAggregate.Aggmfinalmodify) },
					{Constants.Aggminitval, nameof(PgAggregate.Aggminitval) },
					{Constants.Aggminvtransfn, nameof(PgAggregate.Aggminvtransfn) },
					{Constants.Aggmtransfn, nameof(PgAggregate.Aggmtransfn) },
					{Constants.Aggmtransspace, nameof(PgAggregate.Aggmtransspace) },
					{Constants.Aggmtranstype, nameof(PgAggregate.Aggmtranstype) },
					{Constants.Aggnumdirectarg, nameof(PgAggregate.Aggnumdirectarg) },
					{Constants.Aggserialfn, nameof(PgAggregate.Aggserialfn) },
					{Constants.Aggsortop, nameof(PgAggregate.Aggsortop) },
					{Constants.Aggtransfn, nameof(PgAggregate.Aggtransfn) },
					{Constants.Aggtransspace, nameof(PgAggregate.Aggtransspace) },
					{Constants.Aggtranstype, nameof(PgAggregate.Aggtranstype) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgAggregate), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}