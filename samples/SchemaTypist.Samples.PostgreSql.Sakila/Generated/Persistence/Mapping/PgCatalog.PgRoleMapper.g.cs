//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgRoleMapper
		{
			static partial class Constants
			{
				public const string Oid = "oid";
				public const string Rolbypassrl = "rolbypassrls";
				public const string Rolcanlogin = "rolcanlogin";
				public const string Rolconfig = "rolconfig";
				public const string Rolconnlimit = "rolconnlimit";
				public const string Rolcreatedb = "rolcreatedb";
				public const string Rolcreaterole = "rolcreaterole";
				public const string Rolinherit = "rolinherit";
				public const string Rolname = "rolname";
				public const string Rolpassword = "rolpassword";
				public const string Rolreplication = "rolreplication";
				public const string Rolsuper = "rolsuper";
				public const string Rolvaliduntil = "rolvaliduntil";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_roles")
				{
					Oid = new ColumnDefinition(Constants.Oid, this);
					Rolbypassrl = new ColumnDefinition(Constants.Rolbypassrl, this);
					Rolcanlogin = new ColumnDefinition(Constants.Rolcanlogin, this);
					Rolconfig = new ColumnDefinition(Constants.Rolconfig, this);
					Rolconnlimit = new ColumnDefinition(Constants.Rolconnlimit, this);
					Rolcreatedb = new ColumnDefinition(Constants.Rolcreatedb, this);
					Rolcreaterole = new ColumnDefinition(Constants.Rolcreaterole, this);
					Rolinherit = new ColumnDefinition(Constants.Rolinherit, this);
					Rolname = new ColumnDefinition(Constants.Rolname, this);
					Rolpassword = new ColumnDefinition(Constants.Rolpassword, this);
					Rolreplication = new ColumnDefinition(Constants.Rolreplication, this);
					Rolsuper = new ColumnDefinition(Constants.Rolsuper, this);
					Rolvaliduntil = new ColumnDefinition(Constants.Rolvaliduntil, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Oid { get; private set; }
				public ColumnDefinition Rolbypassrl { get; private set; }
				public ColumnDefinition Rolcanlogin { get; private set; }
				public ColumnDefinition Rolconfig { get; private set; }
				public ColumnDefinition Rolconnlimit { get; private set; }
				public ColumnDefinition Rolcreatedb { get; private set; }
				public ColumnDefinition Rolcreaterole { get; private set; }
				public ColumnDefinition Rolinherit { get; private set; }
				public ColumnDefinition Rolname { get; private set; }
				public ColumnDefinition Rolpassword { get; private set; }
				public ColumnDefinition Rolreplication { get; private set; }
				public ColumnDefinition Rolsuper { get; private set; }
				public ColumnDefinition Rolvaliduntil { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Oid, nameof(PgRole.Oid) },
					{Constants.Rolbypassrl, nameof(PgRole.Rolbypassrl) },
					{Constants.Rolcanlogin, nameof(PgRole.Rolcanlogin) },
					{Constants.Rolconfig, nameof(PgRole.Rolconfig) },
					{Constants.Rolconnlimit, nameof(PgRole.Rolconnlimit) },
					{Constants.Rolcreatedb, nameof(PgRole.Rolcreatedb) },
					{Constants.Rolcreaterole, nameof(PgRole.Rolcreaterole) },
					{Constants.Rolinherit, nameof(PgRole.Rolinherit) },
					{Constants.Rolname, nameof(PgRole.Rolname) },
					{Constants.Rolpassword, nameof(PgRole.Rolpassword) },
					{Constants.Rolreplication, nameof(PgRole.Rolreplication) },
					{Constants.Rolsuper, nameof(PgRole.Rolsuper) },
					{Constants.Rolvaliduntil, nameof(PgRole.Rolvaliduntil) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgRole), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}