//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgStatSslMapper
		{
			static partial class Constants
			{
				public const string Bit = "bits";
				public const string Cipher = "cipher";
				public const string ClientDn = "client_dn";
				public const string ClientSerial = "client_serial";
				public const string IssuerDn = "issuer_dn";
				public const string Pid = "pid";
				public const string Ssl = "ssl";
				public const string Version = "version";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_stat_ssl")
				{
					Bit = new ColumnDefinition(Constants.Bit, this);
					Cipher = new ColumnDefinition(Constants.Cipher, this);
					ClientDn = new ColumnDefinition(Constants.ClientDn, this);
					ClientSerial = new ColumnDefinition(Constants.ClientSerial, this);
					IssuerDn = new ColumnDefinition(Constants.IssuerDn, this);
					Pid = new ColumnDefinition(Constants.Pid, this);
					Ssl = new ColumnDefinition(Constants.Ssl, this);
					Version = new ColumnDefinition(Constants.Version, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Bit { get; private set; }
				public ColumnDefinition Cipher { get; private set; }
				public ColumnDefinition ClientDn { get; private set; }
				public ColumnDefinition ClientSerial { get; private set; }
				public ColumnDefinition IssuerDn { get; private set; }
				public ColumnDefinition Pid { get; private set; }
				public ColumnDefinition Ssl { get; private set; }
				public ColumnDefinition Version { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Bit, nameof(PgStatSsl.Bit) },
					{Constants.Cipher, nameof(PgStatSsl.Cipher) },
					{Constants.ClientDn, nameof(PgStatSsl.ClientDn) },
					{Constants.ClientSerial, nameof(PgStatSsl.ClientSerial) },
					{Constants.IssuerDn, nameof(PgStatSsl.IssuerDn) },
					{Constants.Pid, nameof(PgStatSsl.Pid) },
					{Constants.Ssl, nameof(PgStatSsl.Ssl) },
					{Constants.Version, nameof(PgStatSsl.Version) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgStatSsl), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}