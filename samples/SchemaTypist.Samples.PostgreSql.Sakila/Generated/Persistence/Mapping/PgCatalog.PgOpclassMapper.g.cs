//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgOpclassMapper
		{
			static partial class Constants
			{
				public const string Oid = "oid";
				public const string Opcdefault = "opcdefault";
				public const string Opcfamily = "opcfamily";
				public const string Opcintype = "opcintype";
				public const string Opckeytype = "opckeytype";
				public const string Opcmethod = "opcmethod";
				public const string Opcname = "opcname";
				public const string Opcnamespace = "opcnamespace";
				public const string Opcowner = "opcowner";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_opclass")
				{
					Oid = new ColumnDefinition(Constants.Oid, this);
					Opcdefault = new ColumnDefinition(Constants.Opcdefault, this);
					Opcfamily = new ColumnDefinition(Constants.Opcfamily, this);
					Opcintype = new ColumnDefinition(Constants.Opcintype, this);
					Opckeytype = new ColumnDefinition(Constants.Opckeytype, this);
					Opcmethod = new ColumnDefinition(Constants.Opcmethod, this);
					Opcname = new ColumnDefinition(Constants.Opcname, this);
					Opcnamespace = new ColumnDefinition(Constants.Opcnamespace, this);
					Opcowner = new ColumnDefinition(Constants.Opcowner, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Oid { get; private set; }
				public ColumnDefinition Opcdefault { get; private set; }
				public ColumnDefinition Opcfamily { get; private set; }
				public ColumnDefinition Opcintype { get; private set; }
				public ColumnDefinition Opckeytype { get; private set; }
				public ColumnDefinition Opcmethod { get; private set; }
				public ColumnDefinition Opcname { get; private set; }
				public ColumnDefinition Opcnamespace { get; private set; }
				public ColumnDefinition Opcowner { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Oid, nameof(PgOpclass.Oid) },
					{Constants.Opcdefault, nameof(PgOpclass.Opcdefault) },
					{Constants.Opcfamily, nameof(PgOpclass.Opcfamily) },
					{Constants.Opcintype, nameof(PgOpclass.Opcintype) },
					{Constants.Opckeytype, nameof(PgOpclass.Opckeytype) },
					{Constants.Opcmethod, nameof(PgOpclass.Opcmethod) },
					{Constants.Opcname, nameof(PgOpclass.Opcname) },
					{Constants.Opcnamespace, nameof(PgOpclass.Opcnamespace) },
					{Constants.Opcowner, nameof(PgOpclass.Opcowner) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgOpclass), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}