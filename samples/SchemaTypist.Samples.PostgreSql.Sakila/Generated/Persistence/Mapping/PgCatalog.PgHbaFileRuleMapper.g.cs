//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgHbaFileRuleMapper
		{
			static partial class Constants
			{
				public const string Address = "address";
				public const string AuthMethod = "auth_method";
				public const string Database = "database";
				public const string Error = "error";
				public const string LineNumber = "line_number";
				public const string Netmask = "netmask";
				public const string Option = "options";
				public const string Type = "type";
				public const string UserName = "user_name";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_hba_file_rules")
				{
					Address = new ColumnDefinition(Constants.Address, this);
					AuthMethod = new ColumnDefinition(Constants.AuthMethod, this);
					Database = new ColumnDefinition(Constants.Database, this);
					Error = new ColumnDefinition(Constants.Error, this);
					LineNumber = new ColumnDefinition(Constants.LineNumber, this);
					Netmask = new ColumnDefinition(Constants.Netmask, this);
					Option = new ColumnDefinition(Constants.Option, this);
					Type = new ColumnDefinition(Constants.Type, this);
					UserName = new ColumnDefinition(Constants.UserName, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Address { get; private set; }
				public ColumnDefinition AuthMethod { get; private set; }
				public ColumnDefinition Database { get; private set; }
				public ColumnDefinition Error { get; private set; }
				public ColumnDefinition LineNumber { get; private set; }
				public ColumnDefinition Netmask { get; private set; }
				public ColumnDefinition Option { get; private set; }
				public ColumnDefinition Type { get; private set; }
				public ColumnDefinition UserName { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Address, nameof(PgHbaFileRule.Address) },
					{Constants.AuthMethod, nameof(PgHbaFileRule.AuthMethod) },
					{Constants.Database, nameof(PgHbaFileRule.Database) },
					{Constants.Error, nameof(PgHbaFileRule.Error) },
					{Constants.LineNumber, nameof(PgHbaFileRule.LineNumber) },
					{Constants.Netmask, nameof(PgHbaFileRule.Netmask) },
					{Constants.Option, nameof(PgHbaFileRule.Option) },
					{Constants.Type, nameof(PgHbaFileRule.Type) },
					{Constants.UserName, nameof(PgHbaFileRule.UserName) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgHbaFileRule), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}