//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgConversionMapper
		{
			static partial class Constants
			{
				public const string Condefault = "condefault";
				public const string Conforencoding = "conforencoding";
				public const string Conname = "conname";
				public const string Connamespace = "connamespace";
				public const string Conowner = "conowner";
				public const string Conproc = "conproc";
				public const string Contoencoding = "contoencoding";
				public const string Oid = "oid";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_conversion")
				{
					Condefault = new ColumnDefinition(Constants.Condefault, this);
					Conforencoding = new ColumnDefinition(Constants.Conforencoding, this);
					Conname = new ColumnDefinition(Constants.Conname, this);
					Connamespace = new ColumnDefinition(Constants.Connamespace, this);
					Conowner = new ColumnDefinition(Constants.Conowner, this);
					Conproc = new ColumnDefinition(Constants.Conproc, this);
					Contoencoding = new ColumnDefinition(Constants.Contoencoding, this);
					Oid = new ColumnDefinition(Constants.Oid, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Condefault { get; private set; }
				public ColumnDefinition Conforencoding { get; private set; }
				public ColumnDefinition Conname { get; private set; }
				public ColumnDefinition Connamespace { get; private set; }
				public ColumnDefinition Conowner { get; private set; }
				public ColumnDefinition Conproc { get; private set; }
				public ColumnDefinition Contoencoding { get; private set; }
				public ColumnDefinition Oid { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Condefault, nameof(PgConversion.Condefault) },
					{Constants.Conforencoding, nameof(PgConversion.Conforencoding) },
					{Constants.Conname, nameof(PgConversion.Conname) },
					{Constants.Connamespace, nameof(PgConversion.Connamespace) },
					{Constants.Conowner, nameof(PgConversion.Conowner) },
					{Constants.Conproc, nameof(PgConversion.Conproc) },
					{Constants.Contoencoding, nameof(PgConversion.Contoencoding) },
					{Constants.Oid, nameof(PgConversion.Oid) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgConversion), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}