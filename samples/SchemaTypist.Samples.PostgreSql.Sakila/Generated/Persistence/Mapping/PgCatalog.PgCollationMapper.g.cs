//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgCollationMapper
		{
			static partial class Constants
			{
				public const string Collcollate = "collcollate";
				public const string Collctype = "collctype";
				public const string Collencoding = "collencoding";
				public const string Collisdeterministic = "collisdeterministic";
				public const string Collname = "collname";
				public const string Collnamespace = "collnamespace";
				public const string Collowner = "collowner";
				public const string Collprovider = "collprovider";
				public const string Collversion = "collversion";
				public const string Oid = "oid";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_collation")
				{
					Collcollate = new ColumnDefinition(Constants.Collcollate, this);
					Collctype = new ColumnDefinition(Constants.Collctype, this);
					Collencoding = new ColumnDefinition(Constants.Collencoding, this);
					Collisdeterministic = new ColumnDefinition(Constants.Collisdeterministic, this);
					Collname = new ColumnDefinition(Constants.Collname, this);
					Collnamespace = new ColumnDefinition(Constants.Collnamespace, this);
					Collowner = new ColumnDefinition(Constants.Collowner, this);
					Collprovider = new ColumnDefinition(Constants.Collprovider, this);
					Collversion = new ColumnDefinition(Constants.Collversion, this);
					Oid = new ColumnDefinition(Constants.Oid, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Collcollate { get; private set; }
				public ColumnDefinition Collctype { get; private set; }
				public ColumnDefinition Collencoding { get; private set; }
				public ColumnDefinition Collisdeterministic { get; private set; }
				public ColumnDefinition Collname { get; private set; }
				public ColumnDefinition Collnamespace { get; private set; }
				public ColumnDefinition Collowner { get; private set; }
				public ColumnDefinition Collprovider { get; private set; }
				public ColumnDefinition Collversion { get; private set; }
				public ColumnDefinition Oid { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Collcollate, nameof(PgCollation.Collcollate) },
					{Constants.Collctype, nameof(PgCollation.Collctype) },
					{Constants.Collencoding, nameof(PgCollation.Collencoding) },
					{Constants.Collisdeterministic, nameof(PgCollation.Collisdeterministic) },
					{Constants.Collname, nameof(PgCollation.Collname) },
					{Constants.Collnamespace, nameof(PgCollation.Collnamespace) },
					{Constants.Collowner, nameof(PgCollation.Collowner) },
					{Constants.Collprovider, nameof(PgCollation.Collprovider) },
					{Constants.Collversion, nameof(PgCollation.Collversion) },
					{Constants.Oid, nameof(PgCollation.Oid) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgCollation), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}