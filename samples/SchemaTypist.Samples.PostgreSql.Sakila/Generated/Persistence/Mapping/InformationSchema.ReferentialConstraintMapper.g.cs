//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class InformationSchema
	{
		public static partial class ReferentialConstraintMapper
		{
			static partial class Constants
			{
				public const string ConstraintCatalog = "constraint_catalog";
				public const string ConstraintName = "constraint_name";
				public const string ConstraintSchema = "constraint_schema";
				public const string DeleteRule = "delete_rule";
				public const string MatchOption = "match_option";
				public const string UniqueConstraintCatalog = "unique_constraint_catalog";
				public const string UniqueConstraintName = "unique_constraint_name";
				public const string UniqueConstraintSchema = "unique_constraint_schema";
				public const string UpdateRule = "update_rule";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("information_schema.referential_constraints")
				{
					ConstraintCatalog = new ColumnDefinition(Constants.ConstraintCatalog, this);
					ConstraintName = new ColumnDefinition(Constants.ConstraintName, this);
					ConstraintSchema = new ColumnDefinition(Constants.ConstraintSchema, this);
					DeleteRule = new ColumnDefinition(Constants.DeleteRule, this);
					MatchOption = new ColumnDefinition(Constants.MatchOption, this);
					UniqueConstraintCatalog = new ColumnDefinition(Constants.UniqueConstraintCatalog, this);
					UniqueConstraintName = new ColumnDefinition(Constants.UniqueConstraintName, this);
					UniqueConstraintSchema = new ColumnDefinition(Constants.UniqueConstraintSchema, this);
					UpdateRule = new ColumnDefinition(Constants.UpdateRule, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition ConstraintCatalog { get; private set; }
				public ColumnDefinition ConstraintName { get; private set; }
				public ColumnDefinition ConstraintSchema { get; private set; }
				public ColumnDefinition DeleteRule { get; private set; }
				public ColumnDefinition MatchOption { get; private set; }
				public ColumnDefinition UniqueConstraintCatalog { get; private set; }
				public ColumnDefinition UniqueConstraintName { get; private set; }
				public ColumnDefinition UniqueConstraintSchema { get; private set; }
				public ColumnDefinition UpdateRule { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.ConstraintCatalog, nameof(ReferentialConstraint.ConstraintCatalog) },
					{Constants.ConstraintName, nameof(ReferentialConstraint.ConstraintName) },
					{Constants.ConstraintSchema, nameof(ReferentialConstraint.ConstraintSchema) },
					{Constants.DeleteRule, nameof(ReferentialConstraint.DeleteRule) },
					{Constants.MatchOption, nameof(ReferentialConstraint.MatchOption) },
					{Constants.UniqueConstraintCatalog, nameof(ReferentialConstraint.UniqueConstraintCatalog) },
					{Constants.UniqueConstraintName, nameof(ReferentialConstraint.UniqueConstraintName) },
					{Constants.UniqueConstraintSchema, nameof(ReferentialConstraint.UniqueConstraintSchema) },
					{Constants.UpdateRule, nameof(ReferentialConstraint.UpdateRule) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(ReferentialConstraint), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}