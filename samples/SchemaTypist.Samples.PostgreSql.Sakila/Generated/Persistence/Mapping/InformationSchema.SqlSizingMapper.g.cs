//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class InformationSchema
	{
		public static partial class SqlSizingMapper
		{
			static partial class Constants
			{
				public const string Comment = "comments";
				public const string SizingId = "sizing_id";
				public const string SizingName = "sizing_name";
				public const string SupportedValue = "supported_value";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("information_schema.sql_sizing")
				{
					Comment = new ColumnDefinition(Constants.Comment, this);
					SizingId = new ColumnDefinition(Constants.SizingId, this);
					SizingName = new ColumnDefinition(Constants.SizingName, this);
					SupportedValue = new ColumnDefinition(Constants.SupportedValue, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Comment { get; private set; }
				public ColumnDefinition SizingId { get; private set; }
				public ColumnDefinition SizingName { get; private set; }
				public ColumnDefinition SupportedValue { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Comment, nameof(SqlSizing.Comment) },
					{Constants.SizingId, nameof(SqlSizing.SizingId) },
					{Constants.SizingName, nameof(SqlSizing.SizingName) },
					{Constants.SupportedValue, nameof(SqlSizing.SupportedValue) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(SqlSizing), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}