//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgUserMapper
		{
			static partial class Constants
			{
				public const string Passwd = "passwd";
				public const string Usebypassrl = "usebypassrls";
				public const string Useconfig = "useconfig";
				public const string Usecreatedb = "usecreatedb";
				public const string Usename = "usename";
				public const string Userepl = "userepl";
				public const string Usesuper = "usesuper";
				public const string Usesysid = "usesysid";
				public const string Valuntil = "valuntil";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_user")
				{
					Passwd = new ColumnDefinition(Constants.Passwd, this);
					Usebypassrl = new ColumnDefinition(Constants.Usebypassrl, this);
					Useconfig = new ColumnDefinition(Constants.Useconfig, this);
					Usecreatedb = new ColumnDefinition(Constants.Usecreatedb, this);
					Usename = new ColumnDefinition(Constants.Usename, this);
					Userepl = new ColumnDefinition(Constants.Userepl, this);
					Usesuper = new ColumnDefinition(Constants.Usesuper, this);
					Usesysid = new ColumnDefinition(Constants.Usesysid, this);
					Valuntil = new ColumnDefinition(Constants.Valuntil, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Passwd { get; private set; }
				public ColumnDefinition Usebypassrl { get; private set; }
				public ColumnDefinition Useconfig { get; private set; }
				public ColumnDefinition Usecreatedb { get; private set; }
				public ColumnDefinition Usename { get; private set; }
				public ColumnDefinition Userepl { get; private set; }
				public ColumnDefinition Usesuper { get; private set; }
				public ColumnDefinition Usesysid { get; private set; }
				public ColumnDefinition Valuntil { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Passwd, nameof(PgUser.Passwd) },
					{Constants.Usebypassrl, nameof(PgUser.Usebypassrl) },
					{Constants.Useconfig, nameof(PgUser.Useconfig) },
					{Constants.Usecreatedb, nameof(PgUser.Usecreatedb) },
					{Constants.Usename, nameof(PgUser.Usename) },
					{Constants.Userepl, nameof(PgUser.Userepl) },
					{Constants.Usesuper, nameof(PgUser.Usesuper) },
					{Constants.Usesysid, nameof(PgUser.Usesysid) },
					{Constants.Valuntil, nameof(PgUser.Valuntil) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgUser), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}