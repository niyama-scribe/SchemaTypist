//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgStatProgressAnalyzeMapper
		{
			static partial class Constants
			{
				public const string ChildTablesDone = "child_tables_done";
				public const string ChildTablesTotal = "child_tables_total";
				public const string CurrentChildTableRelid = "current_child_table_relid";
				public const string Datid = "datid";
				public const string Datname = "datname";
				public const string ExtStatsComputed = "ext_stats_computed";
				public const string ExtStatsTotal = "ext_stats_total";
				public const string Phase = "phase";
				public const string Pid = "pid";
				public const string Relid = "relid";
				public const string SampleBlksScanned = "sample_blks_scanned";
				public const string SampleBlksTotal = "sample_blks_total";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_stat_progress_analyze")
				{
					ChildTablesDone = new ColumnDefinition(Constants.ChildTablesDone, this);
					ChildTablesTotal = new ColumnDefinition(Constants.ChildTablesTotal, this);
					CurrentChildTableRelid = new ColumnDefinition(Constants.CurrentChildTableRelid, this);
					Datid = new ColumnDefinition(Constants.Datid, this);
					Datname = new ColumnDefinition(Constants.Datname, this);
					ExtStatsComputed = new ColumnDefinition(Constants.ExtStatsComputed, this);
					ExtStatsTotal = new ColumnDefinition(Constants.ExtStatsTotal, this);
					Phase = new ColumnDefinition(Constants.Phase, this);
					Pid = new ColumnDefinition(Constants.Pid, this);
					Relid = new ColumnDefinition(Constants.Relid, this);
					SampleBlksScanned = new ColumnDefinition(Constants.SampleBlksScanned, this);
					SampleBlksTotal = new ColumnDefinition(Constants.SampleBlksTotal, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition ChildTablesDone { get; private set; }
				public ColumnDefinition ChildTablesTotal { get; private set; }
				public ColumnDefinition CurrentChildTableRelid { get; private set; }
				public ColumnDefinition Datid { get; private set; }
				public ColumnDefinition Datname { get; private set; }
				public ColumnDefinition ExtStatsComputed { get; private set; }
				public ColumnDefinition ExtStatsTotal { get; private set; }
				public ColumnDefinition Phase { get; private set; }
				public ColumnDefinition Pid { get; private set; }
				public ColumnDefinition Relid { get; private set; }
				public ColumnDefinition SampleBlksScanned { get; private set; }
				public ColumnDefinition SampleBlksTotal { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.ChildTablesDone, nameof(PgStatProgressAnalyze.ChildTablesDone) },
					{Constants.ChildTablesTotal, nameof(PgStatProgressAnalyze.ChildTablesTotal) },
					{Constants.CurrentChildTableRelid, nameof(PgStatProgressAnalyze.CurrentChildTableRelid) },
					{Constants.Datid, nameof(PgStatProgressAnalyze.Datid) },
					{Constants.Datname, nameof(PgStatProgressAnalyze.Datname) },
					{Constants.ExtStatsComputed, nameof(PgStatProgressAnalyze.ExtStatsComputed) },
					{Constants.ExtStatsTotal, nameof(PgStatProgressAnalyze.ExtStatsTotal) },
					{Constants.Phase, nameof(PgStatProgressAnalyze.Phase) },
					{Constants.Pid, nameof(PgStatProgressAnalyze.Pid) },
					{Constants.Relid, nameof(PgStatProgressAnalyze.Relid) },
					{Constants.SampleBlksScanned, nameof(PgStatProgressAnalyze.SampleBlksScanned) },
					{Constants.SampleBlksTotal, nameof(PgStatProgressAnalyze.SampleBlksTotal) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgStatProgressAnalyze), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}