//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgStatisticExtDatumMapper
		{
			static partial class Constants
			{
				public const string Stxddependency = "stxddependencies";
				public const string Stxdexpr = "stxdexpr";
				public const string Stxdmcv = "stxdmcv";
				public const string Stxdndistinct = "stxdndistinct";
				public const string Stxoid = "stxoid";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_statistic_ext_data")
				{
					Stxddependency = new ColumnDefinition(Constants.Stxddependency, this);
					Stxdexpr = new ColumnDefinition(Constants.Stxdexpr, this);
					Stxdmcv = new ColumnDefinition(Constants.Stxdmcv, this);
					Stxdndistinct = new ColumnDefinition(Constants.Stxdndistinct, this);
					Stxoid = new ColumnDefinition(Constants.Stxoid, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Stxddependency { get; private set; }
				public ColumnDefinition Stxdexpr { get; private set; }
				public ColumnDefinition Stxdmcv { get; private set; }
				public ColumnDefinition Stxdndistinct { get; private set; }
				public ColumnDefinition Stxoid { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Stxddependency, nameof(PgStatisticExtDatum.Stxddependency) },
					{Constants.Stxdexpr, nameof(PgStatisticExtDatum.Stxdexpr) },
					{Constants.Stxdmcv, nameof(PgStatisticExtDatum.Stxdmcv) },
					{Constants.Stxdndistinct, nameof(PgStatisticExtDatum.Stxdndistinct) },
					{Constants.Stxoid, nameof(PgStatisticExtDatum.Stxoid) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgStatisticExtDatum), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}