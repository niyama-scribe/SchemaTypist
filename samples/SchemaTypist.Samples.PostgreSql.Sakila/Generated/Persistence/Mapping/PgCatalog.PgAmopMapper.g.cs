//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgAmopMapper
		{
			static partial class Constants
			{
				public const string Amopfamily = "amopfamily";
				public const string Amoplefttype = "amoplefttype";
				public const string Amopmethod = "amopmethod";
				public const string Amopopr = "amopopr";
				public const string Amoppurpose = "amoppurpose";
				public const string Amoprighttype = "amoprighttype";
				public const string Amopsortfamily = "amopsortfamily";
				public const string Amopstrategy = "amopstrategy";
				public const string Oid = "oid";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_amop")
				{
					Amopfamily = new ColumnDefinition(Constants.Amopfamily, this);
					Amoplefttype = new ColumnDefinition(Constants.Amoplefttype, this);
					Amopmethod = new ColumnDefinition(Constants.Amopmethod, this);
					Amopopr = new ColumnDefinition(Constants.Amopopr, this);
					Amoppurpose = new ColumnDefinition(Constants.Amoppurpose, this);
					Amoprighttype = new ColumnDefinition(Constants.Amoprighttype, this);
					Amopsortfamily = new ColumnDefinition(Constants.Amopsortfamily, this);
					Amopstrategy = new ColumnDefinition(Constants.Amopstrategy, this);
					Oid = new ColumnDefinition(Constants.Oid, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Amopfamily { get; private set; }
				public ColumnDefinition Amoplefttype { get; private set; }
				public ColumnDefinition Amopmethod { get; private set; }
				public ColumnDefinition Amopopr { get; private set; }
				public ColumnDefinition Amoppurpose { get; private set; }
				public ColumnDefinition Amoprighttype { get; private set; }
				public ColumnDefinition Amopsortfamily { get; private set; }
				public ColumnDefinition Amopstrategy { get; private set; }
				public ColumnDefinition Oid { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Amopfamily, nameof(PgAmop.Amopfamily) },
					{Constants.Amoplefttype, nameof(PgAmop.Amoplefttype) },
					{Constants.Amopmethod, nameof(PgAmop.Amopmethod) },
					{Constants.Amopopr, nameof(PgAmop.Amopopr) },
					{Constants.Amoppurpose, nameof(PgAmop.Amoppurpose) },
					{Constants.Amoprighttype, nameof(PgAmop.Amoprighttype) },
					{Constants.Amopsortfamily, nameof(PgAmop.Amopsortfamily) },
					{Constants.Amopstrategy, nameof(PgAmop.Amopstrategy) },
					{Constants.Oid, nameof(PgAmop.Oid) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgAmop), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}