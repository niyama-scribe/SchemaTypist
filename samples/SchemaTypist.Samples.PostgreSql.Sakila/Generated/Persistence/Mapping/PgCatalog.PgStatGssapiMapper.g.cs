//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgStatGssapiMapper
		{
			static partial class Constants
			{
				public const string Encrypted = "encrypted";
				public const string GssAuthenticated = "gss_authenticated";
				public const string Pid = "pid";
				public const string Principal = "principal";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_stat_gssapi")
				{
					Encrypted = new ColumnDefinition(Constants.Encrypted, this);
					GssAuthenticated = new ColumnDefinition(Constants.GssAuthenticated, this);
					Pid = new ColumnDefinition(Constants.Pid, this);
					Principal = new ColumnDefinition(Constants.Principal, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Encrypted { get; private set; }
				public ColumnDefinition GssAuthenticated { get; private set; }
				public ColumnDefinition Pid { get; private set; }
				public ColumnDefinition Principal { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Encrypted, nameof(PgStatGssapi.Encrypted) },
					{Constants.GssAuthenticated, nameof(PgStatGssapi.GssAuthenticated) },
					{Constants.Pid, nameof(PgStatGssapi.Pid) },
					{Constants.Principal, nameof(PgStatGssapi.Principal) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgStatGssapi), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}