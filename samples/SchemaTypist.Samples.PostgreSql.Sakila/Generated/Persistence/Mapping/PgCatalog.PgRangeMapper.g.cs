//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgRangeMapper
		{
			static partial class Constants
			{
				public const string Rngcanonical = "rngcanonical";
				public const string Rngcollation = "rngcollation";
				public const string Rngmultitypid = "rngmultitypid";
				public const string Rngsubdiff = "rngsubdiff";
				public const string Rngsubopc = "rngsubopc";
				public const string Rngsubtype = "rngsubtype";
				public const string Rngtypid = "rngtypid";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_range")
				{
					Rngcanonical = new ColumnDefinition(Constants.Rngcanonical, this);
					Rngcollation = new ColumnDefinition(Constants.Rngcollation, this);
					Rngmultitypid = new ColumnDefinition(Constants.Rngmultitypid, this);
					Rngsubdiff = new ColumnDefinition(Constants.Rngsubdiff, this);
					Rngsubopc = new ColumnDefinition(Constants.Rngsubopc, this);
					Rngsubtype = new ColumnDefinition(Constants.Rngsubtype, this);
					Rngtypid = new ColumnDefinition(Constants.Rngtypid, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Rngcanonical { get; private set; }
				public ColumnDefinition Rngcollation { get; private set; }
				public ColumnDefinition Rngmultitypid { get; private set; }
				public ColumnDefinition Rngsubdiff { get; private set; }
				public ColumnDefinition Rngsubopc { get; private set; }
				public ColumnDefinition Rngsubtype { get; private set; }
				public ColumnDefinition Rngtypid { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Rngcanonical, nameof(PgRange.Rngcanonical) },
					{Constants.Rngcollation, nameof(PgRange.Rngcollation) },
					{Constants.Rngmultitypid, nameof(PgRange.Rngmultitypid) },
					{Constants.Rngsubdiff, nameof(PgRange.Rngsubdiff) },
					{Constants.Rngsubopc, nameof(PgRange.Rngsubopc) },
					{Constants.Rngsubtype, nameof(PgRange.Rngsubtype) },
					{Constants.Rngtypid, nameof(PgRange.Rngtypid) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgRange), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}