//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgAvailableExtensionVersionMapper
		{
			static partial class Constants
			{
				public const string Comment = "comment";
				public const string Installed = "installed";
				public const string Name = "name";
				public const string Relocatable = "relocatable";
				public const string Require = "requires";
				public const string Schema = "schema";
				public const string Superuser = "superuser";
				public const string Trusted = "trusted";
				public const string Version = "version";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_available_extension_versions")
				{
					Comment = new ColumnDefinition(Constants.Comment, this);
					Installed = new ColumnDefinition(Constants.Installed, this);
					Name = new ColumnDefinition(Constants.Name, this);
					Relocatable = new ColumnDefinition(Constants.Relocatable, this);
					Require = new ColumnDefinition(Constants.Require, this);
					Schema = new ColumnDefinition(Constants.Schema, this);
					Superuser = new ColumnDefinition(Constants.Superuser, this);
					Trusted = new ColumnDefinition(Constants.Trusted, this);
					Version = new ColumnDefinition(Constants.Version, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Comment { get; private set; }
				public ColumnDefinition Installed { get; private set; }
				public ColumnDefinition Name { get; private set; }
				public ColumnDefinition Relocatable { get; private set; }
				public ColumnDefinition Require { get; private set; }
				public ColumnDefinition Schema { get; private set; }
				public ColumnDefinition Superuser { get; private set; }
				public ColumnDefinition Trusted { get; private set; }
				public ColumnDefinition Version { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Comment, nameof(PgAvailableExtensionVersion.Comment) },
					{Constants.Installed, nameof(PgAvailableExtensionVersion.Installed) },
					{Constants.Name, nameof(PgAvailableExtensionVersion.Name) },
					{Constants.Relocatable, nameof(PgAvailableExtensionVersion.Relocatable) },
					{Constants.Require, nameof(PgAvailableExtensionVersion.Require) },
					{Constants.Schema, nameof(PgAvailableExtensionVersion.Schema) },
					{Constants.Superuser, nameof(PgAvailableExtensionVersion.Superuser) },
					{Constants.Trusted, nameof(PgAvailableExtensionVersion.Trusted) },
					{Constants.Version, nameof(PgAvailableExtensionVersion.Version) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgAvailableExtensionVersion), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}