//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgStatActivityMapper
		{
			static partial class Constants
			{
				public const string ApplicationName = "application_name";
				public const string BackendStart = "backend_start";
				public const string BackendType = "backend_type";
				public const string BackendXid = "backend_xid";
				public const string BackendXmin = "backend_xmin";
				public const string ClientAddr = "client_addr";
				public const string ClientHostname = "client_hostname";
				public const string ClientPort = "client_port";
				public const string Datid = "datid";
				public const string Datname = "datname";
				public const string LeaderPid = "leader_pid";
				public const string Pid = "pid";
				public const string Query = "query";
				public const string QueryId = "query_id";
				public const string QueryStart = "query_start";
				public const string State = "state";
				public const string StateChange = "state_change";
				public const string Usename = "usename";
				public const string Usesysid = "usesysid";
				public const string WaitEvent = "wait_event";
				public const string WaitEventType = "wait_event_type";
				public const string XactStart = "xact_start";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_stat_activity")
				{
					ApplicationName = new ColumnDefinition(Constants.ApplicationName, this);
					BackendStart = new ColumnDefinition(Constants.BackendStart, this);
					BackendType = new ColumnDefinition(Constants.BackendType, this);
					BackendXid = new ColumnDefinition(Constants.BackendXid, this);
					BackendXmin = new ColumnDefinition(Constants.BackendXmin, this);
					ClientAddr = new ColumnDefinition(Constants.ClientAddr, this);
					ClientHostname = new ColumnDefinition(Constants.ClientHostname, this);
					ClientPort = new ColumnDefinition(Constants.ClientPort, this);
					Datid = new ColumnDefinition(Constants.Datid, this);
					Datname = new ColumnDefinition(Constants.Datname, this);
					LeaderPid = new ColumnDefinition(Constants.LeaderPid, this);
					Pid = new ColumnDefinition(Constants.Pid, this);
					Query = new ColumnDefinition(Constants.Query, this);
					QueryId = new ColumnDefinition(Constants.QueryId, this);
					QueryStart = new ColumnDefinition(Constants.QueryStart, this);
					State = new ColumnDefinition(Constants.State, this);
					StateChange = new ColumnDefinition(Constants.StateChange, this);
					Usename = new ColumnDefinition(Constants.Usename, this);
					Usesysid = new ColumnDefinition(Constants.Usesysid, this);
					WaitEvent = new ColumnDefinition(Constants.WaitEvent, this);
					WaitEventType = new ColumnDefinition(Constants.WaitEventType, this);
					XactStart = new ColumnDefinition(Constants.XactStart, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition ApplicationName { get; private set; }
				public ColumnDefinition BackendStart { get; private set; }
				public ColumnDefinition BackendType { get; private set; }
				public ColumnDefinition BackendXid { get; private set; }
				public ColumnDefinition BackendXmin { get; private set; }
				public ColumnDefinition ClientAddr { get; private set; }
				public ColumnDefinition ClientHostname { get; private set; }
				public ColumnDefinition ClientPort { get; private set; }
				public ColumnDefinition Datid { get; private set; }
				public ColumnDefinition Datname { get; private set; }
				public ColumnDefinition LeaderPid { get; private set; }
				public ColumnDefinition Pid { get; private set; }
				public ColumnDefinition Query { get; private set; }
				public ColumnDefinition QueryId { get; private set; }
				public ColumnDefinition QueryStart { get; private set; }
				public ColumnDefinition State { get; private set; }
				public ColumnDefinition StateChange { get; private set; }
				public ColumnDefinition Usename { get; private set; }
				public ColumnDefinition Usesysid { get; private set; }
				public ColumnDefinition WaitEvent { get; private set; }
				public ColumnDefinition WaitEventType { get; private set; }
				public ColumnDefinition XactStart { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.ApplicationName, nameof(PgStatActivity.ApplicationName) },
					{Constants.BackendStart, nameof(PgStatActivity.BackendStart) },
					{Constants.BackendType, nameof(PgStatActivity.BackendType) },
					{Constants.BackendXid, nameof(PgStatActivity.BackendXid) },
					{Constants.BackendXmin, nameof(PgStatActivity.BackendXmin) },
					{Constants.ClientAddr, nameof(PgStatActivity.ClientAddr) },
					{Constants.ClientHostname, nameof(PgStatActivity.ClientHostname) },
					{Constants.ClientPort, nameof(PgStatActivity.ClientPort) },
					{Constants.Datid, nameof(PgStatActivity.Datid) },
					{Constants.Datname, nameof(PgStatActivity.Datname) },
					{Constants.LeaderPid, nameof(PgStatActivity.LeaderPid) },
					{Constants.Pid, nameof(PgStatActivity.Pid) },
					{Constants.Query, nameof(PgStatActivity.Query) },
					{Constants.QueryId, nameof(PgStatActivity.QueryId) },
					{Constants.QueryStart, nameof(PgStatActivity.QueryStart) },
					{Constants.State, nameof(PgStatActivity.State) },
					{Constants.StateChange, nameof(PgStatActivity.StateChange) },
					{Constants.Usename, nameof(PgStatActivity.Usename) },
					{Constants.Usesysid, nameof(PgStatActivity.Usesysid) },
					{Constants.WaitEvent, nameof(PgStatActivity.WaitEvent) },
					{Constants.WaitEventType, nameof(PgStatActivity.WaitEventType) },
					{Constants.XactStart, nameof(PgStatActivity.XactStart) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgStatActivity), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}