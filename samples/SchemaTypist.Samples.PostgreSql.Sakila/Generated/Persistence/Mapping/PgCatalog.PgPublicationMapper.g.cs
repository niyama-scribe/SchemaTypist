//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgPublicationMapper
		{
			static partial class Constants
			{
				public const string Oid = "oid";
				public const string Puballtable = "puballtables";
				public const string Pubdelete = "pubdelete";
				public const string Pubinsert = "pubinsert";
				public const string Pubname = "pubname";
				public const string Pubowner = "pubowner";
				public const string Pubtruncate = "pubtruncate";
				public const string Pubupdate = "pubupdate";
				public const string Pubviaroot = "pubviaroot";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_publication")
				{
					Oid = new ColumnDefinition(Constants.Oid, this);
					Puballtable = new ColumnDefinition(Constants.Puballtable, this);
					Pubdelete = new ColumnDefinition(Constants.Pubdelete, this);
					Pubinsert = new ColumnDefinition(Constants.Pubinsert, this);
					Pubname = new ColumnDefinition(Constants.Pubname, this);
					Pubowner = new ColumnDefinition(Constants.Pubowner, this);
					Pubtruncate = new ColumnDefinition(Constants.Pubtruncate, this);
					Pubupdate = new ColumnDefinition(Constants.Pubupdate, this);
					Pubviaroot = new ColumnDefinition(Constants.Pubviaroot, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Oid { get; private set; }
				public ColumnDefinition Puballtable { get; private set; }
				public ColumnDefinition Pubdelete { get; private set; }
				public ColumnDefinition Pubinsert { get; private set; }
				public ColumnDefinition Pubname { get; private set; }
				public ColumnDefinition Pubowner { get; private set; }
				public ColumnDefinition Pubtruncate { get; private set; }
				public ColumnDefinition Pubupdate { get; private set; }
				public ColumnDefinition Pubviaroot { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Oid, nameof(PgPublication.Oid) },
					{Constants.Puballtable, nameof(PgPublication.Puballtable) },
					{Constants.Pubdelete, nameof(PgPublication.Pubdelete) },
					{Constants.Pubinsert, nameof(PgPublication.Pubinsert) },
					{Constants.Pubname, nameof(PgPublication.Pubname) },
					{Constants.Pubowner, nameof(PgPublication.Pubowner) },
					{Constants.Pubtruncate, nameof(PgPublication.Pubtruncate) },
					{Constants.Pubupdate, nameof(PgPublication.Pubupdate) },
					{Constants.Pubviaroot, nameof(PgPublication.Pubviaroot) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgPublication), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}