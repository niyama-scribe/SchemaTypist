//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgRewriteMapper
		{
			static partial class Constants
			{
				public const string EvAction = "ev_action";
				public const string EvClass = "ev_class";
				public const string EvEnabled = "ev_enabled";
				public const string EvQual = "ev_qual";
				public const string EvType = "ev_type";
				public const string IsInstead = "is_instead";
				public const string Oid = "oid";
				public const string Rulename = "rulename";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_rewrite")
				{
					EvAction = new ColumnDefinition(Constants.EvAction, this);
					EvClass = new ColumnDefinition(Constants.EvClass, this);
					EvEnabled = new ColumnDefinition(Constants.EvEnabled, this);
					EvQual = new ColumnDefinition(Constants.EvQual, this);
					EvType = new ColumnDefinition(Constants.EvType, this);
					IsInstead = new ColumnDefinition(Constants.IsInstead, this);
					Oid = new ColumnDefinition(Constants.Oid, this);
					Rulename = new ColumnDefinition(Constants.Rulename, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition EvAction { get; private set; }
				public ColumnDefinition EvClass { get; private set; }
				public ColumnDefinition EvEnabled { get; private set; }
				public ColumnDefinition EvQual { get; private set; }
				public ColumnDefinition EvType { get; private set; }
				public ColumnDefinition IsInstead { get; private set; }
				public ColumnDefinition Oid { get; private set; }
				public ColumnDefinition Rulename { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.EvAction, nameof(PgRewrite.EvAction) },
					{Constants.EvClass, nameof(PgRewrite.EvClass) },
					{Constants.EvEnabled, nameof(PgRewrite.EvEnabled) },
					{Constants.EvQual, nameof(PgRewrite.EvQual) },
					{Constants.EvType, nameof(PgRewrite.EvType) },
					{Constants.IsInstead, nameof(PgRewrite.IsInstead) },
					{Constants.Oid, nameof(PgRewrite.Oid) },
					{Constants.Rulename, nameof(PgRewrite.Rulename) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgRewrite), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}