//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgTypeMapper
		{
			static partial class Constants
			{
				public const string Oid = "oid";
				public const string Typacl = "typacl";
				public const string Typalign = "typalign";
				public const string Typanalyze = "typanalyze";
				public const string Typarray = "typarray";
				public const string Typbasetype = "typbasetype";
				public const string Typbyval = "typbyval";
				public const string Typcategory = "typcategory";
				public const string Typcollation = "typcollation";
				public const string Typdefault = "typdefault";
				public const string Typdefaultbin = "typdefaultbin";
				public const string Typdelim = "typdelim";
				public const string Typelem = "typelem";
				public const string Typinput = "typinput";
				public const string Typisdefined = "typisdefined";
				public const string Typispreferred = "typispreferred";
				public const string Typlen = "typlen";
				public const string Typmodin = "typmodin";
				public const string Typmodout = "typmodout";
				public const string Typname = "typname";
				public const string Typnamespace = "typnamespace";
				public const string Typndim = "typndims";
				public const string Typnotnull = "typnotnull";
				public const string Typoutput = "typoutput";
				public const string Typowner = "typowner";
				public const string Typreceive = "typreceive";
				public const string Typrelid = "typrelid";
				public const string Typsend = "typsend";
				public const string Typstorage = "typstorage";
				public const string Typsubscript = "typsubscript";
				public const string Typtype = "typtype";
				public const string Typtypmod = "typtypmod";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_type")
				{
					Oid = new ColumnDefinition(Constants.Oid, this);
					Typacl = new ColumnDefinition(Constants.Typacl, this);
					Typalign = new ColumnDefinition(Constants.Typalign, this);
					Typanalyze = new ColumnDefinition(Constants.Typanalyze, this);
					Typarray = new ColumnDefinition(Constants.Typarray, this);
					Typbasetype = new ColumnDefinition(Constants.Typbasetype, this);
					Typbyval = new ColumnDefinition(Constants.Typbyval, this);
					Typcategory = new ColumnDefinition(Constants.Typcategory, this);
					Typcollation = new ColumnDefinition(Constants.Typcollation, this);
					Typdefault = new ColumnDefinition(Constants.Typdefault, this);
					Typdefaultbin = new ColumnDefinition(Constants.Typdefaultbin, this);
					Typdelim = new ColumnDefinition(Constants.Typdelim, this);
					Typelem = new ColumnDefinition(Constants.Typelem, this);
					Typinput = new ColumnDefinition(Constants.Typinput, this);
					Typisdefined = new ColumnDefinition(Constants.Typisdefined, this);
					Typispreferred = new ColumnDefinition(Constants.Typispreferred, this);
					Typlen = new ColumnDefinition(Constants.Typlen, this);
					Typmodin = new ColumnDefinition(Constants.Typmodin, this);
					Typmodout = new ColumnDefinition(Constants.Typmodout, this);
					Typname = new ColumnDefinition(Constants.Typname, this);
					Typnamespace = new ColumnDefinition(Constants.Typnamespace, this);
					Typndim = new ColumnDefinition(Constants.Typndim, this);
					Typnotnull = new ColumnDefinition(Constants.Typnotnull, this);
					Typoutput = new ColumnDefinition(Constants.Typoutput, this);
					Typowner = new ColumnDefinition(Constants.Typowner, this);
					Typreceive = new ColumnDefinition(Constants.Typreceive, this);
					Typrelid = new ColumnDefinition(Constants.Typrelid, this);
					Typsend = new ColumnDefinition(Constants.Typsend, this);
					Typstorage = new ColumnDefinition(Constants.Typstorage, this);
					Typsubscript = new ColumnDefinition(Constants.Typsubscript, this);
					Typtype = new ColumnDefinition(Constants.Typtype, this);
					Typtypmod = new ColumnDefinition(Constants.Typtypmod, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Oid { get; private set; }
				public ColumnDefinition Typacl { get; private set; }
				public ColumnDefinition Typalign { get; private set; }
				public ColumnDefinition Typanalyze { get; private set; }
				public ColumnDefinition Typarray { get; private set; }
				public ColumnDefinition Typbasetype { get; private set; }
				public ColumnDefinition Typbyval { get; private set; }
				public ColumnDefinition Typcategory { get; private set; }
				public ColumnDefinition Typcollation { get; private set; }
				public ColumnDefinition Typdefault { get; private set; }
				public ColumnDefinition Typdefaultbin { get; private set; }
				public ColumnDefinition Typdelim { get; private set; }
				public ColumnDefinition Typelem { get; private set; }
				public ColumnDefinition Typinput { get; private set; }
				public ColumnDefinition Typisdefined { get; private set; }
				public ColumnDefinition Typispreferred { get; private set; }
				public ColumnDefinition Typlen { get; private set; }
				public ColumnDefinition Typmodin { get; private set; }
				public ColumnDefinition Typmodout { get; private set; }
				public ColumnDefinition Typname { get; private set; }
				public ColumnDefinition Typnamespace { get; private set; }
				public ColumnDefinition Typndim { get; private set; }
				public ColumnDefinition Typnotnull { get; private set; }
				public ColumnDefinition Typoutput { get; private set; }
				public ColumnDefinition Typowner { get; private set; }
				public ColumnDefinition Typreceive { get; private set; }
				public ColumnDefinition Typrelid { get; private set; }
				public ColumnDefinition Typsend { get; private set; }
				public ColumnDefinition Typstorage { get; private set; }
				public ColumnDefinition Typsubscript { get; private set; }
				public ColumnDefinition Typtype { get; private set; }
				public ColumnDefinition Typtypmod { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Oid, nameof(PgType.Oid) },
					{Constants.Typacl, nameof(PgType.Typacl) },
					{Constants.Typalign, nameof(PgType.Typalign) },
					{Constants.Typanalyze, nameof(PgType.Typanalyze) },
					{Constants.Typarray, nameof(PgType.Typarray) },
					{Constants.Typbasetype, nameof(PgType.Typbasetype) },
					{Constants.Typbyval, nameof(PgType.Typbyval) },
					{Constants.Typcategory, nameof(PgType.Typcategory) },
					{Constants.Typcollation, nameof(PgType.Typcollation) },
					{Constants.Typdefault, nameof(PgType.Typdefault) },
					{Constants.Typdefaultbin, nameof(PgType.Typdefaultbin) },
					{Constants.Typdelim, nameof(PgType.Typdelim) },
					{Constants.Typelem, nameof(PgType.Typelem) },
					{Constants.Typinput, nameof(PgType.Typinput) },
					{Constants.Typisdefined, nameof(PgType.Typisdefined) },
					{Constants.Typispreferred, nameof(PgType.Typispreferred) },
					{Constants.Typlen, nameof(PgType.Typlen) },
					{Constants.Typmodin, nameof(PgType.Typmodin) },
					{Constants.Typmodout, nameof(PgType.Typmodout) },
					{Constants.Typname, nameof(PgType.Typname) },
					{Constants.Typnamespace, nameof(PgType.Typnamespace) },
					{Constants.Typndim, nameof(PgType.Typndim) },
					{Constants.Typnotnull, nameof(PgType.Typnotnull) },
					{Constants.Typoutput, nameof(PgType.Typoutput) },
					{Constants.Typowner, nameof(PgType.Typowner) },
					{Constants.Typreceive, nameof(PgType.Typreceive) },
					{Constants.Typrelid, nameof(PgType.Typrelid) },
					{Constants.Typsend, nameof(PgType.Typsend) },
					{Constants.Typstorage, nameof(PgType.Typstorage) },
					{Constants.Typsubscript, nameof(PgType.Typsubscript) },
					{Constants.Typtype, nameof(PgType.Typtype) },
					{Constants.Typtypmod, nameof(PgType.Typtypmod) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgType), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}