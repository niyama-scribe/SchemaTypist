//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgProcMapper
		{
			static partial class Constants
			{
				public const string Oid = "oid";
				public const string Proacl = "proacl";
				public const string Proallargtype = "proallargtypes";
				public const string Proargdefault = "proargdefaults";
				public const string Proargmode = "proargmodes";
				public const string Proargname = "proargnames";
				public const string Proargtype = "proargtypes";
				public const string Probin = "probin";
				public const string Proconfig = "proconfig";
				public const string Procost = "procost";
				public const string Proisstrict = "proisstrict";
				public const string Prokind = "prokind";
				public const string Prolang = "prolang";
				public const string Proleakproof = "proleakproof";
				public const string Proname = "proname";
				public const string Pronamespace = "pronamespace";
				public const string Pronargdefault = "pronargdefaults";
				public const string Pronarg = "pronargs";
				public const string Proowner = "proowner";
				public const string Proparallel = "proparallel";
				public const string Proretset = "proretset";
				public const string Prorettype = "prorettype";
				public const string Prorow = "prorows";
				public const string Prosecdef = "prosecdef";
				public const string Prosqlbody = "prosqlbody";
				public const string Prosrc = "prosrc";
				public const string Prosupport = "prosupport";
				public const string Protrftype = "protrftypes";
				public const string Provariadic = "provariadic";
				public const string Provolatile = "provolatile";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_proc")
				{
					Oid = new ColumnDefinition(Constants.Oid, this);
					Proacl = new ColumnDefinition(Constants.Proacl, this);
					Proallargtype = new ColumnDefinition(Constants.Proallargtype, this);
					Proargdefault = new ColumnDefinition(Constants.Proargdefault, this);
					Proargmode = new ColumnDefinition(Constants.Proargmode, this);
					Proargname = new ColumnDefinition(Constants.Proargname, this);
					Proargtype = new ColumnDefinition(Constants.Proargtype, this);
					Probin = new ColumnDefinition(Constants.Probin, this);
					Proconfig = new ColumnDefinition(Constants.Proconfig, this);
					Procost = new ColumnDefinition(Constants.Procost, this);
					Proisstrict = new ColumnDefinition(Constants.Proisstrict, this);
					Prokind = new ColumnDefinition(Constants.Prokind, this);
					Prolang = new ColumnDefinition(Constants.Prolang, this);
					Proleakproof = new ColumnDefinition(Constants.Proleakproof, this);
					Proname = new ColumnDefinition(Constants.Proname, this);
					Pronamespace = new ColumnDefinition(Constants.Pronamespace, this);
					Pronargdefault = new ColumnDefinition(Constants.Pronargdefault, this);
					Pronarg = new ColumnDefinition(Constants.Pronarg, this);
					Proowner = new ColumnDefinition(Constants.Proowner, this);
					Proparallel = new ColumnDefinition(Constants.Proparallel, this);
					Proretset = new ColumnDefinition(Constants.Proretset, this);
					Prorettype = new ColumnDefinition(Constants.Prorettype, this);
					Prorow = new ColumnDefinition(Constants.Prorow, this);
					Prosecdef = new ColumnDefinition(Constants.Prosecdef, this);
					Prosqlbody = new ColumnDefinition(Constants.Prosqlbody, this);
					Prosrc = new ColumnDefinition(Constants.Prosrc, this);
					Prosupport = new ColumnDefinition(Constants.Prosupport, this);
					Protrftype = new ColumnDefinition(Constants.Protrftype, this);
					Provariadic = new ColumnDefinition(Constants.Provariadic, this);
					Provolatile = new ColumnDefinition(Constants.Provolatile, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Oid { get; private set; }
				public ColumnDefinition Proacl { get; private set; }
				public ColumnDefinition Proallargtype { get; private set; }
				public ColumnDefinition Proargdefault { get; private set; }
				public ColumnDefinition Proargmode { get; private set; }
				public ColumnDefinition Proargname { get; private set; }
				public ColumnDefinition Proargtype { get; private set; }
				public ColumnDefinition Probin { get; private set; }
				public ColumnDefinition Proconfig { get; private set; }
				public ColumnDefinition Procost { get; private set; }
				public ColumnDefinition Proisstrict { get; private set; }
				public ColumnDefinition Prokind { get; private set; }
				public ColumnDefinition Prolang { get; private set; }
				public ColumnDefinition Proleakproof { get; private set; }
				public ColumnDefinition Proname { get; private set; }
				public ColumnDefinition Pronamespace { get; private set; }
				public ColumnDefinition Pronargdefault { get; private set; }
				public ColumnDefinition Pronarg { get; private set; }
				public ColumnDefinition Proowner { get; private set; }
				public ColumnDefinition Proparallel { get; private set; }
				public ColumnDefinition Proretset { get; private set; }
				public ColumnDefinition Prorettype { get; private set; }
				public ColumnDefinition Prorow { get; private set; }
				public ColumnDefinition Prosecdef { get; private set; }
				public ColumnDefinition Prosqlbody { get; private set; }
				public ColumnDefinition Prosrc { get; private set; }
				public ColumnDefinition Prosupport { get; private set; }
				public ColumnDefinition Protrftype { get; private set; }
				public ColumnDefinition Provariadic { get; private set; }
				public ColumnDefinition Provolatile { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Oid, nameof(PgProc.Oid) },
					{Constants.Proacl, nameof(PgProc.Proacl) },
					{Constants.Proallargtype, nameof(PgProc.Proallargtype) },
					{Constants.Proargdefault, nameof(PgProc.Proargdefault) },
					{Constants.Proargmode, nameof(PgProc.Proargmode) },
					{Constants.Proargname, nameof(PgProc.Proargname) },
					{Constants.Proargtype, nameof(PgProc.Proargtype) },
					{Constants.Probin, nameof(PgProc.Probin) },
					{Constants.Proconfig, nameof(PgProc.Proconfig) },
					{Constants.Procost, nameof(PgProc.Procost) },
					{Constants.Proisstrict, nameof(PgProc.Proisstrict) },
					{Constants.Prokind, nameof(PgProc.Prokind) },
					{Constants.Prolang, nameof(PgProc.Prolang) },
					{Constants.Proleakproof, nameof(PgProc.Proleakproof) },
					{Constants.Proname, nameof(PgProc.Proname) },
					{Constants.Pronamespace, nameof(PgProc.Pronamespace) },
					{Constants.Pronargdefault, nameof(PgProc.Pronargdefault) },
					{Constants.Pronarg, nameof(PgProc.Pronarg) },
					{Constants.Proowner, nameof(PgProc.Proowner) },
					{Constants.Proparallel, nameof(PgProc.Proparallel) },
					{Constants.Proretset, nameof(PgProc.Proretset) },
					{Constants.Prorettype, nameof(PgProc.Prorettype) },
					{Constants.Prorow, nameof(PgProc.Prorow) },
					{Constants.Prosecdef, nameof(PgProc.Prosecdef) },
					{Constants.Prosqlbody, nameof(PgProc.Prosqlbody) },
					{Constants.Prosrc, nameof(PgProc.Prosrc) },
					{Constants.Prosupport, nameof(PgProc.Prosupport) },
					{Constants.Protrftype, nameof(PgProc.Protrftype) },
					{Constants.Provariadic, nameof(PgProc.Provariadic) },
					{Constants.Provolatile, nameof(PgProc.Provolatile) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgProc), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}