//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgStatProgressCreateIndexMapper
		{
			static partial class Constants
			{
				public const string BlocksDone = "blocks_done";
				public const string BlocksTotal = "blocks_total";
				public const string Command = "command";
				public const string CurrentLockerPid = "current_locker_pid";
				public const string Datid = "datid";
				public const string Datname = "datname";
				public const string IndexRelid = "index_relid";
				public const string LockersDone = "lockers_done";
				public const string LockersTotal = "lockers_total";
				public const string PartitionsDone = "partitions_done";
				public const string PartitionsTotal = "partitions_total";
				public const string Phase = "phase";
				public const string Pid = "pid";
				public const string Relid = "relid";
				public const string TuplesDone = "tuples_done";
				public const string TuplesTotal = "tuples_total";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_stat_progress_create_index")
				{
					BlocksDone = new ColumnDefinition(Constants.BlocksDone, this);
					BlocksTotal = new ColumnDefinition(Constants.BlocksTotal, this);
					Command = new ColumnDefinition(Constants.Command, this);
					CurrentLockerPid = new ColumnDefinition(Constants.CurrentLockerPid, this);
					Datid = new ColumnDefinition(Constants.Datid, this);
					Datname = new ColumnDefinition(Constants.Datname, this);
					IndexRelid = new ColumnDefinition(Constants.IndexRelid, this);
					LockersDone = new ColumnDefinition(Constants.LockersDone, this);
					LockersTotal = new ColumnDefinition(Constants.LockersTotal, this);
					PartitionsDone = new ColumnDefinition(Constants.PartitionsDone, this);
					PartitionsTotal = new ColumnDefinition(Constants.PartitionsTotal, this);
					Phase = new ColumnDefinition(Constants.Phase, this);
					Pid = new ColumnDefinition(Constants.Pid, this);
					Relid = new ColumnDefinition(Constants.Relid, this);
					TuplesDone = new ColumnDefinition(Constants.TuplesDone, this);
					TuplesTotal = new ColumnDefinition(Constants.TuplesTotal, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition BlocksDone { get; private set; }
				public ColumnDefinition BlocksTotal { get; private set; }
				public ColumnDefinition Command { get; private set; }
				public ColumnDefinition CurrentLockerPid { get; private set; }
				public ColumnDefinition Datid { get; private set; }
				public ColumnDefinition Datname { get; private set; }
				public ColumnDefinition IndexRelid { get; private set; }
				public ColumnDefinition LockersDone { get; private set; }
				public ColumnDefinition LockersTotal { get; private set; }
				public ColumnDefinition PartitionsDone { get; private set; }
				public ColumnDefinition PartitionsTotal { get; private set; }
				public ColumnDefinition Phase { get; private set; }
				public ColumnDefinition Pid { get; private set; }
				public ColumnDefinition Relid { get; private set; }
				public ColumnDefinition TuplesDone { get; private set; }
				public ColumnDefinition TuplesTotal { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.BlocksDone, nameof(PgStatProgressCreateIndex.BlocksDone) },
					{Constants.BlocksTotal, nameof(PgStatProgressCreateIndex.BlocksTotal) },
					{Constants.Command, nameof(PgStatProgressCreateIndex.Command) },
					{Constants.CurrentLockerPid, nameof(PgStatProgressCreateIndex.CurrentLockerPid) },
					{Constants.Datid, nameof(PgStatProgressCreateIndex.Datid) },
					{Constants.Datname, nameof(PgStatProgressCreateIndex.Datname) },
					{Constants.IndexRelid, nameof(PgStatProgressCreateIndex.IndexRelid) },
					{Constants.LockersDone, nameof(PgStatProgressCreateIndex.LockersDone) },
					{Constants.LockersTotal, nameof(PgStatProgressCreateIndex.LockersTotal) },
					{Constants.PartitionsDone, nameof(PgStatProgressCreateIndex.PartitionsDone) },
					{Constants.PartitionsTotal, nameof(PgStatProgressCreateIndex.PartitionsTotal) },
					{Constants.Phase, nameof(PgStatProgressCreateIndex.Phase) },
					{Constants.Pid, nameof(PgStatProgressCreateIndex.Pid) },
					{Constants.Relid, nameof(PgStatProgressCreateIndex.Relid) },
					{Constants.TuplesDone, nameof(PgStatProgressCreateIndex.TuplesDone) },
					{Constants.TuplesTotal, nameof(PgStatProgressCreateIndex.TuplesTotal) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgStatProgressCreateIndex), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}