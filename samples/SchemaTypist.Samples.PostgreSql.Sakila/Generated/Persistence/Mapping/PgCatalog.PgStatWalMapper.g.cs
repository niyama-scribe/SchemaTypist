//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgStatWalMapper
		{
			static partial class Constants
			{
				public const string StatsReset = "stats_reset";
				public const string WalBuffersFull = "wal_buffers_full";
				public const string WalByte = "wal_bytes";
				public const string WalFpi = "wal_fpi";
				public const string WalRecord = "wal_records";
				public const string WalSync = "wal_sync";
				public const string WalSyncTime = "wal_sync_time";
				public const string WalWrite = "wal_write";
				public const string WalWriteTime = "wal_write_time";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_stat_wal")
				{
					StatsReset = new ColumnDefinition(Constants.StatsReset, this);
					WalBuffersFull = new ColumnDefinition(Constants.WalBuffersFull, this);
					WalByte = new ColumnDefinition(Constants.WalByte, this);
					WalFpi = new ColumnDefinition(Constants.WalFpi, this);
					WalRecord = new ColumnDefinition(Constants.WalRecord, this);
					WalSync = new ColumnDefinition(Constants.WalSync, this);
					WalSyncTime = new ColumnDefinition(Constants.WalSyncTime, this);
					WalWrite = new ColumnDefinition(Constants.WalWrite, this);
					WalWriteTime = new ColumnDefinition(Constants.WalWriteTime, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition StatsReset { get; private set; }
				public ColumnDefinition WalBuffersFull { get; private set; }
				public ColumnDefinition WalByte { get; private set; }
				public ColumnDefinition WalFpi { get; private set; }
				public ColumnDefinition WalRecord { get; private set; }
				public ColumnDefinition WalSync { get; private set; }
				public ColumnDefinition WalSyncTime { get; private set; }
				public ColumnDefinition WalWrite { get; private set; }
				public ColumnDefinition WalWriteTime { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.StatsReset, nameof(PgStatWal.StatsReset) },
					{Constants.WalBuffersFull, nameof(PgStatWal.WalBuffersFull) },
					{Constants.WalByte, nameof(PgStatWal.WalByte) },
					{Constants.WalFpi, nameof(PgStatWal.WalFpi) },
					{Constants.WalRecord, nameof(PgStatWal.WalRecord) },
					{Constants.WalSync, nameof(PgStatWal.WalSync) },
					{Constants.WalSyncTime, nameof(PgStatWal.WalSyncTime) },
					{Constants.WalWrite, nameof(PgStatWal.WalWrite) },
					{Constants.WalWriteTime, nameof(PgStatWal.WalWriteTime) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgStatWal), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}