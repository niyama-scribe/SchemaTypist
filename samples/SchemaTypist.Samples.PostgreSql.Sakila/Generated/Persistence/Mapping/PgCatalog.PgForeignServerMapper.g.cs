//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgForeignServerMapper
		{
			static partial class Constants
			{
				public const string Oid = "oid";
				public const string Srvacl = "srvacl";
				public const string Srvfdw = "srvfdw";
				public const string Srvname = "srvname";
				public const string Srvoption = "srvoptions";
				public const string Srvowner = "srvowner";
				public const string Srvtype = "srvtype";
				public const string Srvversion = "srvversion";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_foreign_server")
				{
					Oid = new ColumnDefinition(Constants.Oid, this);
					Srvacl = new ColumnDefinition(Constants.Srvacl, this);
					Srvfdw = new ColumnDefinition(Constants.Srvfdw, this);
					Srvname = new ColumnDefinition(Constants.Srvname, this);
					Srvoption = new ColumnDefinition(Constants.Srvoption, this);
					Srvowner = new ColumnDefinition(Constants.Srvowner, this);
					Srvtype = new ColumnDefinition(Constants.Srvtype, this);
					Srvversion = new ColumnDefinition(Constants.Srvversion, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Oid { get; private set; }
				public ColumnDefinition Srvacl { get; private set; }
				public ColumnDefinition Srvfdw { get; private set; }
				public ColumnDefinition Srvname { get; private set; }
				public ColumnDefinition Srvoption { get; private set; }
				public ColumnDefinition Srvowner { get; private set; }
				public ColumnDefinition Srvtype { get; private set; }
				public ColumnDefinition Srvversion { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Oid, nameof(PgForeignServer.Oid) },
					{Constants.Srvacl, nameof(PgForeignServer.Srvacl) },
					{Constants.Srvfdw, nameof(PgForeignServer.Srvfdw) },
					{Constants.Srvname, nameof(PgForeignServer.Srvname) },
					{Constants.Srvoption, nameof(PgForeignServer.Srvoption) },
					{Constants.Srvowner, nameof(PgForeignServer.Srvowner) },
					{Constants.Srvtype, nameof(PgForeignServer.Srvtype) },
					{Constants.Srvversion, nameof(PgForeignServer.Srvversion) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgForeignServer), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}