//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class InformationSchema
	{
		public static partial class TransformMapper
		{
			static partial class Constants
			{
				public const string GroupName = "group_name";
				public const string SpecificCatalog = "specific_catalog";
				public const string SpecificName = "specific_name";
				public const string SpecificSchema = "specific_schema";
				public const string TransformType = "transform_type";
				public const string UdtCatalog = "udt_catalog";
				public const string UdtName = "udt_name";
				public const string UdtSchema = "udt_schema";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("information_schema.transforms")
				{
					GroupName = new ColumnDefinition(Constants.GroupName, this);
					SpecificCatalog = new ColumnDefinition(Constants.SpecificCatalog, this);
					SpecificName = new ColumnDefinition(Constants.SpecificName, this);
					SpecificSchema = new ColumnDefinition(Constants.SpecificSchema, this);
					TransformType = new ColumnDefinition(Constants.TransformType, this);
					UdtCatalog = new ColumnDefinition(Constants.UdtCatalog, this);
					UdtName = new ColumnDefinition(Constants.UdtName, this);
					UdtSchema = new ColumnDefinition(Constants.UdtSchema, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition GroupName { get; private set; }
				public ColumnDefinition SpecificCatalog { get; private set; }
				public ColumnDefinition SpecificName { get; private set; }
				public ColumnDefinition SpecificSchema { get; private set; }
				public ColumnDefinition TransformType { get; private set; }
				public ColumnDefinition UdtCatalog { get; private set; }
				public ColumnDefinition UdtName { get; private set; }
				public ColumnDefinition UdtSchema { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.GroupName, nameof(Transform.GroupName) },
					{Constants.SpecificCatalog, nameof(Transform.SpecificCatalog) },
					{Constants.SpecificName, nameof(Transform.SpecificName) },
					{Constants.SpecificSchema, nameof(Transform.SpecificSchema) },
					{Constants.TransformType, nameof(Transform.TransformType) },
					{Constants.UdtCatalog, nameof(Transform.UdtCatalog) },
					{Constants.UdtName, nameof(Transform.UdtName) },
					{Constants.UdtSchema, nameof(Transform.UdtSchema) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(Transform), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}