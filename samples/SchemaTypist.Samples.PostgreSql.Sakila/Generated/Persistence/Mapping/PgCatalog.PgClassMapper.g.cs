//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgClassMapper
		{
			static partial class Constants
			{
				public const string Oid = "oid";
				public const string Relacl = "relacl";
				public const string Relallvisible = "relallvisible";
				public const string Relam = "relam";
				public const string Relcheck = "relchecks";
				public const string Relfilenode = "relfilenode";
				public const string Relforcerowsecurity = "relforcerowsecurity";
				public const string Relfrozenxid = "relfrozenxid";
				public const string Relhasindex = "relhasindex";
				public const string Relhasrule = "relhasrules";
				public const string Relhassubclass = "relhassubclass";
				public const string Relhastrigger = "relhastriggers";
				public const string Relispartition = "relispartition";
				public const string Relispopulated = "relispopulated";
				public const string Relisshared = "relisshared";
				public const string Relkind = "relkind";
				public const string Relminmxid = "relminmxid";
				public const string Relname = "relname";
				public const string Relnamespace = "relnamespace";
				public const string Relnatt = "relnatts";
				public const string Reloftype = "reloftype";
				public const string Reloption = "reloptions";
				public const string Relowner = "relowner";
				public const string Relpage = "relpages";
				public const string Relpartbound = "relpartbound";
				public const string Relpersistence = "relpersistence";
				public const string Relreplident = "relreplident";
				public const string Relrewrite = "relrewrite";
				public const string Relrowsecurity = "relrowsecurity";
				public const string Reltablespace = "reltablespace";
				public const string Reltoastrelid = "reltoastrelid";
				public const string Reltuple = "reltuples";
				public const string Reltype = "reltype";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_class")
				{
					Oid = new ColumnDefinition(Constants.Oid, this);
					Relacl = new ColumnDefinition(Constants.Relacl, this);
					Relallvisible = new ColumnDefinition(Constants.Relallvisible, this);
					Relam = new ColumnDefinition(Constants.Relam, this);
					Relcheck = new ColumnDefinition(Constants.Relcheck, this);
					Relfilenode = new ColumnDefinition(Constants.Relfilenode, this);
					Relforcerowsecurity = new ColumnDefinition(Constants.Relforcerowsecurity, this);
					Relfrozenxid = new ColumnDefinition(Constants.Relfrozenxid, this);
					Relhasindex = new ColumnDefinition(Constants.Relhasindex, this);
					Relhasrule = new ColumnDefinition(Constants.Relhasrule, this);
					Relhassubclass = new ColumnDefinition(Constants.Relhassubclass, this);
					Relhastrigger = new ColumnDefinition(Constants.Relhastrigger, this);
					Relispartition = new ColumnDefinition(Constants.Relispartition, this);
					Relispopulated = new ColumnDefinition(Constants.Relispopulated, this);
					Relisshared = new ColumnDefinition(Constants.Relisshared, this);
					Relkind = new ColumnDefinition(Constants.Relkind, this);
					Relminmxid = new ColumnDefinition(Constants.Relminmxid, this);
					Relname = new ColumnDefinition(Constants.Relname, this);
					Relnamespace = new ColumnDefinition(Constants.Relnamespace, this);
					Relnatt = new ColumnDefinition(Constants.Relnatt, this);
					Reloftype = new ColumnDefinition(Constants.Reloftype, this);
					Reloption = new ColumnDefinition(Constants.Reloption, this);
					Relowner = new ColumnDefinition(Constants.Relowner, this);
					Relpage = new ColumnDefinition(Constants.Relpage, this);
					Relpartbound = new ColumnDefinition(Constants.Relpartbound, this);
					Relpersistence = new ColumnDefinition(Constants.Relpersistence, this);
					Relreplident = new ColumnDefinition(Constants.Relreplident, this);
					Relrewrite = new ColumnDefinition(Constants.Relrewrite, this);
					Relrowsecurity = new ColumnDefinition(Constants.Relrowsecurity, this);
					Reltablespace = new ColumnDefinition(Constants.Reltablespace, this);
					Reltoastrelid = new ColumnDefinition(Constants.Reltoastrelid, this);
					Reltuple = new ColumnDefinition(Constants.Reltuple, this);
					Reltype = new ColumnDefinition(Constants.Reltype, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Oid { get; private set; }
				public ColumnDefinition Relacl { get; private set; }
				public ColumnDefinition Relallvisible { get; private set; }
				public ColumnDefinition Relam { get; private set; }
				public ColumnDefinition Relcheck { get; private set; }
				public ColumnDefinition Relfilenode { get; private set; }
				public ColumnDefinition Relforcerowsecurity { get; private set; }
				public ColumnDefinition Relfrozenxid { get; private set; }
				public ColumnDefinition Relhasindex { get; private set; }
				public ColumnDefinition Relhasrule { get; private set; }
				public ColumnDefinition Relhassubclass { get; private set; }
				public ColumnDefinition Relhastrigger { get; private set; }
				public ColumnDefinition Relispartition { get; private set; }
				public ColumnDefinition Relispopulated { get; private set; }
				public ColumnDefinition Relisshared { get; private set; }
				public ColumnDefinition Relkind { get; private set; }
				public ColumnDefinition Relminmxid { get; private set; }
				public ColumnDefinition Relname { get; private set; }
				public ColumnDefinition Relnamespace { get; private set; }
				public ColumnDefinition Relnatt { get; private set; }
				public ColumnDefinition Reloftype { get; private set; }
				public ColumnDefinition Reloption { get; private set; }
				public ColumnDefinition Relowner { get; private set; }
				public ColumnDefinition Relpage { get; private set; }
				public ColumnDefinition Relpartbound { get; private set; }
				public ColumnDefinition Relpersistence { get; private set; }
				public ColumnDefinition Relreplident { get; private set; }
				public ColumnDefinition Relrewrite { get; private set; }
				public ColumnDefinition Relrowsecurity { get; private set; }
				public ColumnDefinition Reltablespace { get; private set; }
				public ColumnDefinition Reltoastrelid { get; private set; }
				public ColumnDefinition Reltuple { get; private set; }
				public ColumnDefinition Reltype { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Oid, nameof(PgClass.Oid) },
					{Constants.Relacl, nameof(PgClass.Relacl) },
					{Constants.Relallvisible, nameof(PgClass.Relallvisible) },
					{Constants.Relam, nameof(PgClass.Relam) },
					{Constants.Relcheck, nameof(PgClass.Relcheck) },
					{Constants.Relfilenode, nameof(PgClass.Relfilenode) },
					{Constants.Relforcerowsecurity, nameof(PgClass.Relforcerowsecurity) },
					{Constants.Relfrozenxid, nameof(PgClass.Relfrozenxid) },
					{Constants.Relhasindex, nameof(PgClass.Relhasindex) },
					{Constants.Relhasrule, nameof(PgClass.Relhasrule) },
					{Constants.Relhassubclass, nameof(PgClass.Relhassubclass) },
					{Constants.Relhastrigger, nameof(PgClass.Relhastrigger) },
					{Constants.Relispartition, nameof(PgClass.Relispartition) },
					{Constants.Relispopulated, nameof(PgClass.Relispopulated) },
					{Constants.Relisshared, nameof(PgClass.Relisshared) },
					{Constants.Relkind, nameof(PgClass.Relkind) },
					{Constants.Relminmxid, nameof(PgClass.Relminmxid) },
					{Constants.Relname, nameof(PgClass.Relname) },
					{Constants.Relnamespace, nameof(PgClass.Relnamespace) },
					{Constants.Relnatt, nameof(PgClass.Relnatt) },
					{Constants.Reloftype, nameof(PgClass.Reloftype) },
					{Constants.Reloption, nameof(PgClass.Reloption) },
					{Constants.Relowner, nameof(PgClass.Relowner) },
					{Constants.Relpage, nameof(PgClass.Relpage) },
					{Constants.Relpartbound, nameof(PgClass.Relpartbound) },
					{Constants.Relpersistence, nameof(PgClass.Relpersistence) },
					{Constants.Relreplident, nameof(PgClass.Relreplident) },
					{Constants.Relrewrite, nameof(PgClass.Relrewrite) },
					{Constants.Relrowsecurity, nameof(PgClass.Relrowsecurity) },
					{Constants.Reltablespace, nameof(PgClass.Reltablespace) },
					{Constants.Reltoastrelid, nameof(PgClass.Reltoastrelid) },
					{Constants.Reltuple, nameof(PgClass.Reltuple) },
					{Constants.Reltype, nameof(PgClass.Reltype) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgClass), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}