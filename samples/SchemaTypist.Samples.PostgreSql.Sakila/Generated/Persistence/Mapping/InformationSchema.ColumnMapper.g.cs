//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class InformationSchema
	{
		public static partial class ColumnMapper
		{
			static partial class Constants
			{
				public const string CharacterMaximumLength = "character_maximum_length";
				public const string CharacterOctetLength = "character_octet_length";
				public const string CharacterSetCatalog = "character_set_catalog";
				public const string CharacterSetName = "character_set_name";
				public const string CharacterSetSchema = "character_set_schema";
				public const string CollationCatalog = "collation_catalog";
				public const string CollationName = "collation_name";
				public const string CollationSchema = "collation_schema";
				public const string ColumnDefault = "column_default";
				public const string ColumnName = "column_name";
				public const string DataType = "data_type";
				public const string DatetimePrecision = "datetime_precision";
				public const string DomainCatalog = "domain_catalog";
				public const string DomainName = "domain_name";
				public const string DomainSchema = "domain_schema";
				public const string DtdIdentifier = "dtd_identifier";
				public const string GenerationExpression = "generation_expression";
				public const string IdentityCycle = "identity_cycle";
				public const string IdentityGeneration = "identity_generation";
				public const string IdentityIncrement = "identity_increment";
				public const string IdentityMaximum = "identity_maximum";
				public const string IdentityMinimum = "identity_minimum";
				public const string IdentityStart = "identity_start";
				public const string IntervalPrecision = "interval_precision";
				public const string IntervalType = "interval_type";
				public const string IsGenerated = "is_generated";
				public const string IsIdentity = "is_identity";
				public const string IsNullable = "is_nullable";
				public const string IsSelfReferencing = "is_self_referencing";
				public const string IsUpdatable = "is_updatable";
				public const string MaximumCardinality = "maximum_cardinality";
				public const string NumericPrecision = "numeric_precision";
				public const string NumericPrecisionRadix = "numeric_precision_radix";
				public const string NumericScale = "numeric_scale";
				public const string OrdinalPosition = "ordinal_position";
				public const string ScopeCatalog = "scope_catalog";
				public const string ScopeName = "scope_name";
				public const string ScopeSchema = "scope_schema";
				public const string TableCatalog = "table_catalog";
				public const string TableName = "table_name";
				public const string TableSchema = "table_schema";
				public const string UdtCatalog = "udt_catalog";
				public const string UdtName = "udt_name";
				public const string UdtSchema = "udt_schema";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("information_schema.columns")
				{
					CharacterMaximumLength = new ColumnDefinition(Constants.CharacterMaximumLength, this);
					CharacterOctetLength = new ColumnDefinition(Constants.CharacterOctetLength, this);
					CharacterSetCatalog = new ColumnDefinition(Constants.CharacterSetCatalog, this);
					CharacterSetName = new ColumnDefinition(Constants.CharacterSetName, this);
					CharacterSetSchema = new ColumnDefinition(Constants.CharacterSetSchema, this);
					CollationCatalog = new ColumnDefinition(Constants.CollationCatalog, this);
					CollationName = new ColumnDefinition(Constants.CollationName, this);
					CollationSchema = new ColumnDefinition(Constants.CollationSchema, this);
					ColumnDefault = new ColumnDefinition(Constants.ColumnDefault, this);
					ColumnName = new ColumnDefinition(Constants.ColumnName, this);
					DataType = new ColumnDefinition(Constants.DataType, this);
					DatetimePrecision = new ColumnDefinition(Constants.DatetimePrecision, this);
					DomainCatalog = new ColumnDefinition(Constants.DomainCatalog, this);
					DomainName = new ColumnDefinition(Constants.DomainName, this);
					DomainSchema = new ColumnDefinition(Constants.DomainSchema, this);
					DtdIdentifier = new ColumnDefinition(Constants.DtdIdentifier, this);
					GenerationExpression = new ColumnDefinition(Constants.GenerationExpression, this);
					IdentityCycle = new ColumnDefinition(Constants.IdentityCycle, this);
					IdentityGeneration = new ColumnDefinition(Constants.IdentityGeneration, this);
					IdentityIncrement = new ColumnDefinition(Constants.IdentityIncrement, this);
					IdentityMaximum = new ColumnDefinition(Constants.IdentityMaximum, this);
					IdentityMinimum = new ColumnDefinition(Constants.IdentityMinimum, this);
					IdentityStart = new ColumnDefinition(Constants.IdentityStart, this);
					IntervalPrecision = new ColumnDefinition(Constants.IntervalPrecision, this);
					IntervalType = new ColumnDefinition(Constants.IntervalType, this);
					IsGenerated = new ColumnDefinition(Constants.IsGenerated, this);
					IsIdentity = new ColumnDefinition(Constants.IsIdentity, this);
					IsNullable = new ColumnDefinition(Constants.IsNullable, this);
					IsSelfReferencing = new ColumnDefinition(Constants.IsSelfReferencing, this);
					IsUpdatable = new ColumnDefinition(Constants.IsUpdatable, this);
					MaximumCardinality = new ColumnDefinition(Constants.MaximumCardinality, this);
					NumericPrecision = new ColumnDefinition(Constants.NumericPrecision, this);
					NumericPrecisionRadix = new ColumnDefinition(Constants.NumericPrecisionRadix, this);
					NumericScale = new ColumnDefinition(Constants.NumericScale, this);
					OrdinalPosition = new ColumnDefinition(Constants.OrdinalPosition, this);
					ScopeCatalog = new ColumnDefinition(Constants.ScopeCatalog, this);
					ScopeName = new ColumnDefinition(Constants.ScopeName, this);
					ScopeSchema = new ColumnDefinition(Constants.ScopeSchema, this);
					TableCatalog = new ColumnDefinition(Constants.TableCatalog, this);
					TableName = new ColumnDefinition(Constants.TableName, this);
					TableSchema = new ColumnDefinition(Constants.TableSchema, this);
					UdtCatalog = new ColumnDefinition(Constants.UdtCatalog, this);
					UdtName = new ColumnDefinition(Constants.UdtName, this);
					UdtSchema = new ColumnDefinition(Constants.UdtSchema, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition CharacterMaximumLength { get; private set; }
				public ColumnDefinition CharacterOctetLength { get; private set; }
				public ColumnDefinition CharacterSetCatalog { get; private set; }
				public ColumnDefinition CharacterSetName { get; private set; }
				public ColumnDefinition CharacterSetSchema { get; private set; }
				public ColumnDefinition CollationCatalog { get; private set; }
				public ColumnDefinition CollationName { get; private set; }
				public ColumnDefinition CollationSchema { get; private set; }
				public ColumnDefinition ColumnDefault { get; private set; }
				public ColumnDefinition ColumnName { get; private set; }
				public ColumnDefinition DataType { get; private set; }
				public ColumnDefinition DatetimePrecision { get; private set; }
				public ColumnDefinition DomainCatalog { get; private set; }
				public ColumnDefinition DomainName { get; private set; }
				public ColumnDefinition DomainSchema { get; private set; }
				public ColumnDefinition DtdIdentifier { get; private set; }
				public ColumnDefinition GenerationExpression { get; private set; }
				public ColumnDefinition IdentityCycle { get; private set; }
				public ColumnDefinition IdentityGeneration { get; private set; }
				public ColumnDefinition IdentityIncrement { get; private set; }
				public ColumnDefinition IdentityMaximum { get; private set; }
				public ColumnDefinition IdentityMinimum { get; private set; }
				public ColumnDefinition IdentityStart { get; private set; }
				public ColumnDefinition IntervalPrecision { get; private set; }
				public ColumnDefinition IntervalType { get; private set; }
				public ColumnDefinition IsGenerated { get; private set; }
				public ColumnDefinition IsIdentity { get; private set; }
				public ColumnDefinition IsNullable { get; private set; }
				public ColumnDefinition IsSelfReferencing { get; private set; }
				public ColumnDefinition IsUpdatable { get; private set; }
				public ColumnDefinition MaximumCardinality { get; private set; }
				public ColumnDefinition NumericPrecision { get; private set; }
				public ColumnDefinition NumericPrecisionRadix { get; private set; }
				public ColumnDefinition NumericScale { get; private set; }
				public ColumnDefinition OrdinalPosition { get; private set; }
				public ColumnDefinition ScopeCatalog { get; private set; }
				public ColumnDefinition ScopeName { get; private set; }
				public ColumnDefinition ScopeSchema { get; private set; }
				public ColumnDefinition TableCatalog { get; private set; }
				public ColumnDefinition TableName { get; private set; }
				public ColumnDefinition TableSchema { get; private set; }
				public ColumnDefinition UdtCatalog { get; private set; }
				public ColumnDefinition UdtName { get; private set; }
				public ColumnDefinition UdtSchema { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.CharacterMaximumLength, nameof(Column.CharacterMaximumLength) },
					{Constants.CharacterOctetLength, nameof(Column.CharacterOctetLength) },
					{Constants.CharacterSetCatalog, nameof(Column.CharacterSetCatalog) },
					{Constants.CharacterSetName, nameof(Column.CharacterSetName) },
					{Constants.CharacterSetSchema, nameof(Column.CharacterSetSchema) },
					{Constants.CollationCatalog, nameof(Column.CollationCatalog) },
					{Constants.CollationName, nameof(Column.CollationName) },
					{Constants.CollationSchema, nameof(Column.CollationSchema) },
					{Constants.ColumnDefault, nameof(Column.ColumnDefault) },
					{Constants.ColumnName, nameof(Column.ColumnName) },
					{Constants.DataType, nameof(Column.DataType) },
					{Constants.DatetimePrecision, nameof(Column.DatetimePrecision) },
					{Constants.DomainCatalog, nameof(Column.DomainCatalog) },
					{Constants.DomainName, nameof(Column.DomainName) },
					{Constants.DomainSchema, nameof(Column.DomainSchema) },
					{Constants.DtdIdentifier, nameof(Column.DtdIdentifier) },
					{Constants.GenerationExpression, nameof(Column.GenerationExpression) },
					{Constants.IdentityCycle, nameof(Column.IdentityCycle) },
					{Constants.IdentityGeneration, nameof(Column.IdentityGeneration) },
					{Constants.IdentityIncrement, nameof(Column.IdentityIncrement) },
					{Constants.IdentityMaximum, nameof(Column.IdentityMaximum) },
					{Constants.IdentityMinimum, nameof(Column.IdentityMinimum) },
					{Constants.IdentityStart, nameof(Column.IdentityStart) },
					{Constants.IntervalPrecision, nameof(Column.IntervalPrecision) },
					{Constants.IntervalType, nameof(Column.IntervalType) },
					{Constants.IsGenerated, nameof(Column.IsGenerated) },
					{Constants.IsIdentity, nameof(Column.IsIdentity) },
					{Constants.IsNullable, nameof(Column.IsNullable) },
					{Constants.IsSelfReferencing, nameof(Column.IsSelfReferencing) },
					{Constants.IsUpdatable, nameof(Column.IsUpdatable) },
					{Constants.MaximumCardinality, nameof(Column.MaximumCardinality) },
					{Constants.NumericPrecision, nameof(Column.NumericPrecision) },
					{Constants.NumericPrecisionRadix, nameof(Column.NumericPrecisionRadix) },
					{Constants.NumericScale, nameof(Column.NumericScale) },
					{Constants.OrdinalPosition, nameof(Column.OrdinalPosition) },
					{Constants.ScopeCatalog, nameof(Column.ScopeCatalog) },
					{Constants.ScopeName, nameof(Column.ScopeName) },
					{Constants.ScopeSchema, nameof(Column.ScopeSchema) },
					{Constants.TableCatalog, nameof(Column.TableCatalog) },
					{Constants.TableName, nameof(Column.TableName) },
					{Constants.TableSchema, nameof(Column.TableSchema) },
					{Constants.UdtCatalog, nameof(Column.UdtCatalog) },
					{Constants.UdtName, nameof(Column.UdtName) },
					{Constants.UdtSchema, nameof(Column.UdtSchema) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(Column), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}