//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgTsParserMapper
		{
			static partial class Constants
			{
				public const string Oid = "oid";
				public const string Prsend = "prsend";
				public const string Prsheadline = "prsheadline";
				public const string Prslextype = "prslextype";
				public const string Prsname = "prsname";
				public const string Prsnamespace = "prsnamespace";
				public const string Prsstart = "prsstart";
				public const string Prstoken = "prstoken";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_ts_parser")
				{
					Oid = new ColumnDefinition(Constants.Oid, this);
					Prsend = new ColumnDefinition(Constants.Prsend, this);
					Prsheadline = new ColumnDefinition(Constants.Prsheadline, this);
					Prslextype = new ColumnDefinition(Constants.Prslextype, this);
					Prsname = new ColumnDefinition(Constants.Prsname, this);
					Prsnamespace = new ColumnDefinition(Constants.Prsnamespace, this);
					Prsstart = new ColumnDefinition(Constants.Prsstart, this);
					Prstoken = new ColumnDefinition(Constants.Prstoken, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Oid { get; private set; }
				public ColumnDefinition Prsend { get; private set; }
				public ColumnDefinition Prsheadline { get; private set; }
				public ColumnDefinition Prslextype { get; private set; }
				public ColumnDefinition Prsname { get; private set; }
				public ColumnDefinition Prsnamespace { get; private set; }
				public ColumnDefinition Prsstart { get; private set; }
				public ColumnDefinition Prstoken { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Oid, nameof(PgTsParser.Oid) },
					{Constants.Prsend, nameof(PgTsParser.Prsend) },
					{Constants.Prsheadline, nameof(PgTsParser.Prsheadline) },
					{Constants.Prslextype, nameof(PgTsParser.Prslextype) },
					{Constants.Prsname, nameof(PgTsParser.Prsname) },
					{Constants.Prsnamespace, nameof(PgTsParser.Prsnamespace) },
					{Constants.Prsstart, nameof(PgTsParser.Prsstart) },
					{Constants.Prstoken, nameof(PgTsParser.Prstoken) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgTsParser), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}