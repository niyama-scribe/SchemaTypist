//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class InformationSchema
	{
		public static partial class ForeignTableMapper
		{
			static partial class Constants
			{
				public const string ForeignServerCatalog = "foreign_server_catalog";
				public const string ForeignServerName = "foreign_server_name";
				public const string ForeignTableCatalog = "foreign_table_catalog";
				public const string ForeignTableName = "foreign_table_name";
				public const string ForeignTableSchema = "foreign_table_schema";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("information_schema.foreign_tables")
				{
					ForeignServerCatalog = new ColumnDefinition(Constants.ForeignServerCatalog, this);
					ForeignServerName = new ColumnDefinition(Constants.ForeignServerName, this);
					ForeignTableCatalog = new ColumnDefinition(Constants.ForeignTableCatalog, this);
					ForeignTableName = new ColumnDefinition(Constants.ForeignTableName, this);
					ForeignTableSchema = new ColumnDefinition(Constants.ForeignTableSchema, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition ForeignServerCatalog { get; private set; }
				public ColumnDefinition ForeignServerName { get; private set; }
				public ColumnDefinition ForeignTableCatalog { get; private set; }
				public ColumnDefinition ForeignTableName { get; private set; }
				public ColumnDefinition ForeignTableSchema { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.ForeignServerCatalog, nameof(ForeignTable.ForeignServerCatalog) },
					{Constants.ForeignServerName, nameof(ForeignTable.ForeignServerName) },
					{Constants.ForeignTableCatalog, nameof(ForeignTable.ForeignTableCatalog) },
					{Constants.ForeignTableName, nameof(ForeignTable.ForeignTableName) },
					{Constants.ForeignTableSchema, nameof(ForeignTable.ForeignTableSchema) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(ForeignTable), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}