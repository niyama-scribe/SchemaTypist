//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class InformationSchema
	{
		public static partial class SchematumMapper
		{
			static partial class Constants
			{
				public const string CatalogName = "catalog_name";
				public const string DefaultCharacterSetCatalog = "default_character_set_catalog";
				public const string DefaultCharacterSetName = "default_character_set_name";
				public const string DefaultCharacterSetSchema = "default_character_set_schema";
				public const string SchemaName = "schema_name";
				public const string SchemaOwner = "schema_owner";
				public const string SqlPath = "sql_path";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("information_schema.schemata")
				{
					CatalogName = new ColumnDefinition(Constants.CatalogName, this);
					DefaultCharacterSetCatalog = new ColumnDefinition(Constants.DefaultCharacterSetCatalog, this);
					DefaultCharacterSetName = new ColumnDefinition(Constants.DefaultCharacterSetName, this);
					DefaultCharacterSetSchema = new ColumnDefinition(Constants.DefaultCharacterSetSchema, this);
					SchemaName = new ColumnDefinition(Constants.SchemaName, this);
					SchemaOwner = new ColumnDefinition(Constants.SchemaOwner, this);
					SqlPath = new ColumnDefinition(Constants.SqlPath, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition CatalogName { get; private set; }
				public ColumnDefinition DefaultCharacterSetCatalog { get; private set; }
				public ColumnDefinition DefaultCharacterSetName { get; private set; }
				public ColumnDefinition DefaultCharacterSetSchema { get; private set; }
				public ColumnDefinition SchemaName { get; private set; }
				public ColumnDefinition SchemaOwner { get; private set; }
				public ColumnDefinition SqlPath { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.CatalogName, nameof(Schematum.CatalogName) },
					{Constants.DefaultCharacterSetCatalog, nameof(Schematum.DefaultCharacterSetCatalog) },
					{Constants.DefaultCharacterSetName, nameof(Schematum.DefaultCharacterSetName) },
					{Constants.DefaultCharacterSetSchema, nameof(Schematum.DefaultCharacterSetSchema) },
					{Constants.SchemaName, nameof(Schematum.SchemaName) },
					{Constants.SchemaOwner, nameof(Schematum.SchemaOwner) },
					{Constants.SqlPath, nameof(Schematum.SqlPath) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(Schematum), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}