//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgDatabaseMapper
		{
			static partial class Constants
			{
				public const string Datacl = "datacl";
				public const string Datallowconn = "datallowconn";
				public const string Datcollate = "datcollate";
				public const string Datconnlimit = "datconnlimit";
				public const string Datctype = "datctype";
				public const string Datdba = "datdba";
				public const string Datfrozenxid = "datfrozenxid";
				public const string Datistemplate = "datistemplate";
				public const string Datlastsysoid = "datlastsysoid";
				public const string Datminmxid = "datminmxid";
				public const string Datname = "datname";
				public const string Dattablespace = "dattablespace";
				public const string Encoding = "encoding";
				public const string Oid = "oid";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_database")
				{
					Datacl = new ColumnDefinition(Constants.Datacl, this);
					Datallowconn = new ColumnDefinition(Constants.Datallowconn, this);
					Datcollate = new ColumnDefinition(Constants.Datcollate, this);
					Datconnlimit = new ColumnDefinition(Constants.Datconnlimit, this);
					Datctype = new ColumnDefinition(Constants.Datctype, this);
					Datdba = new ColumnDefinition(Constants.Datdba, this);
					Datfrozenxid = new ColumnDefinition(Constants.Datfrozenxid, this);
					Datistemplate = new ColumnDefinition(Constants.Datistemplate, this);
					Datlastsysoid = new ColumnDefinition(Constants.Datlastsysoid, this);
					Datminmxid = new ColumnDefinition(Constants.Datminmxid, this);
					Datname = new ColumnDefinition(Constants.Datname, this);
					Dattablespace = new ColumnDefinition(Constants.Dattablespace, this);
					Encoding = new ColumnDefinition(Constants.Encoding, this);
					Oid = new ColumnDefinition(Constants.Oid, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Datacl { get; private set; }
				public ColumnDefinition Datallowconn { get; private set; }
				public ColumnDefinition Datcollate { get; private set; }
				public ColumnDefinition Datconnlimit { get; private set; }
				public ColumnDefinition Datctype { get; private set; }
				public ColumnDefinition Datdba { get; private set; }
				public ColumnDefinition Datfrozenxid { get; private set; }
				public ColumnDefinition Datistemplate { get; private set; }
				public ColumnDefinition Datlastsysoid { get; private set; }
				public ColumnDefinition Datminmxid { get; private set; }
				public ColumnDefinition Datname { get; private set; }
				public ColumnDefinition Dattablespace { get; private set; }
				public ColumnDefinition Encoding { get; private set; }
				public ColumnDefinition Oid { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Datacl, nameof(PgDatabase.Datacl) },
					{Constants.Datallowconn, nameof(PgDatabase.Datallowconn) },
					{Constants.Datcollate, nameof(PgDatabase.Datcollate) },
					{Constants.Datconnlimit, nameof(PgDatabase.Datconnlimit) },
					{Constants.Datctype, nameof(PgDatabase.Datctype) },
					{Constants.Datdba, nameof(PgDatabase.Datdba) },
					{Constants.Datfrozenxid, nameof(PgDatabase.Datfrozenxid) },
					{Constants.Datistemplate, nameof(PgDatabase.Datistemplate) },
					{Constants.Datlastsysoid, nameof(PgDatabase.Datlastsysoid) },
					{Constants.Datminmxid, nameof(PgDatabase.Datminmxid) },
					{Constants.Datname, nameof(PgDatabase.Datname) },
					{Constants.Dattablespace, nameof(PgDatabase.Dattablespace) },
					{Constants.Encoding, nameof(PgDatabase.Encoding) },
					{Constants.Oid, nameof(PgDatabase.Oid) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgDatabase), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}