//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class InformationSchema
	{
		public static partial class TableMapper
		{
			static partial class Constants
			{
				public const string CommitAction = "commit_action";
				public const string IsInsertableInto = "is_insertable_into";
				public const string IsTyped = "is_typed";
				public const string ReferenceGeneration = "reference_generation";
				public const string SelfReferencingColumnName = "self_referencing_column_name";
				public const string TableCatalog = "table_catalog";
				public const string TableName = "table_name";
				public const string TableSchema = "table_schema";
				public const string TableType = "table_type";
				public const string UserDefinedTypeCatalog = "user_defined_type_catalog";
				public const string UserDefinedTypeName = "user_defined_type_name";
				public const string UserDefinedTypeSchema = "user_defined_type_schema";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("information_schema.tables")
				{
					CommitAction = new ColumnDefinition(Constants.CommitAction, this);
					IsInsertableInto = new ColumnDefinition(Constants.IsInsertableInto, this);
					IsTyped = new ColumnDefinition(Constants.IsTyped, this);
					ReferenceGeneration = new ColumnDefinition(Constants.ReferenceGeneration, this);
					SelfReferencingColumnName = new ColumnDefinition(Constants.SelfReferencingColumnName, this);
					TableCatalog = new ColumnDefinition(Constants.TableCatalog, this);
					TableName = new ColumnDefinition(Constants.TableName, this);
					TableSchema = new ColumnDefinition(Constants.TableSchema, this);
					TableType = new ColumnDefinition(Constants.TableType, this);
					UserDefinedTypeCatalog = new ColumnDefinition(Constants.UserDefinedTypeCatalog, this);
					UserDefinedTypeName = new ColumnDefinition(Constants.UserDefinedTypeName, this);
					UserDefinedTypeSchema = new ColumnDefinition(Constants.UserDefinedTypeSchema, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition CommitAction { get; private set; }
				public ColumnDefinition IsInsertableInto { get; private set; }
				public ColumnDefinition IsTyped { get; private set; }
				public ColumnDefinition ReferenceGeneration { get; private set; }
				public ColumnDefinition SelfReferencingColumnName { get; private set; }
				public ColumnDefinition TableCatalog { get; private set; }
				public ColumnDefinition TableName { get; private set; }
				public ColumnDefinition TableSchema { get; private set; }
				public ColumnDefinition TableType { get; private set; }
				public ColumnDefinition UserDefinedTypeCatalog { get; private set; }
				public ColumnDefinition UserDefinedTypeName { get; private set; }
				public ColumnDefinition UserDefinedTypeSchema { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.CommitAction, nameof(Table.CommitAction) },
					{Constants.IsInsertableInto, nameof(Table.IsInsertableInto) },
					{Constants.IsTyped, nameof(Table.IsTyped) },
					{Constants.ReferenceGeneration, nameof(Table.ReferenceGeneration) },
					{Constants.SelfReferencingColumnName, nameof(Table.SelfReferencingColumnName) },
					{Constants.TableCatalog, nameof(Table.TableCatalog) },
					{Constants.TableName, nameof(Table.TableName) },
					{Constants.TableSchema, nameof(Table.TableSchema) },
					{Constants.TableType, nameof(Table.TableType) },
					{Constants.UserDefinedTypeCatalog, nameof(Table.UserDefinedTypeCatalog) },
					{Constants.UserDefinedTypeName, nameof(Table.UserDefinedTypeName) },
					{Constants.UserDefinedTypeSchema, nameof(Table.UserDefinedTypeSchema) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(Table), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}