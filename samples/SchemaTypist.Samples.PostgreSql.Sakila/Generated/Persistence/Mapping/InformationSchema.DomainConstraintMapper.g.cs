//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class InformationSchema
	{
		public static partial class DomainConstraintMapper
		{
			static partial class Constants
			{
				public const string ConstraintCatalog = "constraint_catalog";
				public const string ConstraintName = "constraint_name";
				public const string ConstraintSchema = "constraint_schema";
				public const string DomainCatalog = "domain_catalog";
				public const string DomainName = "domain_name";
				public const string DomainSchema = "domain_schema";
				public const string InitiallyDeferred = "initially_deferred";
				public const string IsDeferrable = "is_deferrable";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("information_schema.domain_constraints")
				{
					ConstraintCatalog = new ColumnDefinition(Constants.ConstraintCatalog, this);
					ConstraintName = new ColumnDefinition(Constants.ConstraintName, this);
					ConstraintSchema = new ColumnDefinition(Constants.ConstraintSchema, this);
					DomainCatalog = new ColumnDefinition(Constants.DomainCatalog, this);
					DomainName = new ColumnDefinition(Constants.DomainName, this);
					DomainSchema = new ColumnDefinition(Constants.DomainSchema, this);
					InitiallyDeferred = new ColumnDefinition(Constants.InitiallyDeferred, this);
					IsDeferrable = new ColumnDefinition(Constants.IsDeferrable, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition ConstraintCatalog { get; private set; }
				public ColumnDefinition ConstraintName { get; private set; }
				public ColumnDefinition ConstraintSchema { get; private set; }
				public ColumnDefinition DomainCatalog { get; private set; }
				public ColumnDefinition DomainName { get; private set; }
				public ColumnDefinition DomainSchema { get; private set; }
				public ColumnDefinition InitiallyDeferred { get; private set; }
				public ColumnDefinition IsDeferrable { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.ConstraintCatalog, nameof(DomainConstraint.ConstraintCatalog) },
					{Constants.ConstraintName, nameof(DomainConstraint.ConstraintName) },
					{Constants.ConstraintSchema, nameof(DomainConstraint.ConstraintSchema) },
					{Constants.DomainCatalog, nameof(DomainConstraint.DomainCatalog) },
					{Constants.DomainName, nameof(DomainConstraint.DomainName) },
					{Constants.DomainSchema, nameof(DomainConstraint.DomainSchema) },
					{Constants.InitiallyDeferred, nameof(DomainConstraint.InitiallyDeferred) },
					{Constants.IsDeferrable, nameof(DomainConstraint.IsDeferrable) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(DomainConstraint), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}