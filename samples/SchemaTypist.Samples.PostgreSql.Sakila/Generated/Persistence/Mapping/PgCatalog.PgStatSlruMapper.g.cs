//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgStatSlruMapper
		{
			static partial class Constants
			{
				public const string BlksExist = "blks_exists";
				public const string BlksHit = "blks_hit";
				public const string BlksRead = "blks_read";
				public const string BlksWritten = "blks_written";
				public const string BlksZeroed = "blks_zeroed";
				public const string Flush = "flushes";
				public const string Name = "name";
				public const string StatsReset = "stats_reset";
				public const string Truncate = "truncates";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_stat_slru")
				{
					BlksExist = new ColumnDefinition(Constants.BlksExist, this);
					BlksHit = new ColumnDefinition(Constants.BlksHit, this);
					BlksRead = new ColumnDefinition(Constants.BlksRead, this);
					BlksWritten = new ColumnDefinition(Constants.BlksWritten, this);
					BlksZeroed = new ColumnDefinition(Constants.BlksZeroed, this);
					Flush = new ColumnDefinition(Constants.Flush, this);
					Name = new ColumnDefinition(Constants.Name, this);
					StatsReset = new ColumnDefinition(Constants.StatsReset, this);
					Truncate = new ColumnDefinition(Constants.Truncate, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition BlksExist { get; private set; }
				public ColumnDefinition BlksHit { get; private set; }
				public ColumnDefinition BlksRead { get; private set; }
				public ColumnDefinition BlksWritten { get; private set; }
				public ColumnDefinition BlksZeroed { get; private set; }
				public ColumnDefinition Flush { get; private set; }
				public ColumnDefinition Name { get; private set; }
				public ColumnDefinition StatsReset { get; private set; }
				public ColumnDefinition Truncate { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.BlksExist, nameof(PgStatSlru.BlksExist) },
					{Constants.BlksHit, nameof(PgStatSlru.BlksHit) },
					{Constants.BlksRead, nameof(PgStatSlru.BlksRead) },
					{Constants.BlksWritten, nameof(PgStatSlru.BlksWritten) },
					{Constants.BlksZeroed, nameof(PgStatSlru.BlksZeroed) },
					{Constants.Flush, nameof(PgStatSlru.Flush) },
					{Constants.Name, nameof(PgStatSlru.Name) },
					{Constants.StatsReset, nameof(PgStatSlru.StatsReset) },
					{Constants.Truncate, nameof(PgStatSlru.Truncate) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgStatSlru), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}