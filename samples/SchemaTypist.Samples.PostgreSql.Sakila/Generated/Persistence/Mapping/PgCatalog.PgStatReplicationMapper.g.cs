//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgStatReplicationMapper
		{
			static partial class Constants
			{
				public const string ApplicationName = "application_name";
				public const string BackendStart = "backend_start";
				public const string BackendXmin = "backend_xmin";
				public const string ClientAddr = "client_addr";
				public const string ClientHostname = "client_hostname";
				public const string ClientPort = "client_port";
				public const string FlushLag = "flush_lag";
				public const string FlushLsn = "flush_lsn";
				public const string Pid = "pid";
				public const string ReplayLag = "replay_lag";
				public const string ReplayLsn = "replay_lsn";
				public const string ReplyTime = "reply_time";
				public const string SentLsn = "sent_lsn";
				public const string State = "state";
				public const string SyncPriority = "sync_priority";
				public const string SyncState = "sync_state";
				public const string Usename = "usename";
				public const string Usesysid = "usesysid";
				public const string WriteLag = "write_lag";
				public const string WriteLsn = "write_lsn";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_stat_replication")
				{
					ApplicationName = new ColumnDefinition(Constants.ApplicationName, this);
					BackendStart = new ColumnDefinition(Constants.BackendStart, this);
					BackendXmin = new ColumnDefinition(Constants.BackendXmin, this);
					ClientAddr = new ColumnDefinition(Constants.ClientAddr, this);
					ClientHostname = new ColumnDefinition(Constants.ClientHostname, this);
					ClientPort = new ColumnDefinition(Constants.ClientPort, this);
					FlushLag = new ColumnDefinition(Constants.FlushLag, this);
					FlushLsn = new ColumnDefinition(Constants.FlushLsn, this);
					Pid = new ColumnDefinition(Constants.Pid, this);
					ReplayLag = new ColumnDefinition(Constants.ReplayLag, this);
					ReplayLsn = new ColumnDefinition(Constants.ReplayLsn, this);
					ReplyTime = new ColumnDefinition(Constants.ReplyTime, this);
					SentLsn = new ColumnDefinition(Constants.SentLsn, this);
					State = new ColumnDefinition(Constants.State, this);
					SyncPriority = new ColumnDefinition(Constants.SyncPriority, this);
					SyncState = new ColumnDefinition(Constants.SyncState, this);
					Usename = new ColumnDefinition(Constants.Usename, this);
					Usesysid = new ColumnDefinition(Constants.Usesysid, this);
					WriteLag = new ColumnDefinition(Constants.WriteLag, this);
					WriteLsn = new ColumnDefinition(Constants.WriteLsn, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition ApplicationName { get; private set; }
				public ColumnDefinition BackendStart { get; private set; }
				public ColumnDefinition BackendXmin { get; private set; }
				public ColumnDefinition ClientAddr { get; private set; }
				public ColumnDefinition ClientHostname { get; private set; }
				public ColumnDefinition ClientPort { get; private set; }
				public ColumnDefinition FlushLag { get; private set; }
				public ColumnDefinition FlushLsn { get; private set; }
				public ColumnDefinition Pid { get; private set; }
				public ColumnDefinition ReplayLag { get; private set; }
				public ColumnDefinition ReplayLsn { get; private set; }
				public ColumnDefinition ReplyTime { get; private set; }
				public ColumnDefinition SentLsn { get; private set; }
				public ColumnDefinition State { get; private set; }
				public ColumnDefinition SyncPriority { get; private set; }
				public ColumnDefinition SyncState { get; private set; }
				public ColumnDefinition Usename { get; private set; }
				public ColumnDefinition Usesysid { get; private set; }
				public ColumnDefinition WriteLag { get; private set; }
				public ColumnDefinition WriteLsn { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.ApplicationName, nameof(PgStatReplication.ApplicationName) },
					{Constants.BackendStart, nameof(PgStatReplication.BackendStart) },
					{Constants.BackendXmin, nameof(PgStatReplication.BackendXmin) },
					{Constants.ClientAddr, nameof(PgStatReplication.ClientAddr) },
					{Constants.ClientHostname, nameof(PgStatReplication.ClientHostname) },
					{Constants.ClientPort, nameof(PgStatReplication.ClientPort) },
					{Constants.FlushLag, nameof(PgStatReplication.FlushLag) },
					{Constants.FlushLsn, nameof(PgStatReplication.FlushLsn) },
					{Constants.Pid, nameof(PgStatReplication.Pid) },
					{Constants.ReplayLag, nameof(PgStatReplication.ReplayLag) },
					{Constants.ReplayLsn, nameof(PgStatReplication.ReplayLsn) },
					{Constants.ReplyTime, nameof(PgStatReplication.ReplyTime) },
					{Constants.SentLsn, nameof(PgStatReplication.SentLsn) },
					{Constants.State, nameof(PgStatReplication.State) },
					{Constants.SyncPriority, nameof(PgStatReplication.SyncPriority) },
					{Constants.SyncState, nameof(PgStatReplication.SyncState) },
					{Constants.Usename, nameof(PgStatReplication.Usename) },
					{Constants.Usesysid, nameof(PgStatReplication.Usesysid) },
					{Constants.WriteLag, nameof(PgStatReplication.WriteLag) },
					{Constants.WriteLsn, nameof(PgStatReplication.WriteLsn) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgStatReplication), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}