//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgStatBgwriterMapper
		{
			static partial class Constants
			{
				public const string BuffersAlloc = "buffers_alloc";
				public const string BuffersBackend = "buffers_backend";
				public const string BuffersBackendFsync = "buffers_backend_fsync";
				public const string BuffersCheckpoint = "buffers_checkpoint";
				public const string BuffersClean = "buffers_clean";
				public const string CheckpointSyncTime = "checkpoint_sync_time";
				public const string CheckpointWriteTime = "checkpoint_write_time";
				public const string CheckpointsReq = "checkpoints_req";
				public const string CheckpointsTimed = "checkpoints_timed";
				public const string MaxwrittenClean = "maxwritten_clean";
				public const string StatsReset = "stats_reset";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_stat_bgwriter")
				{
					BuffersAlloc = new ColumnDefinition(Constants.BuffersAlloc, this);
					BuffersBackend = new ColumnDefinition(Constants.BuffersBackend, this);
					BuffersBackendFsync = new ColumnDefinition(Constants.BuffersBackendFsync, this);
					BuffersCheckpoint = new ColumnDefinition(Constants.BuffersCheckpoint, this);
					BuffersClean = new ColumnDefinition(Constants.BuffersClean, this);
					CheckpointSyncTime = new ColumnDefinition(Constants.CheckpointSyncTime, this);
					CheckpointWriteTime = new ColumnDefinition(Constants.CheckpointWriteTime, this);
					CheckpointsReq = new ColumnDefinition(Constants.CheckpointsReq, this);
					CheckpointsTimed = new ColumnDefinition(Constants.CheckpointsTimed, this);
					MaxwrittenClean = new ColumnDefinition(Constants.MaxwrittenClean, this);
					StatsReset = new ColumnDefinition(Constants.StatsReset, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition BuffersAlloc { get; private set; }
				public ColumnDefinition BuffersBackend { get; private set; }
				public ColumnDefinition BuffersBackendFsync { get; private set; }
				public ColumnDefinition BuffersCheckpoint { get; private set; }
				public ColumnDefinition BuffersClean { get; private set; }
				public ColumnDefinition CheckpointSyncTime { get; private set; }
				public ColumnDefinition CheckpointWriteTime { get; private set; }
				public ColumnDefinition CheckpointsReq { get; private set; }
				public ColumnDefinition CheckpointsTimed { get; private set; }
				public ColumnDefinition MaxwrittenClean { get; private set; }
				public ColumnDefinition StatsReset { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.BuffersAlloc, nameof(PgStatBgwriter.BuffersAlloc) },
					{Constants.BuffersBackend, nameof(PgStatBgwriter.BuffersBackend) },
					{Constants.BuffersBackendFsync, nameof(PgStatBgwriter.BuffersBackendFsync) },
					{Constants.BuffersCheckpoint, nameof(PgStatBgwriter.BuffersCheckpoint) },
					{Constants.BuffersClean, nameof(PgStatBgwriter.BuffersClean) },
					{Constants.CheckpointSyncTime, nameof(PgStatBgwriter.CheckpointSyncTime) },
					{Constants.CheckpointWriteTime, nameof(PgStatBgwriter.CheckpointWriteTime) },
					{Constants.CheckpointsReq, nameof(PgStatBgwriter.CheckpointsReq) },
					{Constants.CheckpointsTimed, nameof(PgStatBgwriter.CheckpointsTimed) },
					{Constants.MaxwrittenClean, nameof(PgStatBgwriter.MaxwrittenClean) },
					{Constants.StatsReset, nameof(PgStatBgwriter.StatsReset) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgStatBgwriter), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}