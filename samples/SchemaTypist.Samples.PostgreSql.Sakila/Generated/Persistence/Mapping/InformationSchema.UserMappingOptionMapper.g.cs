//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class InformationSchema
	{
		public static partial class UserMappingOptionMapper
		{
			static partial class Constants
			{
				public const string AuthorizationIdentifier = "authorization_identifier";
				public const string ForeignServerCatalog = "foreign_server_catalog";
				public const string ForeignServerName = "foreign_server_name";
				public const string OptionName = "option_name";
				public const string OptionValue = "option_value";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("information_schema.user_mapping_options")
				{
					AuthorizationIdentifier = new ColumnDefinition(Constants.AuthorizationIdentifier, this);
					ForeignServerCatalog = new ColumnDefinition(Constants.ForeignServerCatalog, this);
					ForeignServerName = new ColumnDefinition(Constants.ForeignServerName, this);
					OptionName = new ColumnDefinition(Constants.OptionName, this);
					OptionValue = new ColumnDefinition(Constants.OptionValue, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition AuthorizationIdentifier { get; private set; }
				public ColumnDefinition ForeignServerCatalog { get; private set; }
				public ColumnDefinition ForeignServerName { get; private set; }
				public ColumnDefinition OptionName { get; private set; }
				public ColumnDefinition OptionValue { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.AuthorizationIdentifier, nameof(UserMappingOption.AuthorizationIdentifier) },
					{Constants.ForeignServerCatalog, nameof(UserMappingOption.ForeignServerCatalog) },
					{Constants.ForeignServerName, nameof(UserMappingOption.ForeignServerName) },
					{Constants.OptionName, nameof(UserMappingOption.OptionName) },
					{Constants.OptionValue, nameof(UserMappingOption.OptionValue) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(UserMappingOption), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}