//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgStatReplicationSlotMapper
		{
			static partial class Constants
			{
				public const string SlotName = "slot_name";
				public const string SpillByte = "spill_bytes";
				public const string SpillCount = "spill_count";
				public const string SpillTxn = "spill_txns";
				public const string StatsReset = "stats_reset";
				public const string StreamByte = "stream_bytes";
				public const string StreamCount = "stream_count";
				public const string StreamTxn = "stream_txns";
				public const string TotalByte = "total_bytes";
				public const string TotalTxn = "total_txns";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_stat_replication_slots")
				{
					SlotName = new ColumnDefinition(Constants.SlotName, this);
					SpillByte = new ColumnDefinition(Constants.SpillByte, this);
					SpillCount = new ColumnDefinition(Constants.SpillCount, this);
					SpillTxn = new ColumnDefinition(Constants.SpillTxn, this);
					StatsReset = new ColumnDefinition(Constants.StatsReset, this);
					StreamByte = new ColumnDefinition(Constants.StreamByte, this);
					StreamCount = new ColumnDefinition(Constants.StreamCount, this);
					StreamTxn = new ColumnDefinition(Constants.StreamTxn, this);
					TotalByte = new ColumnDefinition(Constants.TotalByte, this);
					TotalTxn = new ColumnDefinition(Constants.TotalTxn, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition SlotName { get; private set; }
				public ColumnDefinition SpillByte { get; private set; }
				public ColumnDefinition SpillCount { get; private set; }
				public ColumnDefinition SpillTxn { get; private set; }
				public ColumnDefinition StatsReset { get; private set; }
				public ColumnDefinition StreamByte { get; private set; }
				public ColumnDefinition StreamCount { get; private set; }
				public ColumnDefinition StreamTxn { get; private set; }
				public ColumnDefinition TotalByte { get; private set; }
				public ColumnDefinition TotalTxn { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.SlotName, nameof(PgStatReplicationSlot.SlotName) },
					{Constants.SpillByte, nameof(PgStatReplicationSlot.SpillByte) },
					{Constants.SpillCount, nameof(PgStatReplicationSlot.SpillCount) },
					{Constants.SpillTxn, nameof(PgStatReplicationSlot.SpillTxn) },
					{Constants.StatsReset, nameof(PgStatReplicationSlot.StatsReset) },
					{Constants.StreamByte, nameof(PgStatReplicationSlot.StreamByte) },
					{Constants.StreamCount, nameof(PgStatReplicationSlot.StreamCount) },
					{Constants.StreamTxn, nameof(PgStatReplicationSlot.StreamTxn) },
					{Constants.TotalByte, nameof(PgStatReplicationSlot.TotalByte) },
					{Constants.TotalTxn, nameof(PgStatReplicationSlot.TotalTxn) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgStatReplicationSlot), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}