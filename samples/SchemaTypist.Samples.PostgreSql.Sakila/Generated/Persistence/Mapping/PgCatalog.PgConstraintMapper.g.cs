//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgConstraintMapper
		{
			static partial class Constants
			{
				public const string Conbin = "conbin";
				public const string Condeferrable = "condeferrable";
				public const string Condeferred = "condeferred";
				public const string Conexclop = "conexclop";
				public const string Confdeltype = "confdeltype";
				public const string Conffeqop = "conffeqop";
				public const string Confkey = "confkey";
				public const string Confmatchtype = "confmatchtype";
				public const string Confrelid = "confrelid";
				public const string Confupdtype = "confupdtype";
				public const string Conindid = "conindid";
				public const string Coninhcount = "coninhcount";
				public const string Conislocal = "conislocal";
				public const string Conkey = "conkey";
				public const string Conname = "conname";
				public const string Connamespace = "connamespace";
				public const string Connoinherit = "connoinherit";
				public const string Conparentid = "conparentid";
				public const string Conpfeqop = "conpfeqop";
				public const string Conppeqop = "conppeqop";
				public const string Conrelid = "conrelid";
				public const string Contype = "contype";
				public const string Contypid = "contypid";
				public const string Convalidated = "convalidated";
				public const string Oid = "oid";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_constraint")
				{
					Conbin = new ColumnDefinition(Constants.Conbin, this);
					Condeferrable = new ColumnDefinition(Constants.Condeferrable, this);
					Condeferred = new ColumnDefinition(Constants.Condeferred, this);
					Conexclop = new ColumnDefinition(Constants.Conexclop, this);
					Confdeltype = new ColumnDefinition(Constants.Confdeltype, this);
					Conffeqop = new ColumnDefinition(Constants.Conffeqop, this);
					Confkey = new ColumnDefinition(Constants.Confkey, this);
					Confmatchtype = new ColumnDefinition(Constants.Confmatchtype, this);
					Confrelid = new ColumnDefinition(Constants.Confrelid, this);
					Confupdtype = new ColumnDefinition(Constants.Confupdtype, this);
					Conindid = new ColumnDefinition(Constants.Conindid, this);
					Coninhcount = new ColumnDefinition(Constants.Coninhcount, this);
					Conislocal = new ColumnDefinition(Constants.Conislocal, this);
					Conkey = new ColumnDefinition(Constants.Conkey, this);
					Conname = new ColumnDefinition(Constants.Conname, this);
					Connamespace = new ColumnDefinition(Constants.Connamespace, this);
					Connoinherit = new ColumnDefinition(Constants.Connoinherit, this);
					Conparentid = new ColumnDefinition(Constants.Conparentid, this);
					Conpfeqop = new ColumnDefinition(Constants.Conpfeqop, this);
					Conppeqop = new ColumnDefinition(Constants.Conppeqop, this);
					Conrelid = new ColumnDefinition(Constants.Conrelid, this);
					Contype = new ColumnDefinition(Constants.Contype, this);
					Contypid = new ColumnDefinition(Constants.Contypid, this);
					Convalidated = new ColumnDefinition(Constants.Convalidated, this);
					Oid = new ColumnDefinition(Constants.Oid, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Conbin { get; private set; }
				public ColumnDefinition Condeferrable { get; private set; }
				public ColumnDefinition Condeferred { get; private set; }
				public ColumnDefinition Conexclop { get; private set; }
				public ColumnDefinition Confdeltype { get; private set; }
				public ColumnDefinition Conffeqop { get; private set; }
				public ColumnDefinition Confkey { get; private set; }
				public ColumnDefinition Confmatchtype { get; private set; }
				public ColumnDefinition Confrelid { get; private set; }
				public ColumnDefinition Confupdtype { get; private set; }
				public ColumnDefinition Conindid { get; private set; }
				public ColumnDefinition Coninhcount { get; private set; }
				public ColumnDefinition Conislocal { get; private set; }
				public ColumnDefinition Conkey { get; private set; }
				public ColumnDefinition Conname { get; private set; }
				public ColumnDefinition Connamespace { get; private set; }
				public ColumnDefinition Connoinherit { get; private set; }
				public ColumnDefinition Conparentid { get; private set; }
				public ColumnDefinition Conpfeqop { get; private set; }
				public ColumnDefinition Conppeqop { get; private set; }
				public ColumnDefinition Conrelid { get; private set; }
				public ColumnDefinition Contype { get; private set; }
				public ColumnDefinition Contypid { get; private set; }
				public ColumnDefinition Convalidated { get; private set; }
				public ColumnDefinition Oid { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Conbin, nameof(PgConstraint.Conbin) },
					{Constants.Condeferrable, nameof(PgConstraint.Condeferrable) },
					{Constants.Condeferred, nameof(PgConstraint.Condeferred) },
					{Constants.Conexclop, nameof(PgConstraint.Conexclop) },
					{Constants.Confdeltype, nameof(PgConstraint.Confdeltype) },
					{Constants.Conffeqop, nameof(PgConstraint.Conffeqop) },
					{Constants.Confkey, nameof(PgConstraint.Confkey) },
					{Constants.Confmatchtype, nameof(PgConstraint.Confmatchtype) },
					{Constants.Confrelid, nameof(PgConstraint.Confrelid) },
					{Constants.Confupdtype, nameof(PgConstraint.Confupdtype) },
					{Constants.Conindid, nameof(PgConstraint.Conindid) },
					{Constants.Coninhcount, nameof(PgConstraint.Coninhcount) },
					{Constants.Conislocal, nameof(PgConstraint.Conislocal) },
					{Constants.Conkey, nameof(PgConstraint.Conkey) },
					{Constants.Conname, nameof(PgConstraint.Conname) },
					{Constants.Connamespace, nameof(PgConstraint.Connamespace) },
					{Constants.Connoinherit, nameof(PgConstraint.Connoinherit) },
					{Constants.Conparentid, nameof(PgConstraint.Conparentid) },
					{Constants.Conpfeqop, nameof(PgConstraint.Conpfeqop) },
					{Constants.Conppeqop, nameof(PgConstraint.Conppeqop) },
					{Constants.Conrelid, nameof(PgConstraint.Conrelid) },
					{Constants.Contype, nameof(PgConstraint.Contype) },
					{Constants.Contypid, nameof(PgConstraint.Contypid) },
					{Constants.Convalidated, nameof(PgConstraint.Convalidated) },
					{Constants.Oid, nameof(PgConstraint.Oid) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgConstraint), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}