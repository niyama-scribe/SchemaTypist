//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgSettingMapper
		{
			static partial class Constants
			{
				public const string BootVal = "boot_val";
				public const string Category = "category";
				public const string Context = "context";
				public const string Enumval = "enumvals";
				public const string ExtraDesc = "extra_desc";
				public const string MaxVal = "max_val";
				public const string MinVal = "min_val";
				public const string Name = "name";
				public const string PendingRestart = "pending_restart";
				public const string ResetVal = "reset_val";
				public const string Setting = "setting";
				public const string ShortDesc = "short_desc";
				public const string Source = "source";
				public const string Sourcefile = "sourcefile";
				public const string Sourceline = "sourceline";
				public const string Unit = "unit";
				public const string Vartype = "vartype";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_settings")
				{
					BootVal = new ColumnDefinition(Constants.BootVal, this);
					Category = new ColumnDefinition(Constants.Category, this);
					Context = new ColumnDefinition(Constants.Context, this);
					Enumval = new ColumnDefinition(Constants.Enumval, this);
					ExtraDesc = new ColumnDefinition(Constants.ExtraDesc, this);
					MaxVal = new ColumnDefinition(Constants.MaxVal, this);
					MinVal = new ColumnDefinition(Constants.MinVal, this);
					Name = new ColumnDefinition(Constants.Name, this);
					PendingRestart = new ColumnDefinition(Constants.PendingRestart, this);
					ResetVal = new ColumnDefinition(Constants.ResetVal, this);
					Setting = new ColumnDefinition(Constants.Setting, this);
					ShortDesc = new ColumnDefinition(Constants.ShortDesc, this);
					Source = new ColumnDefinition(Constants.Source, this);
					Sourcefile = new ColumnDefinition(Constants.Sourcefile, this);
					Sourceline = new ColumnDefinition(Constants.Sourceline, this);
					Unit = new ColumnDefinition(Constants.Unit, this);
					Vartype = new ColumnDefinition(Constants.Vartype, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition BootVal { get; private set; }
				public ColumnDefinition Category { get; private set; }
				public ColumnDefinition Context { get; private set; }
				public ColumnDefinition Enumval { get; private set; }
				public ColumnDefinition ExtraDesc { get; private set; }
				public ColumnDefinition MaxVal { get; private set; }
				public ColumnDefinition MinVal { get; private set; }
				public ColumnDefinition Name { get; private set; }
				public ColumnDefinition PendingRestart { get; private set; }
				public ColumnDefinition ResetVal { get; private set; }
				public ColumnDefinition Setting { get; private set; }
				public ColumnDefinition ShortDesc { get; private set; }
				public ColumnDefinition Source { get; private set; }
				public ColumnDefinition Sourcefile { get; private set; }
				public ColumnDefinition Sourceline { get; private set; }
				public ColumnDefinition Unit { get; private set; }
				public ColumnDefinition Vartype { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.BootVal, nameof(PgSetting.BootVal) },
					{Constants.Category, nameof(PgSetting.Category) },
					{Constants.Context, nameof(PgSetting.Context) },
					{Constants.Enumval, nameof(PgSetting.Enumval) },
					{Constants.ExtraDesc, nameof(PgSetting.ExtraDesc) },
					{Constants.MaxVal, nameof(PgSetting.MaxVal) },
					{Constants.MinVal, nameof(PgSetting.MinVal) },
					{Constants.Name, nameof(PgSetting.Name) },
					{Constants.PendingRestart, nameof(PgSetting.PendingRestart) },
					{Constants.ResetVal, nameof(PgSetting.ResetVal) },
					{Constants.Setting, nameof(PgSetting.Setting) },
					{Constants.ShortDesc, nameof(PgSetting.ShortDesc) },
					{Constants.Source, nameof(PgSetting.Source) },
					{Constants.Sourcefile, nameof(PgSetting.Sourcefile) },
					{Constants.Sourceline, nameof(PgSetting.Sourceline) },
					{Constants.Unit, nameof(PgSetting.Unit) },
					{Constants.Vartype, nameof(PgSetting.Vartype) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgSetting), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}