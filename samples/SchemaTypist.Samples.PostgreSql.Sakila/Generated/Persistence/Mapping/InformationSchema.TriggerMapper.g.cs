//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class InformationSchema
	{
		public static partial class TriggerMapper
		{
			static partial class Constants
			{
				public const string ActionCondition = "action_condition";
				public const string ActionOrder = "action_order";
				public const string ActionOrientation = "action_orientation";
				public const string ActionReferenceNewRow = "action_reference_new_row";
				public const string ActionReferenceNewTable = "action_reference_new_table";
				public const string ActionReferenceOldRow = "action_reference_old_row";
				public const string ActionReferenceOldTable = "action_reference_old_table";
				public const string ActionStatement = "action_statement";
				public const string ActionTiming = "action_timing";
				public const string Created = "created";
				public const string EventManipulation = "event_manipulation";
				public const string EventObjectCatalog = "event_object_catalog";
				public const string EventObjectSchema = "event_object_schema";
				public const string EventObjectTable = "event_object_table";
				public const string TriggerCatalog = "trigger_catalog";
				public const string TriggerName = "trigger_name";
				public const string TriggerSchema = "trigger_schema";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("information_schema.triggers")
				{
					ActionCondition = new ColumnDefinition(Constants.ActionCondition, this);
					ActionOrder = new ColumnDefinition(Constants.ActionOrder, this);
					ActionOrientation = new ColumnDefinition(Constants.ActionOrientation, this);
					ActionReferenceNewRow = new ColumnDefinition(Constants.ActionReferenceNewRow, this);
					ActionReferenceNewTable = new ColumnDefinition(Constants.ActionReferenceNewTable, this);
					ActionReferenceOldRow = new ColumnDefinition(Constants.ActionReferenceOldRow, this);
					ActionReferenceOldTable = new ColumnDefinition(Constants.ActionReferenceOldTable, this);
					ActionStatement = new ColumnDefinition(Constants.ActionStatement, this);
					ActionTiming = new ColumnDefinition(Constants.ActionTiming, this);
					Created = new ColumnDefinition(Constants.Created, this);
					EventManipulation = new ColumnDefinition(Constants.EventManipulation, this);
					EventObjectCatalog = new ColumnDefinition(Constants.EventObjectCatalog, this);
					EventObjectSchema = new ColumnDefinition(Constants.EventObjectSchema, this);
					EventObjectTable = new ColumnDefinition(Constants.EventObjectTable, this);
					TriggerCatalog = new ColumnDefinition(Constants.TriggerCatalog, this);
					TriggerName = new ColumnDefinition(Constants.TriggerName, this);
					TriggerSchema = new ColumnDefinition(Constants.TriggerSchema, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition ActionCondition { get; private set; }
				public ColumnDefinition ActionOrder { get; private set; }
				public ColumnDefinition ActionOrientation { get; private set; }
				public ColumnDefinition ActionReferenceNewRow { get; private set; }
				public ColumnDefinition ActionReferenceNewTable { get; private set; }
				public ColumnDefinition ActionReferenceOldRow { get; private set; }
				public ColumnDefinition ActionReferenceOldTable { get; private set; }
				public ColumnDefinition ActionStatement { get; private set; }
				public ColumnDefinition ActionTiming { get; private set; }
				public ColumnDefinition Created { get; private set; }
				public ColumnDefinition EventManipulation { get; private set; }
				public ColumnDefinition EventObjectCatalog { get; private set; }
				public ColumnDefinition EventObjectSchema { get; private set; }
				public ColumnDefinition EventObjectTable { get; private set; }
				public ColumnDefinition TriggerCatalog { get; private set; }
				public ColumnDefinition TriggerName { get; private set; }
				public ColumnDefinition TriggerSchema { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.ActionCondition, nameof(Trigger.ActionCondition) },
					{Constants.ActionOrder, nameof(Trigger.ActionOrder) },
					{Constants.ActionOrientation, nameof(Trigger.ActionOrientation) },
					{Constants.ActionReferenceNewRow, nameof(Trigger.ActionReferenceNewRow) },
					{Constants.ActionReferenceNewTable, nameof(Trigger.ActionReferenceNewTable) },
					{Constants.ActionReferenceOldRow, nameof(Trigger.ActionReferenceOldRow) },
					{Constants.ActionReferenceOldTable, nameof(Trigger.ActionReferenceOldTable) },
					{Constants.ActionStatement, nameof(Trigger.ActionStatement) },
					{Constants.ActionTiming, nameof(Trigger.ActionTiming) },
					{Constants.Created, nameof(Trigger.Created) },
					{Constants.EventManipulation, nameof(Trigger.EventManipulation) },
					{Constants.EventObjectCatalog, nameof(Trigger.EventObjectCatalog) },
					{Constants.EventObjectSchema, nameof(Trigger.EventObjectSchema) },
					{Constants.EventObjectTable, nameof(Trigger.EventObjectTable) },
					{Constants.TriggerCatalog, nameof(Trigger.TriggerCatalog) },
					{Constants.TriggerName, nameof(Trigger.TriggerName) },
					{Constants.TriggerSchema, nameof(Trigger.TriggerSchema) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(Trigger), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}