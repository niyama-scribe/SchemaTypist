//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgMatviewMapper
		{
			static partial class Constants
			{
				public const string Definition = "definition";
				public const string Hasindex = "hasindexes";
				public const string Ispopulated = "ispopulated";
				public const string Matviewname = "matviewname";
				public const string Matviewowner = "matviewowner";
				public const string Schemaname = "schemaname";
				public const string Tablespace = "tablespace";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_matviews")
				{
					Definition = new ColumnDefinition(Constants.Definition, this);
					Hasindex = new ColumnDefinition(Constants.Hasindex, this);
					Ispopulated = new ColumnDefinition(Constants.Ispopulated, this);
					Matviewname = new ColumnDefinition(Constants.Matviewname, this);
					Matviewowner = new ColumnDefinition(Constants.Matviewowner, this);
					Schemaname = new ColumnDefinition(Constants.Schemaname, this);
					Tablespace = new ColumnDefinition(Constants.Tablespace, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Definition { get; private set; }
				public ColumnDefinition Hasindex { get; private set; }
				public ColumnDefinition Ispopulated { get; private set; }
				public ColumnDefinition Matviewname { get; private set; }
				public ColumnDefinition Matviewowner { get; private set; }
				public ColumnDefinition Schemaname { get; private set; }
				public ColumnDefinition Tablespace { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Definition, nameof(PgMatview.Definition) },
					{Constants.Hasindex, nameof(PgMatview.Hasindex) },
					{Constants.Ispopulated, nameof(PgMatview.Ispopulated) },
					{Constants.Matviewname, nameof(PgMatview.Matviewname) },
					{Constants.Matviewowner, nameof(PgMatview.Matviewowner) },
					{Constants.Schemaname, nameof(PgMatview.Schemaname) },
					{Constants.Tablespace, nameof(PgMatview.Tablespace) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgMatview), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}