//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgCursorMapper
		{
			static partial class Constants
			{
				public const string CreationTime = "creation_time";
				public const string IsBinary = "is_binary";
				public const string IsHoldable = "is_holdable";
				public const string IsScrollable = "is_scrollable";
				public const string Name = "name";
				public const string Statement = "statement";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_cursors")
				{
					CreationTime = new ColumnDefinition(Constants.CreationTime, this);
					IsBinary = new ColumnDefinition(Constants.IsBinary, this);
					IsHoldable = new ColumnDefinition(Constants.IsHoldable, this);
					IsScrollable = new ColumnDefinition(Constants.IsScrollable, this);
					Name = new ColumnDefinition(Constants.Name, this);
					Statement = new ColumnDefinition(Constants.Statement, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition CreationTime { get; private set; }
				public ColumnDefinition IsBinary { get; private set; }
				public ColumnDefinition IsHoldable { get; private set; }
				public ColumnDefinition IsScrollable { get; private set; }
				public ColumnDefinition Name { get; private set; }
				public ColumnDefinition Statement { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.CreationTime, nameof(PgCursor.CreationTime) },
					{Constants.IsBinary, nameof(PgCursor.IsBinary) },
					{Constants.IsHoldable, nameof(PgCursor.IsHoldable) },
					{Constants.IsScrollable, nameof(PgCursor.IsScrollable) },
					{Constants.Name, nameof(PgCursor.Name) },
					{Constants.Statement, nameof(PgCursor.Statement) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgCursor), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}