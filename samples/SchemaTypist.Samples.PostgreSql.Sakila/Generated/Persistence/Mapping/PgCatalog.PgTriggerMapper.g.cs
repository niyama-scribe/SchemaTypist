//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgTriggerMapper
		{
			static partial class Constants
			{
				public const string Oid = "oid";
				public const string Tgarg = "tgargs";
				public const string Tgattr = "tgattr";
				public const string Tgconstraint = "tgconstraint";
				public const string Tgconstrindid = "tgconstrindid";
				public const string Tgconstrrelid = "tgconstrrelid";
				public const string Tgdeferrable = "tgdeferrable";
				public const string Tgenabled = "tgenabled";
				public const string Tgfoid = "tgfoid";
				public const string Tginitdeferred = "tginitdeferred";
				public const string Tgisinternal = "tgisinternal";
				public const string Tgname = "tgname";
				public const string Tgnarg = "tgnargs";
				public const string Tgnewtable = "tgnewtable";
				public const string Tgoldtable = "tgoldtable";
				public const string Tgparentid = "tgparentid";
				public const string Tgqual = "tgqual";
				public const string Tgrelid = "tgrelid";
				public const string Tgtype = "tgtype";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_trigger")
				{
					Oid = new ColumnDefinition(Constants.Oid, this);
					Tgarg = new ColumnDefinition(Constants.Tgarg, this);
					Tgattr = new ColumnDefinition(Constants.Tgattr, this);
					Tgconstraint = new ColumnDefinition(Constants.Tgconstraint, this);
					Tgconstrindid = new ColumnDefinition(Constants.Tgconstrindid, this);
					Tgconstrrelid = new ColumnDefinition(Constants.Tgconstrrelid, this);
					Tgdeferrable = new ColumnDefinition(Constants.Tgdeferrable, this);
					Tgenabled = new ColumnDefinition(Constants.Tgenabled, this);
					Tgfoid = new ColumnDefinition(Constants.Tgfoid, this);
					Tginitdeferred = new ColumnDefinition(Constants.Tginitdeferred, this);
					Tgisinternal = new ColumnDefinition(Constants.Tgisinternal, this);
					Tgname = new ColumnDefinition(Constants.Tgname, this);
					Tgnarg = new ColumnDefinition(Constants.Tgnarg, this);
					Tgnewtable = new ColumnDefinition(Constants.Tgnewtable, this);
					Tgoldtable = new ColumnDefinition(Constants.Tgoldtable, this);
					Tgparentid = new ColumnDefinition(Constants.Tgparentid, this);
					Tgqual = new ColumnDefinition(Constants.Tgqual, this);
					Tgrelid = new ColumnDefinition(Constants.Tgrelid, this);
					Tgtype = new ColumnDefinition(Constants.Tgtype, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Oid { get; private set; }
				public ColumnDefinition Tgarg { get; private set; }
				public ColumnDefinition Tgattr { get; private set; }
				public ColumnDefinition Tgconstraint { get; private set; }
				public ColumnDefinition Tgconstrindid { get; private set; }
				public ColumnDefinition Tgconstrrelid { get; private set; }
				public ColumnDefinition Tgdeferrable { get; private set; }
				public ColumnDefinition Tgenabled { get; private set; }
				public ColumnDefinition Tgfoid { get; private set; }
				public ColumnDefinition Tginitdeferred { get; private set; }
				public ColumnDefinition Tgisinternal { get; private set; }
				public ColumnDefinition Tgname { get; private set; }
				public ColumnDefinition Tgnarg { get; private set; }
				public ColumnDefinition Tgnewtable { get; private set; }
				public ColumnDefinition Tgoldtable { get; private set; }
				public ColumnDefinition Tgparentid { get; private set; }
				public ColumnDefinition Tgqual { get; private set; }
				public ColumnDefinition Tgrelid { get; private set; }
				public ColumnDefinition Tgtype { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Oid, nameof(PgTrigger.Oid) },
					{Constants.Tgarg, nameof(PgTrigger.Tgarg) },
					{Constants.Tgattr, nameof(PgTrigger.Tgattr) },
					{Constants.Tgconstraint, nameof(PgTrigger.Tgconstraint) },
					{Constants.Tgconstrindid, nameof(PgTrigger.Tgconstrindid) },
					{Constants.Tgconstrrelid, nameof(PgTrigger.Tgconstrrelid) },
					{Constants.Tgdeferrable, nameof(PgTrigger.Tgdeferrable) },
					{Constants.Tgenabled, nameof(PgTrigger.Tgenabled) },
					{Constants.Tgfoid, nameof(PgTrigger.Tgfoid) },
					{Constants.Tginitdeferred, nameof(PgTrigger.Tginitdeferred) },
					{Constants.Tgisinternal, nameof(PgTrigger.Tgisinternal) },
					{Constants.Tgname, nameof(PgTrigger.Tgname) },
					{Constants.Tgnarg, nameof(PgTrigger.Tgnarg) },
					{Constants.Tgnewtable, nameof(PgTrigger.Tgnewtable) },
					{Constants.Tgoldtable, nameof(PgTrigger.Tgoldtable) },
					{Constants.Tgparentid, nameof(PgTrigger.Tgparentid) },
					{Constants.Tgqual, nameof(PgTrigger.Tgqual) },
					{Constants.Tgrelid, nameof(PgTrigger.Tgrelid) },
					{Constants.Tgtype, nameof(PgTrigger.Tgtype) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgTrigger), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}