//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class InformationSchema
	{
		public static partial class RoutineTableUsageMapper
		{
			static partial class Constants
			{
				public const string RoutineCatalog = "routine_catalog";
				public const string RoutineName = "routine_name";
				public const string RoutineSchema = "routine_schema";
				public const string SpecificCatalog = "specific_catalog";
				public const string SpecificName = "specific_name";
				public const string SpecificSchema = "specific_schema";
				public const string TableCatalog = "table_catalog";
				public const string TableName = "table_name";
				public const string TableSchema = "table_schema";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("information_schema.routine_table_usage")
				{
					RoutineCatalog = new ColumnDefinition(Constants.RoutineCatalog, this);
					RoutineName = new ColumnDefinition(Constants.RoutineName, this);
					RoutineSchema = new ColumnDefinition(Constants.RoutineSchema, this);
					SpecificCatalog = new ColumnDefinition(Constants.SpecificCatalog, this);
					SpecificName = new ColumnDefinition(Constants.SpecificName, this);
					SpecificSchema = new ColumnDefinition(Constants.SpecificSchema, this);
					TableCatalog = new ColumnDefinition(Constants.TableCatalog, this);
					TableName = new ColumnDefinition(Constants.TableName, this);
					TableSchema = new ColumnDefinition(Constants.TableSchema, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition RoutineCatalog { get; private set; }
				public ColumnDefinition RoutineName { get; private set; }
				public ColumnDefinition RoutineSchema { get; private set; }
				public ColumnDefinition SpecificCatalog { get; private set; }
				public ColumnDefinition SpecificName { get; private set; }
				public ColumnDefinition SpecificSchema { get; private set; }
				public ColumnDefinition TableCatalog { get; private set; }
				public ColumnDefinition TableName { get; private set; }
				public ColumnDefinition TableSchema { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.RoutineCatalog, nameof(RoutineTableUsage.RoutineCatalog) },
					{Constants.RoutineName, nameof(RoutineTableUsage.RoutineName) },
					{Constants.RoutineSchema, nameof(RoutineTableUsage.RoutineSchema) },
					{Constants.SpecificCatalog, nameof(RoutineTableUsage.SpecificCatalog) },
					{Constants.SpecificName, nameof(RoutineTableUsage.SpecificName) },
					{Constants.SpecificSchema, nameof(RoutineTableUsage.SpecificSchema) },
					{Constants.TableCatalog, nameof(RoutineTableUsage.TableCatalog) },
					{Constants.TableName, nameof(RoutineTableUsage.TableName) },
					{Constants.TableSchema, nameof(RoutineTableUsage.TableSchema) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(RoutineTableUsage), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}