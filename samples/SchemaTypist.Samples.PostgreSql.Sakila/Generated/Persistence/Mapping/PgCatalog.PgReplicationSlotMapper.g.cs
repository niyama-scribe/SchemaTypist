//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgReplicationSlotMapper
		{
			static partial class Constants
			{
				public const string Active = "active";
				public const string ActivePid = "active_pid";
				public const string CatalogXmin = "catalog_xmin";
				public const string ConfirmedFlushLsn = "confirmed_flush_lsn";
				public const string Database = "database";
				public const string Datoid = "datoid";
				public const string Plugin = "plugin";
				public const string RestartLsn = "restart_lsn";
				public const string SafeWalSize = "safe_wal_size";
				public const string SlotName = "slot_name";
				public const string SlotType = "slot_type";
				public const string Temporary = "temporary";
				public const string TwoPhase = "two_phase";
				public const string WalStatus = "wal_status";
				public const string Xmin = "xmin";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_replication_slots")
				{
					Active = new ColumnDefinition(Constants.Active, this);
					ActivePid = new ColumnDefinition(Constants.ActivePid, this);
					CatalogXmin = new ColumnDefinition(Constants.CatalogXmin, this);
					ConfirmedFlushLsn = new ColumnDefinition(Constants.ConfirmedFlushLsn, this);
					Database = new ColumnDefinition(Constants.Database, this);
					Datoid = new ColumnDefinition(Constants.Datoid, this);
					Plugin = new ColumnDefinition(Constants.Plugin, this);
					RestartLsn = new ColumnDefinition(Constants.RestartLsn, this);
					SafeWalSize = new ColumnDefinition(Constants.SafeWalSize, this);
					SlotName = new ColumnDefinition(Constants.SlotName, this);
					SlotType = new ColumnDefinition(Constants.SlotType, this);
					Temporary = new ColumnDefinition(Constants.Temporary, this);
					TwoPhase = new ColumnDefinition(Constants.TwoPhase, this);
					WalStatus = new ColumnDefinition(Constants.WalStatus, this);
					Xmin = new ColumnDefinition(Constants.Xmin, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Active { get; private set; }
				public ColumnDefinition ActivePid { get; private set; }
				public ColumnDefinition CatalogXmin { get; private set; }
				public ColumnDefinition ConfirmedFlushLsn { get; private set; }
				public ColumnDefinition Database { get; private set; }
				public ColumnDefinition Datoid { get; private set; }
				public ColumnDefinition Plugin { get; private set; }
				public ColumnDefinition RestartLsn { get; private set; }
				public ColumnDefinition SafeWalSize { get; private set; }
				public ColumnDefinition SlotName { get; private set; }
				public ColumnDefinition SlotType { get; private set; }
				public ColumnDefinition Temporary { get; private set; }
				public ColumnDefinition TwoPhase { get; private set; }
				public ColumnDefinition WalStatus { get; private set; }
				public ColumnDefinition Xmin { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Active, nameof(PgReplicationSlot.Active) },
					{Constants.ActivePid, nameof(PgReplicationSlot.ActivePid) },
					{Constants.CatalogXmin, nameof(PgReplicationSlot.CatalogXmin) },
					{Constants.ConfirmedFlushLsn, nameof(PgReplicationSlot.ConfirmedFlushLsn) },
					{Constants.Database, nameof(PgReplicationSlot.Database) },
					{Constants.Datoid, nameof(PgReplicationSlot.Datoid) },
					{Constants.Plugin, nameof(PgReplicationSlot.Plugin) },
					{Constants.RestartLsn, nameof(PgReplicationSlot.RestartLsn) },
					{Constants.SafeWalSize, nameof(PgReplicationSlot.SafeWalSize) },
					{Constants.SlotName, nameof(PgReplicationSlot.SlotName) },
					{Constants.SlotType, nameof(PgReplicationSlot.SlotType) },
					{Constants.Temporary, nameof(PgReplicationSlot.Temporary) },
					{Constants.TwoPhase, nameof(PgReplicationSlot.TwoPhase) },
					{Constants.WalStatus, nameof(PgReplicationSlot.WalStatus) },
					{Constants.Xmin, nameof(PgReplicationSlot.Xmin) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgReplicationSlot), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}