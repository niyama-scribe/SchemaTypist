//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgTsConfigMapper
		{
			static partial class Constants
			{
				public const string Cfgname = "cfgname";
				public const string Cfgnamespace = "cfgnamespace";
				public const string Cfgowner = "cfgowner";
				public const string Cfgparser = "cfgparser";
				public const string Oid = "oid";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_ts_config")
				{
					Cfgname = new ColumnDefinition(Constants.Cfgname, this);
					Cfgnamespace = new ColumnDefinition(Constants.Cfgnamespace, this);
					Cfgowner = new ColumnDefinition(Constants.Cfgowner, this);
					Cfgparser = new ColumnDefinition(Constants.Cfgparser, this);
					Oid = new ColumnDefinition(Constants.Oid, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Cfgname { get; private set; }
				public ColumnDefinition Cfgnamespace { get; private set; }
				public ColumnDefinition Cfgowner { get; private set; }
				public ColumnDefinition Cfgparser { get; private set; }
				public ColumnDefinition Oid { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Cfgname, nameof(PgTsConfig.Cfgname) },
					{Constants.Cfgnamespace, nameof(PgTsConfig.Cfgnamespace) },
					{Constants.Cfgowner, nameof(PgTsConfig.Cfgowner) },
					{Constants.Cfgparser, nameof(PgTsConfig.Cfgparser) },
					{Constants.Oid, nameof(PgTsConfig.Oid) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgTsConfig), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}