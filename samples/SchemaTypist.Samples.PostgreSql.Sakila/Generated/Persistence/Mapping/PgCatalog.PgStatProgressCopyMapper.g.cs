//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgStatProgressCopyMapper
		{
			static partial class Constants
			{
				public const string BytesProcessed = "bytes_processed";
				public const string BytesTotal = "bytes_total";
				public const string Command = "command";
				public const string Datid = "datid";
				public const string Datname = "datname";
				public const string Pid = "pid";
				public const string Relid = "relid";
				public const string TuplesExcluded = "tuples_excluded";
				public const string TuplesProcessed = "tuples_processed";
				public const string Type = "type";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_stat_progress_copy")
				{
					BytesProcessed = new ColumnDefinition(Constants.BytesProcessed, this);
					BytesTotal = new ColumnDefinition(Constants.BytesTotal, this);
					Command = new ColumnDefinition(Constants.Command, this);
					Datid = new ColumnDefinition(Constants.Datid, this);
					Datname = new ColumnDefinition(Constants.Datname, this);
					Pid = new ColumnDefinition(Constants.Pid, this);
					Relid = new ColumnDefinition(Constants.Relid, this);
					TuplesExcluded = new ColumnDefinition(Constants.TuplesExcluded, this);
					TuplesProcessed = new ColumnDefinition(Constants.TuplesProcessed, this);
					Type = new ColumnDefinition(Constants.Type, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition BytesProcessed { get; private set; }
				public ColumnDefinition BytesTotal { get; private set; }
				public ColumnDefinition Command { get; private set; }
				public ColumnDefinition Datid { get; private set; }
				public ColumnDefinition Datname { get; private set; }
				public ColumnDefinition Pid { get; private set; }
				public ColumnDefinition Relid { get; private set; }
				public ColumnDefinition TuplesExcluded { get; private set; }
				public ColumnDefinition TuplesProcessed { get; private set; }
				public ColumnDefinition Type { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.BytesProcessed, nameof(PgStatProgressCopy.BytesProcessed) },
					{Constants.BytesTotal, nameof(PgStatProgressCopy.BytesTotal) },
					{Constants.Command, nameof(PgStatProgressCopy.Command) },
					{Constants.Datid, nameof(PgStatProgressCopy.Datid) },
					{Constants.Datname, nameof(PgStatProgressCopy.Datname) },
					{Constants.Pid, nameof(PgStatProgressCopy.Pid) },
					{Constants.Relid, nameof(PgStatProgressCopy.Relid) },
					{Constants.TuplesExcluded, nameof(PgStatProgressCopy.TuplesExcluded) },
					{Constants.TuplesProcessed, nameof(PgStatProgressCopy.TuplesProcessed) },
					{Constants.Type, nameof(PgStatProgressCopy.Type) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgStatProgressCopy), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}