//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class InformationSchema
	{
		public static partial class ViewMapper
		{
			static partial class Constants
			{
				public const string CheckOption = "check_option";
				public const string IsInsertableInto = "is_insertable_into";
				public const string IsTriggerDeletable = "is_trigger_deletable";
				public const string IsTriggerInsertableInto = "is_trigger_insertable_into";
				public const string IsTriggerUpdatable = "is_trigger_updatable";
				public const string IsUpdatable = "is_updatable";
				public const string TableCatalog = "table_catalog";
				public const string TableName = "table_name";
				public const string TableSchema = "table_schema";
				public const string ViewDefinition = "view_definition";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("information_schema.views")
				{
					CheckOption = new ColumnDefinition(Constants.CheckOption, this);
					IsInsertableInto = new ColumnDefinition(Constants.IsInsertableInto, this);
					IsTriggerDeletable = new ColumnDefinition(Constants.IsTriggerDeletable, this);
					IsTriggerInsertableInto = new ColumnDefinition(Constants.IsTriggerInsertableInto, this);
					IsTriggerUpdatable = new ColumnDefinition(Constants.IsTriggerUpdatable, this);
					IsUpdatable = new ColumnDefinition(Constants.IsUpdatable, this);
					TableCatalog = new ColumnDefinition(Constants.TableCatalog, this);
					TableName = new ColumnDefinition(Constants.TableName, this);
					TableSchema = new ColumnDefinition(Constants.TableSchema, this);
					ViewDefinition = new ColumnDefinition(Constants.ViewDefinition, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition CheckOption { get; private set; }
				public ColumnDefinition IsInsertableInto { get; private set; }
				public ColumnDefinition IsTriggerDeletable { get; private set; }
				public ColumnDefinition IsTriggerInsertableInto { get; private set; }
				public ColumnDefinition IsTriggerUpdatable { get; private set; }
				public ColumnDefinition IsUpdatable { get; private set; }
				public ColumnDefinition TableCatalog { get; private set; }
				public ColumnDefinition TableName { get; private set; }
				public ColumnDefinition TableSchema { get; private set; }
				public ColumnDefinition ViewDefinition { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.CheckOption, nameof(View.CheckOption) },
					{Constants.IsInsertableInto, nameof(View.IsInsertableInto) },
					{Constants.IsTriggerDeletable, nameof(View.IsTriggerDeletable) },
					{Constants.IsTriggerInsertableInto, nameof(View.IsTriggerInsertableInto) },
					{Constants.IsTriggerUpdatable, nameof(View.IsTriggerUpdatable) },
					{Constants.IsUpdatable, nameof(View.IsUpdatable) },
					{Constants.TableCatalog, nameof(View.TableCatalog) },
					{Constants.TableName, nameof(View.TableName) },
					{Constants.TableSchema, nameof(View.TableSchema) },
					{Constants.ViewDefinition, nameof(View.ViewDefinition) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(View), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}