//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgSubscriptionRelMapper
		{
			static partial class Constants
			{
				public const string Srrelid = "srrelid";
				public const string Srsubid = "srsubid";
				public const string Srsublsn = "srsublsn";
				public const string Srsubstate = "srsubstate";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_subscription_rel")
				{
					Srrelid = new ColumnDefinition(Constants.Srrelid, this);
					Srsubid = new ColumnDefinition(Constants.Srsubid, this);
					Srsublsn = new ColumnDefinition(Constants.Srsublsn, this);
					Srsubstate = new ColumnDefinition(Constants.Srsubstate, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Srrelid { get; private set; }
				public ColumnDefinition Srsubid { get; private set; }
				public ColumnDefinition Srsublsn { get; private set; }
				public ColumnDefinition Srsubstate { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Srrelid, nameof(PgSubscriptionRel.Srrelid) },
					{Constants.Srsubid, nameof(PgSubscriptionRel.Srsubid) },
					{Constants.Srsublsn, nameof(PgSubscriptionRel.Srsublsn) },
					{Constants.Srsubstate, nameof(PgSubscriptionRel.Srsubstate) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgSubscriptionRel), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}