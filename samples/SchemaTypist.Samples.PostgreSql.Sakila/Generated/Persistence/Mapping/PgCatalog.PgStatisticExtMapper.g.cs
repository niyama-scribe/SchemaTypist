//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgStatisticExtMapper
		{
			static partial class Constants
			{
				public const string Oid = "oid";
				public const string Stxexpr = "stxexprs";
				public const string Stxkey = "stxkeys";
				public const string Stxkind = "stxkind";
				public const string Stxname = "stxname";
				public const string Stxnamespace = "stxnamespace";
				public const string Stxowner = "stxowner";
				public const string Stxrelid = "stxrelid";
				public const string Stxstattarget = "stxstattarget";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_statistic_ext")
				{
					Oid = new ColumnDefinition(Constants.Oid, this);
					Stxexpr = new ColumnDefinition(Constants.Stxexpr, this);
					Stxkey = new ColumnDefinition(Constants.Stxkey, this);
					Stxkind = new ColumnDefinition(Constants.Stxkind, this);
					Stxname = new ColumnDefinition(Constants.Stxname, this);
					Stxnamespace = new ColumnDefinition(Constants.Stxnamespace, this);
					Stxowner = new ColumnDefinition(Constants.Stxowner, this);
					Stxrelid = new ColumnDefinition(Constants.Stxrelid, this);
					Stxstattarget = new ColumnDefinition(Constants.Stxstattarget, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Oid { get; private set; }
				public ColumnDefinition Stxexpr { get; private set; }
				public ColumnDefinition Stxkey { get; private set; }
				public ColumnDefinition Stxkind { get; private set; }
				public ColumnDefinition Stxname { get; private set; }
				public ColumnDefinition Stxnamespace { get; private set; }
				public ColumnDefinition Stxowner { get; private set; }
				public ColumnDefinition Stxrelid { get; private set; }
				public ColumnDefinition Stxstattarget { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Oid, nameof(PgStatisticExt.Oid) },
					{Constants.Stxexpr, nameof(PgStatisticExt.Stxexpr) },
					{Constants.Stxkey, nameof(PgStatisticExt.Stxkey) },
					{Constants.Stxkind, nameof(PgStatisticExt.Stxkind) },
					{Constants.Stxname, nameof(PgStatisticExt.Stxname) },
					{Constants.Stxnamespace, nameof(PgStatisticExt.Stxnamespace) },
					{Constants.Stxowner, nameof(PgStatisticExt.Stxowner) },
					{Constants.Stxrelid, nameof(PgStatisticExt.Stxrelid) },
					{Constants.Stxstattarget, nameof(PgStatisticExt.Stxstattarget) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgStatisticExt), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}