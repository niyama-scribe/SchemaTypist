//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgBackendMemoryContextMapper
		{
			static partial class Constants
			{
				public const string FreeByte = "free_bytes";
				public const string FreeChunk = "free_chunks";
				public const string Ident = "ident";
				public const string Level = "level";
				public const string Name = "name";
				public const string Parent = "parent";
				public const string TotalByte = "total_bytes";
				public const string TotalNblock = "total_nblocks";
				public const string UsedByte = "used_bytes";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_backend_memory_contexts")
				{
					FreeByte = new ColumnDefinition(Constants.FreeByte, this);
					FreeChunk = new ColumnDefinition(Constants.FreeChunk, this);
					Ident = new ColumnDefinition(Constants.Ident, this);
					Level = new ColumnDefinition(Constants.Level, this);
					Name = new ColumnDefinition(Constants.Name, this);
					Parent = new ColumnDefinition(Constants.Parent, this);
					TotalByte = new ColumnDefinition(Constants.TotalByte, this);
					TotalNblock = new ColumnDefinition(Constants.TotalNblock, this);
					UsedByte = new ColumnDefinition(Constants.UsedByte, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition FreeByte { get; private set; }
				public ColumnDefinition FreeChunk { get; private set; }
				public ColumnDefinition Ident { get; private set; }
				public ColumnDefinition Level { get; private set; }
				public ColumnDefinition Name { get; private set; }
				public ColumnDefinition Parent { get; private set; }
				public ColumnDefinition TotalByte { get; private set; }
				public ColumnDefinition TotalNblock { get; private set; }
				public ColumnDefinition UsedByte { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.FreeByte, nameof(PgBackendMemoryContext.FreeByte) },
					{Constants.FreeChunk, nameof(PgBackendMemoryContext.FreeChunk) },
					{Constants.Ident, nameof(PgBackendMemoryContext.Ident) },
					{Constants.Level, nameof(PgBackendMemoryContext.Level) },
					{Constants.Name, nameof(PgBackendMemoryContext.Name) },
					{Constants.Parent, nameof(PgBackendMemoryContext.Parent) },
					{Constants.TotalByte, nameof(PgBackendMemoryContext.TotalByte) },
					{Constants.TotalNblock, nameof(PgBackendMemoryContext.TotalNblock) },
					{Constants.UsedByte, nameof(PgBackendMemoryContext.UsedByte) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgBackendMemoryContext), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}