//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgStatMapper
		{
			static partial class Constants
			{
				public const string Attname = "attname";
				public const string AvgWidth = "avg_width";
				public const string Correlation = "correlation";
				public const string ElemCountHistogram = "elem_count_histogram";
				public const string HistogramBound = "histogram_bounds";
				public const string Inherited = "inherited";
				public const string MostCommonElemFreq = "most_common_elem_freqs";
				public const string MostCommonElem = "most_common_elems";
				public const string MostCommonFreq = "most_common_freqs";
				public const string MostCommonVal = "most_common_vals";
				public const string NDistinct = "n_distinct";
				public const string NullFrac = "null_frac";
				public const string Schemaname = "schemaname";
				public const string Tablename = "tablename";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_stats")
				{
					Attname = new ColumnDefinition(Constants.Attname, this);
					AvgWidth = new ColumnDefinition(Constants.AvgWidth, this);
					Correlation = new ColumnDefinition(Constants.Correlation, this);
					ElemCountHistogram = new ColumnDefinition(Constants.ElemCountHistogram, this);
					HistogramBound = new ColumnDefinition(Constants.HistogramBound, this);
					Inherited = new ColumnDefinition(Constants.Inherited, this);
					MostCommonElemFreq = new ColumnDefinition(Constants.MostCommonElemFreq, this);
					MostCommonElem = new ColumnDefinition(Constants.MostCommonElem, this);
					MostCommonFreq = new ColumnDefinition(Constants.MostCommonFreq, this);
					MostCommonVal = new ColumnDefinition(Constants.MostCommonVal, this);
					NDistinct = new ColumnDefinition(Constants.NDistinct, this);
					NullFrac = new ColumnDefinition(Constants.NullFrac, this);
					Schemaname = new ColumnDefinition(Constants.Schemaname, this);
					Tablename = new ColumnDefinition(Constants.Tablename, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Attname { get; private set; }
				public ColumnDefinition AvgWidth { get; private set; }
				public ColumnDefinition Correlation { get; private set; }
				public ColumnDefinition ElemCountHistogram { get; private set; }
				public ColumnDefinition HistogramBound { get; private set; }
				public ColumnDefinition Inherited { get; private set; }
				public ColumnDefinition MostCommonElemFreq { get; private set; }
				public ColumnDefinition MostCommonElem { get; private set; }
				public ColumnDefinition MostCommonFreq { get; private set; }
				public ColumnDefinition MostCommonVal { get; private set; }
				public ColumnDefinition NDistinct { get; private set; }
				public ColumnDefinition NullFrac { get; private set; }
				public ColumnDefinition Schemaname { get; private set; }
				public ColumnDefinition Tablename { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Attname, nameof(PgStat.Attname) },
					{Constants.AvgWidth, nameof(PgStat.AvgWidth) },
					{Constants.Correlation, nameof(PgStat.Correlation) },
					{Constants.ElemCountHistogram, nameof(PgStat.ElemCountHistogram) },
					{Constants.HistogramBound, nameof(PgStat.HistogramBound) },
					{Constants.Inherited, nameof(PgStat.Inherited) },
					{Constants.MostCommonElemFreq, nameof(PgStat.MostCommonElemFreq) },
					{Constants.MostCommonElem, nameof(PgStat.MostCommonElem) },
					{Constants.MostCommonFreq, nameof(PgStat.MostCommonFreq) },
					{Constants.MostCommonVal, nameof(PgStat.MostCommonVal) },
					{Constants.NDistinct, nameof(PgStat.NDistinct) },
					{Constants.NullFrac, nameof(PgStat.NullFrac) },
					{Constants.Schemaname, nameof(PgStat.Schemaname) },
					{Constants.Tablename, nameof(PgStat.Tablename) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgStat), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}