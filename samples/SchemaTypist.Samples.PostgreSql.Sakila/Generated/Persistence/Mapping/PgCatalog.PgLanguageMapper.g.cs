//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgLanguageMapper
		{
			static partial class Constants
			{
				public const string Lanacl = "lanacl";
				public const string Laninline = "laninline";
				public const string Lanispl = "lanispl";
				public const string Lanname = "lanname";
				public const string Lanowner = "lanowner";
				public const string Lanplcallfoid = "lanplcallfoid";
				public const string Lanpltrusted = "lanpltrusted";
				public const string Lanvalidator = "lanvalidator";
				public const string Oid = "oid";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_language")
				{
					Lanacl = new ColumnDefinition(Constants.Lanacl, this);
					Laninline = new ColumnDefinition(Constants.Laninline, this);
					Lanispl = new ColumnDefinition(Constants.Lanispl, this);
					Lanname = new ColumnDefinition(Constants.Lanname, this);
					Lanowner = new ColumnDefinition(Constants.Lanowner, this);
					Lanplcallfoid = new ColumnDefinition(Constants.Lanplcallfoid, this);
					Lanpltrusted = new ColumnDefinition(Constants.Lanpltrusted, this);
					Lanvalidator = new ColumnDefinition(Constants.Lanvalidator, this);
					Oid = new ColumnDefinition(Constants.Oid, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Lanacl { get; private set; }
				public ColumnDefinition Laninline { get; private set; }
				public ColumnDefinition Lanispl { get; private set; }
				public ColumnDefinition Lanname { get; private set; }
				public ColumnDefinition Lanowner { get; private set; }
				public ColumnDefinition Lanplcallfoid { get; private set; }
				public ColumnDefinition Lanpltrusted { get; private set; }
				public ColumnDefinition Lanvalidator { get; private set; }
				public ColumnDefinition Oid { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Lanacl, nameof(PgLanguage.Lanacl) },
					{Constants.Laninline, nameof(PgLanguage.Laninline) },
					{Constants.Lanispl, nameof(PgLanguage.Lanispl) },
					{Constants.Lanname, nameof(PgLanguage.Lanname) },
					{Constants.Lanowner, nameof(PgLanguage.Lanowner) },
					{Constants.Lanplcallfoid, nameof(PgLanguage.Lanplcallfoid) },
					{Constants.Lanpltrusted, nameof(PgLanguage.Lanpltrusted) },
					{Constants.Lanvalidator, nameof(PgLanguage.Lanvalidator) },
					{Constants.Oid, nameof(PgLanguage.Oid) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgLanguage), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}