//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class InformationSchema
	{
		public static partial class ColumnDomainUsageMapper
		{
			static partial class Constants
			{
				public const string ColumnName = "column_name";
				public const string DomainCatalog = "domain_catalog";
				public const string DomainName = "domain_name";
				public const string DomainSchema = "domain_schema";
				public const string TableCatalog = "table_catalog";
				public const string TableName = "table_name";
				public const string TableSchema = "table_schema";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("information_schema.column_domain_usage")
				{
					ColumnName = new ColumnDefinition(Constants.ColumnName, this);
					DomainCatalog = new ColumnDefinition(Constants.DomainCatalog, this);
					DomainName = new ColumnDefinition(Constants.DomainName, this);
					DomainSchema = new ColumnDefinition(Constants.DomainSchema, this);
					TableCatalog = new ColumnDefinition(Constants.TableCatalog, this);
					TableName = new ColumnDefinition(Constants.TableName, this);
					TableSchema = new ColumnDefinition(Constants.TableSchema, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition ColumnName { get; private set; }
				public ColumnDefinition DomainCatalog { get; private set; }
				public ColumnDefinition DomainName { get; private set; }
				public ColumnDefinition DomainSchema { get; private set; }
				public ColumnDefinition TableCatalog { get; private set; }
				public ColumnDefinition TableName { get; private set; }
				public ColumnDefinition TableSchema { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.ColumnName, nameof(ColumnDomainUsage.ColumnName) },
					{Constants.DomainCatalog, nameof(ColumnDomainUsage.DomainCatalog) },
					{Constants.DomainName, nameof(ColumnDomainUsage.DomainName) },
					{Constants.DomainSchema, nameof(ColumnDomainUsage.DomainSchema) },
					{Constants.TableCatalog, nameof(ColumnDomainUsage.TableCatalog) },
					{Constants.TableName, nameof(ColumnDomainUsage.TableName) },
					{Constants.TableSchema, nameof(ColumnDomainUsage.TableSchema) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(ColumnDomainUsage), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}