//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgUserMappingMapper
		{
			static partial class Constants
			{
				public const string Srvid = "srvid";
				public const string Srvname = "srvname";
				public const string Umid = "umid";
				public const string Umoption = "umoptions";
				public const string Umuser = "umuser";
				public const string Usename = "usename";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_user_mappings")
				{
					Srvid = new ColumnDefinition(Constants.Srvid, this);
					Srvname = new ColumnDefinition(Constants.Srvname, this);
					Umid = new ColumnDefinition(Constants.Umid, this);
					Umoption = new ColumnDefinition(Constants.Umoption, this);
					Umuser = new ColumnDefinition(Constants.Umuser, this);
					Usename = new ColumnDefinition(Constants.Usename, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Srvid { get; private set; }
				public ColumnDefinition Srvname { get; private set; }
				public ColumnDefinition Umid { get; private set; }
				public ColumnDefinition Umoption { get; private set; }
				public ColumnDefinition Umuser { get; private set; }
				public ColumnDefinition Usename { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Srvid, nameof(PgUserMapping.Srvid) },
					{Constants.Srvname, nameof(PgUserMapping.Srvname) },
					{Constants.Umid, nameof(PgUserMapping.Umid) },
					{Constants.Umoption, nameof(PgUserMapping.Umoption) },
					{Constants.Umuser, nameof(PgUserMapping.Umuser) },
					{Constants.Usename, nameof(PgUserMapping.Usename) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgUserMapping), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}