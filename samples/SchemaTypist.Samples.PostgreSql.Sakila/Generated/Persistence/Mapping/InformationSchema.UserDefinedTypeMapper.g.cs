//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class InformationSchema
	{
		public static partial class UserDefinedTypeMapper
		{
			static partial class Constants
			{
				public const string CharacterMaximumLength = "character_maximum_length";
				public const string CharacterOctetLength = "character_octet_length";
				public const string CharacterSetCatalog = "character_set_catalog";
				public const string CharacterSetName = "character_set_name";
				public const string CharacterSetSchema = "character_set_schema";
				public const string CollationCatalog = "collation_catalog";
				public const string CollationName = "collation_name";
				public const string CollationSchema = "collation_schema";
				public const string DataType = "data_type";
				public const string DatetimePrecision = "datetime_precision";
				public const string IntervalPrecision = "interval_precision";
				public const string IntervalType = "interval_type";
				public const string IsFinal = "is_final";
				public const string IsInstantiable = "is_instantiable";
				public const string NumericPrecision = "numeric_precision";
				public const string NumericPrecisionRadix = "numeric_precision_radix";
				public const string NumericScale = "numeric_scale";
				public const string OrderingCategory = "ordering_category";
				public const string OrderingForm = "ordering_form";
				public const string OrderingRoutineCatalog = "ordering_routine_catalog";
				public const string OrderingRoutineName = "ordering_routine_name";
				public const string OrderingRoutineSchema = "ordering_routine_schema";
				public const string RefDtdIdentifier = "ref_dtd_identifier";
				public const string ReferenceType = "reference_type";
				public const string SourceDtdIdentifier = "source_dtd_identifier";
				public const string UserDefinedTypeCatalog = "user_defined_type_catalog";
				public const string UserDefinedTypeCategory = "user_defined_type_category";
				public const string UserDefinedTypeName = "user_defined_type_name";
				public const string UserDefinedTypeSchema = "user_defined_type_schema";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("information_schema.user_defined_types")
				{
					CharacterMaximumLength = new ColumnDefinition(Constants.CharacterMaximumLength, this);
					CharacterOctetLength = new ColumnDefinition(Constants.CharacterOctetLength, this);
					CharacterSetCatalog = new ColumnDefinition(Constants.CharacterSetCatalog, this);
					CharacterSetName = new ColumnDefinition(Constants.CharacterSetName, this);
					CharacterSetSchema = new ColumnDefinition(Constants.CharacterSetSchema, this);
					CollationCatalog = new ColumnDefinition(Constants.CollationCatalog, this);
					CollationName = new ColumnDefinition(Constants.CollationName, this);
					CollationSchema = new ColumnDefinition(Constants.CollationSchema, this);
					DataType = new ColumnDefinition(Constants.DataType, this);
					DatetimePrecision = new ColumnDefinition(Constants.DatetimePrecision, this);
					IntervalPrecision = new ColumnDefinition(Constants.IntervalPrecision, this);
					IntervalType = new ColumnDefinition(Constants.IntervalType, this);
					IsFinal = new ColumnDefinition(Constants.IsFinal, this);
					IsInstantiable = new ColumnDefinition(Constants.IsInstantiable, this);
					NumericPrecision = new ColumnDefinition(Constants.NumericPrecision, this);
					NumericPrecisionRadix = new ColumnDefinition(Constants.NumericPrecisionRadix, this);
					NumericScale = new ColumnDefinition(Constants.NumericScale, this);
					OrderingCategory = new ColumnDefinition(Constants.OrderingCategory, this);
					OrderingForm = new ColumnDefinition(Constants.OrderingForm, this);
					OrderingRoutineCatalog = new ColumnDefinition(Constants.OrderingRoutineCatalog, this);
					OrderingRoutineName = new ColumnDefinition(Constants.OrderingRoutineName, this);
					OrderingRoutineSchema = new ColumnDefinition(Constants.OrderingRoutineSchema, this);
					RefDtdIdentifier = new ColumnDefinition(Constants.RefDtdIdentifier, this);
					ReferenceType = new ColumnDefinition(Constants.ReferenceType, this);
					SourceDtdIdentifier = new ColumnDefinition(Constants.SourceDtdIdentifier, this);
					UserDefinedTypeCatalog = new ColumnDefinition(Constants.UserDefinedTypeCatalog, this);
					UserDefinedTypeCategory = new ColumnDefinition(Constants.UserDefinedTypeCategory, this);
					UserDefinedTypeName = new ColumnDefinition(Constants.UserDefinedTypeName, this);
					UserDefinedTypeSchema = new ColumnDefinition(Constants.UserDefinedTypeSchema, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition CharacterMaximumLength { get; private set; }
				public ColumnDefinition CharacterOctetLength { get; private set; }
				public ColumnDefinition CharacterSetCatalog { get; private set; }
				public ColumnDefinition CharacterSetName { get; private set; }
				public ColumnDefinition CharacterSetSchema { get; private set; }
				public ColumnDefinition CollationCatalog { get; private set; }
				public ColumnDefinition CollationName { get; private set; }
				public ColumnDefinition CollationSchema { get; private set; }
				public ColumnDefinition DataType { get; private set; }
				public ColumnDefinition DatetimePrecision { get; private set; }
				public ColumnDefinition IntervalPrecision { get; private set; }
				public ColumnDefinition IntervalType { get; private set; }
				public ColumnDefinition IsFinal { get; private set; }
				public ColumnDefinition IsInstantiable { get; private set; }
				public ColumnDefinition NumericPrecision { get; private set; }
				public ColumnDefinition NumericPrecisionRadix { get; private set; }
				public ColumnDefinition NumericScale { get; private set; }
				public ColumnDefinition OrderingCategory { get; private set; }
				public ColumnDefinition OrderingForm { get; private set; }
				public ColumnDefinition OrderingRoutineCatalog { get; private set; }
				public ColumnDefinition OrderingRoutineName { get; private set; }
				public ColumnDefinition OrderingRoutineSchema { get; private set; }
				public ColumnDefinition RefDtdIdentifier { get; private set; }
				public ColumnDefinition ReferenceType { get; private set; }
				public ColumnDefinition SourceDtdIdentifier { get; private set; }
				public ColumnDefinition UserDefinedTypeCatalog { get; private set; }
				public ColumnDefinition UserDefinedTypeCategory { get; private set; }
				public ColumnDefinition UserDefinedTypeName { get; private set; }
				public ColumnDefinition UserDefinedTypeSchema { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.CharacterMaximumLength, nameof(UserDefinedType.CharacterMaximumLength) },
					{Constants.CharacterOctetLength, nameof(UserDefinedType.CharacterOctetLength) },
					{Constants.CharacterSetCatalog, nameof(UserDefinedType.CharacterSetCatalog) },
					{Constants.CharacterSetName, nameof(UserDefinedType.CharacterSetName) },
					{Constants.CharacterSetSchema, nameof(UserDefinedType.CharacterSetSchema) },
					{Constants.CollationCatalog, nameof(UserDefinedType.CollationCatalog) },
					{Constants.CollationName, nameof(UserDefinedType.CollationName) },
					{Constants.CollationSchema, nameof(UserDefinedType.CollationSchema) },
					{Constants.DataType, nameof(UserDefinedType.DataType) },
					{Constants.DatetimePrecision, nameof(UserDefinedType.DatetimePrecision) },
					{Constants.IntervalPrecision, nameof(UserDefinedType.IntervalPrecision) },
					{Constants.IntervalType, nameof(UserDefinedType.IntervalType) },
					{Constants.IsFinal, nameof(UserDefinedType.IsFinal) },
					{Constants.IsInstantiable, nameof(UserDefinedType.IsInstantiable) },
					{Constants.NumericPrecision, nameof(UserDefinedType.NumericPrecision) },
					{Constants.NumericPrecisionRadix, nameof(UserDefinedType.NumericPrecisionRadix) },
					{Constants.NumericScale, nameof(UserDefinedType.NumericScale) },
					{Constants.OrderingCategory, nameof(UserDefinedType.OrderingCategory) },
					{Constants.OrderingForm, nameof(UserDefinedType.OrderingForm) },
					{Constants.OrderingRoutineCatalog, nameof(UserDefinedType.OrderingRoutineCatalog) },
					{Constants.OrderingRoutineName, nameof(UserDefinedType.OrderingRoutineName) },
					{Constants.OrderingRoutineSchema, nameof(UserDefinedType.OrderingRoutineSchema) },
					{Constants.RefDtdIdentifier, nameof(UserDefinedType.RefDtdIdentifier) },
					{Constants.ReferenceType, nameof(UserDefinedType.ReferenceType) },
					{Constants.SourceDtdIdentifier, nameof(UserDefinedType.SourceDtdIdentifier) },
					{Constants.UserDefinedTypeCatalog, nameof(UserDefinedType.UserDefinedTypeCatalog) },
					{Constants.UserDefinedTypeCategory, nameof(UserDefinedType.UserDefinedTypeCategory) },
					{Constants.UserDefinedTypeName, nameof(UserDefinedType.UserDefinedTypeName) },
					{Constants.UserDefinedTypeSchema, nameof(UserDefinedType.UserDefinedTypeSchema) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(UserDefinedType), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}