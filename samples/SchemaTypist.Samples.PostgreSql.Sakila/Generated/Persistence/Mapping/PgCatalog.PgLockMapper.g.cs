//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgLockMapper
		{
			static partial class Constants
			{
				public const string Classid = "classid";
				public const string Database = "database";
				public const string Fastpath = "fastpath";
				public const string Granted = "granted";
				public const string Locktype = "locktype";
				public const string Mode = "mode";
				public const string Objid = "objid";
				public const string Objsubid = "objsubid";
				public const string Page = "page";
				public const string Pid = "pid";
				public const string Relation = "relation";
				public const string Transactionid = "transactionid";
				public const string Tuple = "tuple";
				public const string Virtualtransaction = "virtualtransaction";
				public const string Virtualxid = "virtualxid";
				public const string Waitstart = "waitstart";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_locks")
				{
					Classid = new ColumnDefinition(Constants.Classid, this);
					Database = new ColumnDefinition(Constants.Database, this);
					Fastpath = new ColumnDefinition(Constants.Fastpath, this);
					Granted = new ColumnDefinition(Constants.Granted, this);
					Locktype = new ColumnDefinition(Constants.Locktype, this);
					Mode = new ColumnDefinition(Constants.Mode, this);
					Objid = new ColumnDefinition(Constants.Objid, this);
					Objsubid = new ColumnDefinition(Constants.Objsubid, this);
					Page = new ColumnDefinition(Constants.Page, this);
					Pid = new ColumnDefinition(Constants.Pid, this);
					Relation = new ColumnDefinition(Constants.Relation, this);
					Transactionid = new ColumnDefinition(Constants.Transactionid, this);
					Tuple = new ColumnDefinition(Constants.Tuple, this);
					Virtualtransaction = new ColumnDefinition(Constants.Virtualtransaction, this);
					Virtualxid = new ColumnDefinition(Constants.Virtualxid, this);
					Waitstart = new ColumnDefinition(Constants.Waitstart, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Classid { get; private set; }
				public ColumnDefinition Database { get; private set; }
				public ColumnDefinition Fastpath { get; private set; }
				public ColumnDefinition Granted { get; private set; }
				public ColumnDefinition Locktype { get; private set; }
				public ColumnDefinition Mode { get; private set; }
				public ColumnDefinition Objid { get; private set; }
				public ColumnDefinition Objsubid { get; private set; }
				public ColumnDefinition Page { get; private set; }
				public ColumnDefinition Pid { get; private set; }
				public ColumnDefinition Relation { get; private set; }
				public ColumnDefinition Transactionid { get; private set; }
				public ColumnDefinition Tuple { get; private set; }
				public ColumnDefinition Virtualtransaction { get; private set; }
				public ColumnDefinition Virtualxid { get; private set; }
				public ColumnDefinition Waitstart { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Classid, nameof(PgLock.Classid) },
					{Constants.Database, nameof(PgLock.Database) },
					{Constants.Fastpath, nameof(PgLock.Fastpath) },
					{Constants.Granted, nameof(PgLock.Granted) },
					{Constants.Locktype, nameof(PgLock.Locktype) },
					{Constants.Mode, nameof(PgLock.Mode) },
					{Constants.Objid, nameof(PgLock.Objid) },
					{Constants.Objsubid, nameof(PgLock.Objsubid) },
					{Constants.Page, nameof(PgLock.Page) },
					{Constants.Pid, nameof(PgLock.Pid) },
					{Constants.Relation, nameof(PgLock.Relation) },
					{Constants.Transactionid, nameof(PgLock.Transactionid) },
					{Constants.Tuple, nameof(PgLock.Tuple) },
					{Constants.Virtualtransaction, nameof(PgLock.Virtualtransaction) },
					{Constants.Virtualxid, nameof(PgLock.Virtualxid) },
					{Constants.Waitstart, nameof(PgLock.Waitstart) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgLock), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}