//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class PgCatalog
	{
		public static partial class PgSubscriptionMapper
		{
			static partial class Constants
			{
				public const string Oid = "oid";
				public const string Subbinary = "subbinary";
				public const string Subconninfo = "subconninfo";
				public const string Subdbid = "subdbid";
				public const string Subenabled = "subenabled";
				public const string Subname = "subname";
				public const string Subowner = "subowner";
				public const string Subpublication = "subpublications";
				public const string Subslotname = "subslotname";
				public const string Substream = "substream";
				public const string Subsynccommit = "subsynccommit";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("pg_catalog.pg_subscription")
				{
					Oid = new ColumnDefinition(Constants.Oid, this);
					Subbinary = new ColumnDefinition(Constants.Subbinary, this);
					Subconninfo = new ColumnDefinition(Constants.Subconninfo, this);
					Subdbid = new ColumnDefinition(Constants.Subdbid, this);
					Subenabled = new ColumnDefinition(Constants.Subenabled, this);
					Subname = new ColumnDefinition(Constants.Subname, this);
					Subowner = new ColumnDefinition(Constants.Subowner, this);
					Subpublication = new ColumnDefinition(Constants.Subpublication, this);
					Subslotname = new ColumnDefinition(Constants.Subslotname, this);
					Substream = new ColumnDefinition(Constants.Substream, this);
					Subsynccommit = new ColumnDefinition(Constants.Subsynccommit, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition Oid { get; private set; }
				public ColumnDefinition Subbinary { get; private set; }
				public ColumnDefinition Subconninfo { get; private set; }
				public ColumnDefinition Subdbid { get; private set; }
				public ColumnDefinition Subenabled { get; private set; }
				public ColumnDefinition Subname { get; private set; }
				public ColumnDefinition Subowner { get; private set; }
				public ColumnDefinition Subpublication { get; private set; }
				public ColumnDefinition Subslotname { get; private set; }
				public ColumnDefinition Substream { get; private set; }
				public ColumnDefinition Subsynccommit { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.Oid, nameof(PgSubscription.Oid) },
					{Constants.Subbinary, nameof(PgSubscription.Subbinary) },
					{Constants.Subconninfo, nameof(PgSubscription.Subconninfo) },
					{Constants.Subdbid, nameof(PgSubscription.Subdbid) },
					{Constants.Subenabled, nameof(PgSubscription.Subenabled) },
					{Constants.Subname, nameof(PgSubscription.Subname) },
					{Constants.Subowner, nameof(PgSubscription.Subowner) },
					{Constants.Subpublication, nameof(PgSubscription.Subpublication) },
					{Constants.Subslotname, nameof(PgSubscription.Subslotname) },
					{Constants.Substream, nameof(PgSubscription.Substream) },
					{Constants.Subsynccommit, nameof(PgSubscription.Subsynccommit) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PgSubscription), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}