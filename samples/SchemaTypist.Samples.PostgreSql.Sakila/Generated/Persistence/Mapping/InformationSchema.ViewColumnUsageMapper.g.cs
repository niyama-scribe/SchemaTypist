//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class InformationSchema
	{
		public static partial class ViewColumnUsageMapper
		{
			static partial class Constants
			{
				public const string ColumnName = "column_name";
				public const string TableCatalog = "table_catalog";
				public const string TableName = "table_name";
				public const string TableSchema = "table_schema";
				public const string ViewCatalog = "view_catalog";
				public const string ViewName = "view_name";
				public const string ViewSchema = "view_schema";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("information_schema.view_column_usage")
				{
					ColumnName = new ColumnDefinition(Constants.ColumnName, this);
					TableCatalog = new ColumnDefinition(Constants.TableCatalog, this);
					TableName = new ColumnDefinition(Constants.TableName, this);
					TableSchema = new ColumnDefinition(Constants.TableSchema, this);
					ViewCatalog = new ColumnDefinition(Constants.ViewCatalog, this);
					ViewName = new ColumnDefinition(Constants.ViewName, this);
					ViewSchema = new ColumnDefinition(Constants.ViewSchema, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition ColumnName { get; private set; }
				public ColumnDefinition TableCatalog { get; private set; }
				public ColumnDefinition TableName { get; private set; }
				public ColumnDefinition TableSchema { get; private set; }
				public ColumnDefinition ViewCatalog { get; private set; }
				public ColumnDefinition ViewName { get; private set; }
				public ColumnDefinition ViewSchema { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.ColumnName, nameof(ViewColumnUsage.ColumnName) },
					{Constants.TableCatalog, nameof(ViewColumnUsage.TableCatalog) },
					{Constants.TableName, nameof(ViewColumnUsage.TableName) },
					{Constants.TableSchema, nameof(ViewColumnUsage.TableSchema) },
					{Constants.ViewCatalog, nameof(ViewColumnUsage.ViewCatalog) },
					{Constants.ViewName, nameof(ViewColumnUsage.ViewName) },
					{Constants.ViewSchema, nameof(ViewColumnUsage.ViewSchema) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(ViewColumnUsage), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}