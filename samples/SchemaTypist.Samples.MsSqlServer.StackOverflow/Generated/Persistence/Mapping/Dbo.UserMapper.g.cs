//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence.Mapping
{
	static partial class Dbo
	{
		public static partial class UserMapper
		{
			static partial class Constants
			{
				public const string AboutMe = "AboutMe";
				public const string AccountId = "AccountId";
				public const string Age = "Age";
				public const string CreationDate = "CreationDate";
				public const string DisplayName = "DisplayName";
				public const string DownVote = "DownVotes";
				public const string EmailHash = "EmailHash";
				public const string Id = "Id";
				public const string LastAccessDate = "LastAccessDate";
				public const string Location = "Location";
				public const string Reputation = "Reputation";
				public const string UpVote = "UpVotes";
				public const string View = "Views";
				public const string WebsiteUrl = "WebsiteUrl";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("StackOverflow.dbo.Users")
				{
					AboutMe = new ColumnDefinition(Constants.AboutMe, this);
					AccountId = new ColumnDefinition(Constants.AccountId, this);
					Age = new ColumnDefinition(Constants.Age, this);
					CreationDate = new ColumnDefinition(Constants.CreationDate, this);
					DisplayName = new ColumnDefinition(Constants.DisplayName, this);
					DownVote = new ColumnDefinition(Constants.DownVote, this);
					EmailHash = new ColumnDefinition(Constants.EmailHash, this);
					Id = new ColumnDefinition(Constants.Id, this);
					LastAccessDate = new ColumnDefinition(Constants.LastAccessDate, this);
					Location = new ColumnDefinition(Constants.Location, this);
					Reputation = new ColumnDefinition(Constants.Reputation, this);
					UpVote = new ColumnDefinition(Constants.UpVote, this);
					View = new ColumnDefinition(Constants.View, this);
					WebsiteUrl = new ColumnDefinition(Constants.WebsiteUrl, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition AboutMe { get; private set; }
				public ColumnDefinition AccountId { get; private set; }
				public ColumnDefinition Age { get; private set; }
				public ColumnDefinition CreationDate { get; private set; }
				public ColumnDefinition DisplayName { get; private set; }
				public ColumnDefinition DownVote { get; private set; }
				public ColumnDefinition EmailHash { get; private set; }
				public ColumnDefinition Id { get; private set; }
				public ColumnDefinition LastAccessDate { get; private set; }
				public ColumnDefinition Location { get; private set; }
				public ColumnDefinition Reputation { get; private set; }
				public ColumnDefinition UpVote { get; private set; }
				public ColumnDefinition View { get; private set; }
				public ColumnDefinition WebsiteUrl { get; private set; }

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.AboutMe, nameof(User.AboutMe) },
					{Constants.AccountId, nameof(User.AccountId) },
					{Constants.Age, nameof(User.Age) },
					{Constants.CreationDate, nameof(User.CreationDate) },
					{Constants.DisplayName, nameof(User.DisplayName) },
					{Constants.DownVote, nameof(User.DownVote) },
					{Constants.EmailHash, nameof(User.EmailHash) },
					{Constants.Id, nameof(User.Id) },
					{Constants.LastAccessDate, nameof(User.LastAccessDate) },
					{Constants.Location, nameof(User.Location) },
					{Constants.Reputation, nameof(User.Reputation) },
					{Constants.UpVote, nameof(User.UpVote) },
					{Constants.View, nameof(User.View) },
					{Constants.WebsiteUrl, nameof(User.WebsiteUrl) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(User), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}