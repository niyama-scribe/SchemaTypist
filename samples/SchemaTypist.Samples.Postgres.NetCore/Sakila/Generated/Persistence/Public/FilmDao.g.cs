//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SchemaTypist.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Samples.Postgres.NetCore.Sakila.Generated.Domain.Public;

namespace SchemaTypist.Samples.Postgres.NetCore.Sakila.Generated.Persistence.Public;

public static partial class FilmDao
{
	static partial class Constants
	{
		public const string Description = "description";
		public const string FilmId = "film_id";
		public const string Fulltext = "fulltext";
		public const string LanguageId = "language_id";
		public const string LastUpdate = "last_update";
		public const string Length = "length";
		public const string OriginalLanguageId = "original_language_id";
		public const string Rating = "rating";
		public const string ReleaseYear = "release_year";
		public const string RentalDuration = "rental_duration";
		public const string RentalRate = "rental_rate";
		public const string ReplacementCost = "replacement_cost";
		public const string SpecialFeature = "special_features";
		public const string Title = "title";
	}

	public static TableDefinition Table => new TableDefinition();

	public partial class TableDefinition : TabularDefinition
	{
		private readonly IDictionary<string, ColumnDefinition> _columns = new Dictionary<string, ColumnDefinition>();
            
		public TableDefinition() : base("public.film")
		{
			_columns.Add(Constants.Description, new ColumnDefinition(Constants.Description, this));
			_columns.Add(Constants.FilmId, new ColumnDefinition(Constants.FilmId, this));
			_columns.Add(Constants.Fulltext, new ColumnDefinition(Constants.Fulltext, this));
			_columns.Add(Constants.LanguageId, new ColumnDefinition(Constants.LanguageId, this));
			_columns.Add(Constants.LastUpdate, new ColumnDefinition(Constants.LastUpdate, this));
			_columns.Add(Constants.Length, new ColumnDefinition(Constants.Length, this));
			_columns.Add(Constants.OriginalLanguageId, new ColumnDefinition(Constants.OriginalLanguageId, this));
			_columns.Add(Constants.Rating, new ColumnDefinition(Constants.Rating, this));
			_columns.Add(Constants.ReleaseYear, new ColumnDefinition(Constants.ReleaseYear, this));
			_columns.Add(Constants.RentalDuration, new ColumnDefinition(Constants.RentalDuration, this));
			_columns.Add(Constants.RentalRate, new ColumnDefinition(Constants.RentalRate, this));
			_columns.Add(Constants.ReplacementCost, new ColumnDefinition(Constants.ReplacementCost, this));
			_columns.Add(Constants.SpecialFeature, new ColumnDefinition(Constants.SpecialFeature, this));
			_columns.Add(Constants.Title, new ColumnDefinition(Constants.Title, this));
		}

		public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

		public ColumnDefinition Description => _columns[Constants.Description];
		public ColumnDefinition FilmId => _columns[Constants.FilmId];
		public ColumnDefinition Fulltext => _columns[Constants.Fulltext];
		public ColumnDefinition LanguageId => _columns[Constants.LanguageId];
		public ColumnDefinition LastUpdate => _columns[Constants.LastUpdate];
		public ColumnDefinition Length => _columns[Constants.Length];
		public ColumnDefinition OriginalLanguageId => _columns[Constants.OriginalLanguageId];
		public ColumnDefinition Rating => _columns[Constants.Rating];
		public ColumnDefinition ReleaseYear => _columns[Constants.ReleaseYear];
		public ColumnDefinition RentalDuration => _columns[Constants.RentalDuration];
		public ColumnDefinition RentalRate => _columns[Constants.RentalRate];
		public ColumnDefinition ReplacementCost => _columns[Constants.ReplacementCost];
		public ColumnDefinition SpecialFeature => _columns[Constants.SpecialFeature];
		public ColumnDefinition Title => _columns[Constants.Title];

		public IEnumerable<ColumnDefinition> Star => _columns.Values;
	}

	public static partial class QueryResults
	{
		private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
		{
			{Constants.Description, nameof(Film.Description) },
			{Constants.FilmId, nameof(Film.FilmId) },
			{Constants.Fulltext, nameof(Film.Fulltext) },
			{Constants.LanguageId, nameof(Film.LanguageId) },
			{Constants.LastUpdate, nameof(Film.LastUpdate) },
			{Constants.Length, nameof(Film.Length) },
			{Constants.OriginalLanguageId, nameof(Film.OriginalLanguageId) },
			{Constants.Rating, nameof(Film.Rating) },
			{Constants.ReleaseYear, nameof(Film.ReleaseYear) },
			{Constants.RentalDuration, nameof(Film.RentalDuration) },
			{Constants.RentalRate, nameof(Film.RentalRate) },
			{Constants.ReplacementCost, nameof(Film.ReplacementCost) },
			{Constants.SpecialFeature, nameof(Film.SpecialFeature) },
			{Constants.Title, nameof(Film.Title) },
		};

		static Func<Type, string, PropertyInfo> GetMapperFunc()
		{
			var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
			{
				if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
				return t.GetProperty(columnName);
			}
			);
			return mapper;
		}

		public static CustomPropertyTypeMap GetTypeMap()
		{
			var typeMap = new CustomPropertyTypeMap(typeof(Film), GetMapperFunc());
			CustomizeTypeMap(typeMap);
			return typeMap;
		}

		static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
	}
}