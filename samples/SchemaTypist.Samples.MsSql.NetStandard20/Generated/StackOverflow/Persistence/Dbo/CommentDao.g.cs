//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SchemaTypist.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.Samples.MsSql.Generated.StackOverflow.Domain.Dbo;

namespace SchemaTypist.Samples.MsSql.Generated.StackOverflow.Persistence.Dbo
{
	public static partial class CommentDao
	{
		static partial class Constants
		{
			public const string CreationDate = "CreationDate";
			public const string Id = "Id";
			public const string PostId = "PostId";
			public const string Score = "Score";
			public const string Text = "Text";
			public const string UserId = "UserId";
		}

		public static TableDefinition Table => new TableDefinition();

		public partial class TableDefinition : TabularDefinition
		{
			private readonly IDictionary<string, ColumnDefinition> _columns = new Dictionary<string, ColumnDefinition>();
                
			public TableDefinition() : base("StackOverflow.dbo.Comments")
			{
				_columns.Add(Constants.CreationDate, new ColumnDefinition(Constants.CreationDate, this));
				_columns.Add(Constants.Id, new ColumnDefinition(Constants.Id, this));
				_columns.Add(Constants.PostId, new ColumnDefinition(Constants.PostId, this));
				_columns.Add(Constants.Score, new ColumnDefinition(Constants.Score, this));
				_columns.Add(Constants.Text, new ColumnDefinition(Constants.Text, this));
				_columns.Add(Constants.UserId, new ColumnDefinition(Constants.UserId, this));
			}

			public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

			public ColumnDefinition CreationDate => _columns[Constants.CreationDate];
			public ColumnDefinition Id => _columns[Constants.Id];
			public ColumnDefinition PostId => _columns[Constants.PostId];
			public ColumnDefinition Score => _columns[Constants.Score];
			public ColumnDefinition Text => _columns[Constants.Text];
			public ColumnDefinition UserId => _columns[Constants.UserId];

			public IEnumerable<ColumnDefinition> Star => _columns.Values;
		}
	
		public static partial class QueryResults
		{
			private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
			{
				{Constants.CreationDate, nameof(Comment.CreationDate) },
				{Constants.Id, nameof(Comment.Id) },
				{Constants.PostId, nameof(Comment.PostId) },
				{Constants.Score, nameof(Comment.Score) },
				{Constants.Text, nameof(Comment.Text) },
				{Constants.UserId, nameof(Comment.UserId) },
			};

			static Func<Type, string, PropertyInfo> GetMapperFunc()
			{
				var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
				{
					if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
					return t.GetProperty(columnName);
				}
				);
				return mapper;
			}

			public static CustomPropertyTypeMap GetTypeMap()
			{
				var typeMap = new CustomPropertyTypeMap(typeof(Comment), GetMapperFunc());
				CustomizeTypeMap(typeMap);
				return typeMap;
			}

			static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
		}
	}
}