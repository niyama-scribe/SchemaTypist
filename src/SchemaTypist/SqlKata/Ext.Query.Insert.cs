using System.Collections.Generic;
using System.Linq;
using SchemaTypist.DatabaseMetadata;
using SchemaTypist.Dml;
using SqlKata;

namespace SchemaTypist.SqlKata
{
    public static partial class Ext
    {
        public static Query AsInsert(this Query q, IEnumerable<ColumnDefinition> columns,
            IEnumerable<object> values, bool returnId = false)
        {
            var kvpEnumerable =
                columns.Zip(values, (col, val) => new KeyValuePair<string, object>(col.ColumnName__, val));
            return q.AsInsert(kvpEnumerable, returnId);
        }

        public static Query AsInsert(this Query q, IEnumerable<KeyValuePair<ColumnDefinition, object>> values, bool returnId = false)
        {
            return q.AsInsert(values.Select(kvp => new KeyValuePair<string, object>(kvp.Key.ColumnName__, kvp.Value)), returnId);
        }

        public static Query AsInsert(this Query q, IEnumerable<ColumnDefinition> columns,
            IEnumerable<IEnumerable<object>> rowsValues)
        {
            return q.AsInsert(columns.Select(c => c.ColumnName__), rowsValues);
        }

        public static Query AsInsert(this Query q, IEnumerable<ColumnDefinition> columns, Query query)
        {
            return q.AsInsert(columns.Select(c => c.ColumnName__), query);
        }

        /// <summary>
        /// This will insert all properties from the entity into corresponding columns in the table.
        /// The only columns left untouched would be autogenerated columns (serial, identity, etc.)
        /// </summary>
        /// <param name="q">Query</param>
        /// <param name="entity">Hydrated entity object that needs to be inserted into the corresponding table.</param>
        /// <typeparam name="TEntity">Entity type</typeparam>
        /// <returns></returns>
        public static Query Insert<TEntity>(this Query q, TEntity entity)
        {
            DmlQueryBuilder.BuildForInsert(q, entity);
            return q;
        }
    }
}
