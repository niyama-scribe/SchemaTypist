//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SchemaTypist.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

namespace {{ path_namespace.entities_namespace }}
{
	public partial class {{ tabular_structure.name }}{{ config.entity_name_suffix }}
	{
	    {{ if config.create_immutable_entities }}
	    private {{ tabular_structure.name }}{{ config.entity_name_suffix }}()
	    {
	    }
	    
	    public partial class Builder
	    {
	        public Builder()
	        {
	        }
	        
	        {{~ for col in tabular_structure.columns ~}}
            private {{ col.data_type }} _set{{ col.name }}{{ if col.default_value }} = {{ col.default_value }} {{ end }};
            public Builder With{{ col.name }}({{ col.data_type }} val)
            {
                _set{{ col.name }} = val;
                return this;
            }
            {{~ end ~}}
            
            public {{ tabular_structure.name }}{{ config.entity_name_suffix }} Build() 
            {
                var retVal = new {{ tabular_structure.name }}{{ config.entity_name_suffix }}()
                {
                    {{~ for col in tabular_structure.columns ~}}
                        {{ col.name }} = _set{{ col.name }},
                    {{~ end ~}}
                };
                CustomizeBuild(retVal);
                return retVal;
            }
            
            partial void CustomizeBuild({{ tabular_structure.name }}{{ config.entity_name_suffix }} entity);
	    }
	    
	    {{~ for col in tabular_structure.columns ~}}
        public {{ col.data_type }} {{ col.name }} { get; private set; }
        {{~ end ~}}
        
        public override string ToString()
        {
            var stringBuilder = new StringBuilder();
            stringBuilder.Append("{{ tabular_structure.name }}{{ config.entity_name_suffix }}");
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(' ');
            }
            stringBuilder.Append('}');
            return stringBuilder.ToString();
        }
        
        protected virtual bool PrintMembers(StringBuilder builder)
        {
            {{~ for col in tabular_structure.columns ~}}
            builder.Append("{{ col.name }} = ");
            builder.Append({{ col.name }}.ToString());
            builder.Append(", ");
            {{~ end ~}}
            return true;
        }
        
        protected bool Equals({{ tabular_structure.name }}{{ config.entity_name_suffix }} other)
        {
            var retVal = true;
            {{~ for col in tabular_structure.columns ~}}
            retVal = retVal && {{ col.name }} == other.{{ col.name }};
            {{~ end ~}}
            return retVal;
        }
        
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals(({{ tabular_structure.name }}{{ config.entity_name_suffix }}) obj);
        }
        
        public override int GetHashCode()
        {
            var hashCode = new HashCode();
            {{~ for col in tabular_structure.columns ~}}
            hashCode.Add({{ col.name }});
            {{~ end ~}}
            return hashCode.ToHashCode();
        }
        
	    {{ else }}
	    {{~ for col in tabular_structure.columns ~}}
        public {{ col.data_type }} {{ col.name }} { get; set; }{{ if col.default_value }} = {{ col.default_value }}; {{ end }}
        {{~ end ~}}
	    {{ end }}
		
	}
}
