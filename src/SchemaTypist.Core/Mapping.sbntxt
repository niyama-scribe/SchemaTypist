﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using {{ config.root_namespace }}.{{ config.entities_namespace }};

namespace {{ config.root_namespace }}.{{ config.persistence_namespace }}.{{ config.mapping_namespace }}
{
	static partial class {{ schema }}
	{
		public static partial class {{ name }}{{ config.mapper_name_suffix }}
		{
			static partial class Constants
			{
				{{~ for col in columns ~}}
				public const string {{ col.name }} = "{{ col.sql_name }}";
				{{~ end ~}}
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("{{ sql_qualified_name }}")
				{
					{{~ for col in columns ~}}
					{{ col.name }} = new ColumnDefinition(Constants.{{ col.name }}, this);
					{{~ end ~}}
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				{{~ for col in columns ~}}
				public ColumnDefinition {{ col.name }} { get; private set; }
				{{~ end ~}}

			}
		
			public static partial class QueryResults
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{{~ for col in columns ~}}
					{Constants.{{ col.name }}, nameof({{ name }}{{ config.model_name_suffix }}.{{ col.name }}) },
					{{~ end ~}}
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetTypeMap()
				{
					var typeMap = new CustomPropertyTypeMap(typeof({{ name }}{{ config.model_name_suffix }}), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}