//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SchemaTypist.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using SchemaTypist.DatabaseMetadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using {{ path_namespace.entities_namespace }};

namespace {{ path_namespace.persistence_namespace }};

public static partial class {{ tabular_structure.name }}{{ config.mapper_name_suffix }}
{
	static partial class Constants
	{
		{{~ for col in tabular_structure.columns ~}}
		public const string {{ col.name }} = "{{ col.sql_name }}";
		{{~ end ~}}
	}

	public static TableDefinition Table => new TableDefinition();

	public partial class TableDefinition : TabularDefinition
	{
		private readonly IDictionary<string, ColumnDefinition> _columns = new Dictionary<string, ColumnDefinition>();
            
		public TableDefinition() : base("{{ tabular_structure.sql_qualified_name }}")
		{
			{{~ for col in tabular_structure.columns ~}}
			_columns.Add(Constants.{{ col.name }}, new ColumnDefinition(Constants.{{ col.name }}, this));
			{{~ end ~}}
		}

		public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

		{{~ for col in tabular_structure.columns ~}}
		public ColumnDefinition {{ col.name }} => _columns[Constants.{{ col.name }}];
		{{~ end ~}}

		public IEnumerable<ColumnDefinition> Star => _columns.Values;
	}

	public static partial class QueryResults
	{
		private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
		{
			{{~ for col in tabular_structure.columns ~}}
			{Constants.{{ col.name }}, nameof({{ tabular_structure.name }}{{ config.model_name_suffix }}.{{ col.name }}) },
			{{~ end ~}}
		};

		static Func<Type, string, PropertyInfo> GetMapperFunc()
		{
			var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
			{
				if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
				return t.GetProperty(columnName);
			}
			);
			return mapper;
		}

		public static CustomPropertyTypeMap GetTypeMap()
		{
			var typeMap = new CustomPropertyTypeMap(typeof({{ tabular_structure.name }}{{ config.model_name_suffix }}), GetMapperFunc());
			CustomizeTypeMap(typeMap);
			return typeMap;
		}

		static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
	}
}