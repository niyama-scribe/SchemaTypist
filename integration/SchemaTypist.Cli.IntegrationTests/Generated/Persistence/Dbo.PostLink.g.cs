//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using SchemaTypist;
using System;
using System.Collections.Generic;
using System.Reflection;
using SchemaTypist.DatabaseMetadata;
using SchemaTypist.Generated.Domain;

namespace SchemaTypist.Generated.Persistence
{
	static partial class Dbo
	{
		public static partial class PostLink
		{
			static partial class Constants
			{
				public const string CreationDate = "CreationDate";
				public const string Id = "Id";
				public const string LinkTypeId = "LinkTypeId";
				public const string PostId = "PostId";
				public const string RelatedPostId = "RelatedPostId";
			}

			public static TableDefinition Table => new TableDefinition();

			public partial class TableDefinition : TabularDefinition
			{
				public TableDefinition() : base("StackOverflow", "dbo", "PostLinks")
				{
					CreationDate = new ColumnDefinition(Constants.CreationDate, this);
					Id = new ColumnDefinition(Constants.Id, this);
					LinkTypeId = new ColumnDefinition(Constants.LinkTypeId, this);
					PostId = new ColumnDefinition(Constants.PostId, this);
					RelatedPostId = new ColumnDefinition(Constants.RelatedPostId, this);
				}

				public TableDefinition As(string alias) => base.As<TableDefinition>(alias);

				public ColumnDefinition CreationDate { get; private set; }
				public ColumnDefinition Id { get; private set; }
				public ColumnDefinition LinkTypeId { get; private set; }
				public ColumnDefinition PostId { get; private set; }
				public ColumnDefinition RelatedPostId { get; private set; }

			}
		
			public static partial class QueryResultsMapper
			{
				private static Dictionary<string, string> columnMap = new Dictionary<string, string>()
				{
					{Constants.CreationDate, nameof(PostLinkEntity.CreationDate) },
					{Constants.Id, nameof(PostLinkEntity.Id) },
					{Constants.LinkTypeId, nameof(PostLinkEntity.LinkTypeId) },
					{Constants.PostId, nameof(PostLinkEntity.PostId) },
					{Constants.RelatedPostId, nameof(PostLinkEntity.RelatedPostId) },
				};

				static Func<Type, string, PropertyInfo> GetMapperFunc()
				{
					var mapper = new Func<Type, string, PropertyInfo>((t, columnName) =>
					{
						if (columnMap.ContainsKey(columnName)) return t.GetProperty(columnMap[columnName]);
						return t.GetProperty(columnName);
					}
					);
					return mapper;
				}

				public static CustomPropertyTypeMap GetMapper()
				{
					var typeMap = new CustomPropertyTypeMap(typeof(PostLinkEntity), GetMapperFunc());
					CustomizeTypeMap(typeMap);
					return typeMap;
				}

				static partial void CustomizeTypeMap(CustomPropertyTypeMap typeMap);
			}
		}
	}
}